{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/images/elkinfo.jpeg","path":"images/elkinfo.jpeg","modified":1,"renderable":0},{"_id":"source/images/goland调试配置.png","path":"images/goland调试配置.png","modified":1,"renderable":0},{"_id":"source/images/新建项目.png","path":"images/新建项目.png","modified":1,"renderable":0},{"_id":"source/images/管道示意图.png","path":"images/管道示意图.png","modified":1,"renderable":0},{"_id":"source/images/项目初始化.png","path":"images/项目初始化.png","modified":1,"renderable":0},{"_id":"source/images/项目目录.png","path":"images/项目目录.png","modified":1,"renderable":0},{"_id":"source/images/项目类型.png","path":"images/项目类型.png","modified":1,"renderable":0},{"_id":"source/images/kafka/1.png","path":"images/kafka/1.png","modified":1,"renderable":0},{"_id":"source/images/kafka/2.png","path":"images/kafka/2.png","modified":1,"renderable":0},{"_id":"source/images/kafka/3.png","path":"images/kafka/3.png","modified":1,"renderable":0},{"_id":"source/images/kafka/4.png","path":"images/kafka/4.png","modified":1,"renderable":0},{"_id":"source/images/kafka/5.png","path":"images/kafka/5.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/touxiang.jpg","path":"images/touxiang.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/备案图标.png","path":"images/备案图标.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"0bcde186ad9a98b489f976d74fc4c0145974874c","modified":1695541111222},{"_id":"source/_discarded/windows部署kafka.md","hash":"5dd2313bf95d9e10eb7ac2af11d805cce32238df","modified":1695541111223},{"_id":"source/_posts/MailKit.md","hash":"c08d2c4f8226a89c2413794e559ba1a348e4c101","modified":1695541111223},{"_id":"source/_posts/apb-api.md","hash":"57480daaaf2ba150074f23f78e4890418f396f59","modified":1695541111223},{"_id":"source/_posts/ResultTextAutoCompletion.md","hash":"9a1f153d14d3610e0069c8ec49b08018e8634fbd","modified":1695541111223},{"_id":"source/_posts/css.md","hash":"90a291796c6fb4bee0228a9f62199efcbc4e077b","modified":1695541111224},{"_id":"source/_posts/baget.md","hash":"0f64c3930ac3a5867450a6cfd845a1bb00796aaa","modified":1695541111224},{"_id":"source/_posts/di.md","hash":"ea3881d9eea7fbb9712d0a292a743b128fc430bf","modified":1695541111224},{"_id":"source/_posts/docker-machine.md","hash":"8ffce4ef8f88ce6a9dcbcfa686b60288f7a8cf4a","modified":1695541111225},{"_id":"source/_posts/docker-compose.md","hash":"3879fbc26041a4cd3b68d61cec17e1d8ad21c315","modified":1695541111224},{"_id":"source/_posts/docker-momeory.md","hash":"49e9f5afb1daffd5798b59b89acc33c02372ccf1","modified":1695541111225},{"_id":"source/_posts/docker-pack.md","hash":"2b8a932e8b7a295741202ed2d93b34afcc60df5a","modified":1695541111225},{"_id":"source/_posts/docker-swarm.md","hash":"d1dd2e6feae6ed9e0bbec68aa4ba5afacbf02c54","modified":1695541111225},{"_id":"source/_posts/docker-开启远程端口.md","hash":"11e7ab1551c18d3336a262e69b10d0fe28bdc417","modified":1695541111226},{"_id":"source/_posts/docker-开启远程端口，引起病毒感染。.md","hash":"7e25bb78ebaee5cb1171f1a1d91104c5f044d4ba","modified":1695541111226},{"_id":"source/_posts/dockercmd.md","hash":"c8f450fbd5f9eeaebe076c55cb7df269e71f11fa","modified":1695541111226},{"_id":"source/_posts/elk.md","hash":"69ee24156a058aa3fdd949a95243fae2c4cdbc5e","modified":1695541111226},{"_id":"source/_posts/go小试牛刀.md","hash":"8b3daad2ce3c5f77ab6779986bbb78fe9e86641b","modified":1695541111227},{"_id":"source/_posts/grpc.md","hash":"4f7d5a29fd8f35e70b05643390d68befb6582024","modified":1695541111227},{"_id":"source/_posts/install_jenkins.md","hash":"528025c8466ba3b604b7a8ce615a08dc3e5dcfdb","modified":1695541111227},{"_id":"source/_posts/java小试牛刀.md","hash":"a2b8c296e1378e946ab3c94251ef3be7322fb959","modified":1695541111227},{"_id":"source/_posts/doker.md","hash":"bb5ffe597f47254ef152a70e1bfc6409cc58564e","modified":1695541111226},{"_id":"source/_posts/jenkins.md","hash":"6d8b6c6e3ebd55564381f093d57bbd0abcc02488","modified":1695541111228},{"_id":"source/_posts/k8s部署.md","hash":"fa2995c27fbb1e56d0a765e2fca2f93d6cd52eef","modified":1695541111228},{"_id":"source/_posts/linux-虚拟机没有ens33网卡信息.md","hash":"40d6a94622b7ccd28dff4d788ccb08a8b90b4638","modified":1695541111228},{"_id":"source/_posts/linux设置固定ip.md","hash":"f10684098494024f5dea6d057b861e46879109f0","modified":1695541111228},{"_id":"source/_posts/micro_services.md","hash":"a6169be7b2142b38436b43b4a73a8a7b508a7f75","modified":1695541111229},{"_id":"source/_posts/modules.md","hash":"5367c39d231c94d595081d512e3c1a9fa251b7d7","modified":1695541111229},{"_id":"source/_posts/mysql.md","hash":"44f4da8b353c99bc634102115af1bb3b98d5e659","modified":1695541111229},{"_id":"source/_posts/nginx.md","hash":"442f7dd82dfa13042d66538064c578b8ccc7e8ee","modified":1695541111229},{"_id":"source/_posts/ssh无法链接.md","hash":"a7ab39acc50a0c57a39e79101caf397832cd1a31","modified":1695541111230},{"_id":"source/_posts/textbox自动补全.md","hash":"e9cae912efebf6b90cbf02aa8bf15e081fd43da3","modified":1695541111230},{"_id":"source/_posts/windows部署kafka.md","hash":"29a09575710dc5582535200136daee398014da22","modified":1695541111230},{"_id":"source/_posts/wtm.md","hash":"fa3a27f83d387d9ad941c993d584892c82fdaa4f","modified":1695541111230},{"_id":"source/_posts/wtmcontext.md","hash":"26c5f83b829d4484ea815fa73e3cdded2b55cc98","modified":1695541111230},{"_id":"source/_posts/wtm多租户实现-增删改.md","hash":"587b9a154de2ad6d2d987b0c948ff4d6c09fa674","modified":1695541111231},{"_id":"source/_posts/wtm多租户实现-查询.md","hash":"1132b631682a5ccb67439de8cfcb33554bbb8705","modified":1695541111231},{"_id":"source/_posts/wtm日志实现.md","hash":"58d4dc6724429dd7ffc5f45c4d2677af596d9576","modified":1695541111231},{"_id":"source/_posts/wtm源码解读-1.md","hash":"8affb3a4d592df12d450b872e667880a19a8d805","modified":1695541111231},{"_id":"source/_posts/wtm源码解读-3.md","hash":"3d6b283f9ac643ffa0c4dff44a3efc24002743e9","modified":1695541111232},{"_id":"source/_posts/wtm源码解读-2.md","hash":"71f59a6e02fd869dde0fb9628c71fb57c2bfb799","modified":1695541111232},{"_id":"source/_posts/wtm血泪.md","hash":"fd3eaff1c2d133d0ad1da60b7f0405d6bfaea1e8","modified":1695541111232},{"_id":"source/_posts/设计模式-责任链-管道.md","hash":"6e6964628fa13e246ec4800d9d7a9021bee3660c","modified":1695541111232},{"_id":"source/categories/index.md","hash":"187fc84dd5e4ed4819184ff17d43160e0bfa5744","modified":1695541111233},{"_id":"source/about/index.md","hash":"a623685325b479be6a6e41435bbb5f0092fb00e8","modified":1695541111232},{"_id":"source/images/elkinfo.jpeg","hash":"3e693d9a73c2a4ca6a711793885397654026782b","modified":1695541111233},{"_id":"source/images/管道示意图.png","hash":"d8eea7e92fa3442388ff1bb5b88a700d85e0c06b","modified":1695541111240},{"_id":"source/images/项目目录.png","hash":"70047d14125df13f69d209619f7e44ef97701cce","modified":1695541111243},{"_id":"source/schedule/index.md","hash":"e703e30444db8661af05212aeb5df118e7723361","modified":1695541111244},{"_id":"source/tags/index.md","hash":"b685fca40cb2d1cd035824cb6e81c70e0c3590e4","modified":1695541111244},{"_id":"source/images/kafka/1.png","hash":"544b5d6199840cb9446ad21fa87b6e4552b5475c","modified":1695541111236},{"_id":"source/images/kafka/2.png","hash":"544b5d6199840cb9446ad21fa87b6e4552b5475c","modified":1695541111236},{"_id":"source/images/kafka/4.png","hash":"f5d60fbc0a6a4921dd185808c5e934f687e20579","modified":1695541111238},{"_id":"source/images/新建项目.png","hash":"258e6165307b5bffa551e82716a5b1858392bb96","modified":1695541111239},{"_id":"source/images/项目类型.png","hash":"360f14ccbdaefe664477b74b3aa904a4e4d7d5c8","modified":1695541111243},{"_id":"source/images/kafka/3.png","hash":"c48bd4bbaae13f8d09bd8d98520a273bfa273958","modified":1695541111237},{"_id":"source/images/kafka/5.png","hash":"12bead28279e0eea0ead11a92451fd9377acb90b","modified":1695541111239},{"_id":"source/images/goland调试配置.png","hash":"ca5d5d40382dafe6c6bae2430ab6e1faa9fb2f07","modified":1695541111235},{"_id":"source/images/项目初始化.png","hash":"4b54e3808e8bac85b9bf61e37e0bce32e371d7e7","modified":1695541111242},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1695541108671},{"_id":"node_modules/hexo-theme-next/README.md","hash":"9b0af190c8265911c379ba9c7b453c8a7f1501c8","modified":1695541108671},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"1449c662efb5d122eea237d22911a9540e8b6979","modified":1695541108671},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"d5cc06efaf76b401eafdc230ae9ba2c86b01d0e1","modified":1695541108672},{"_id":"node_modules/hexo-theme-next/package.json","hash":"489b4669fe9c0d46704fffb8ea341f4903057323","modified":1695541108696},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1695541108672},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1695541108672},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1695541108673},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1695541108674},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1695541108674},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"842adcbab6a56762521a02f8b1d8c49c10e02a80","modified":1695541108674},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1695541108675},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1695541108675},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"21676d658d309eb90342a924e106645611c937bc","modified":1695541108675},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1695541108675},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1695541108675},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1695541108676},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1695541108676},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1695541108676},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1695541108676},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"a4b607d38fb77f083235a0ecb2384cfdd3542bde","modified":1695541108676},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1695541108677},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1695541108677},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"837bb39651769244b19ce458053757d429869764","modified":1695541108677},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1695541108677},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1695541108678},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1695541108678},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1695541108678},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"bf61562ac892231bd28f23a2a5597ee98fb05aa6","modified":1695541108678},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1695541108678},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1695541108679},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1695541108679},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"2842f3e9fdde5bbd14cac89629221e68d80c8ea1","modified":1695541108679},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1695541108695},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1695541108695},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1695541108695},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"fddfdee95f5da86eab8a85d6eb1901996d2153cf","modified":1695541108695},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"06c570c3ccc47040a17cbb903dc43e9ba054ba4b","modified":1695541108695},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1695541108696},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1695541108673},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"ce247fb6ba20c607be42957ff38f2dd6d71c12a4","modified":1695541108673},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1695541108673},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"fc077960de61db02072573dd330ba2ca3ae9d4de","modified":1695541108674},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1695541108680},{"_id":"node_modules/hexo-theme-next/layout/_macro/passage-end-tag.swig","hash":"7cb6b41cd4925cefaa0d72d8d2c3929be06e4879","modified":1695541108679},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eec74e135d01948361020140c3798769e1e7363b","modified":1695541108681},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"32f3c6d5b0b0a89e4d22218a66461cb5472425e4","modified":1695541108681},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"09075c3395b92a3518150fdcf9537fdb2284c463","modified":1695541108681},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"69972445aa8d59908d1208f08115c59670e52b89","modified":1695541108681},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1695541108685},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1695541108683},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1695541108687},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1695541108687},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1695541108688},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1695541108691},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1695541108691},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1695541108692},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1695541108700},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"e1c366efdab730a7791099115698c97b31b5ff78","modified":1695541108696},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1695541108693},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1695541108700},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"1ca7885ce5024bfda13e28e605a33ba335b8aea0","modified":1695541108700},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"81edb9cfda491b860ebeb5645c1f5349ccacfbec","modified":1695541108700},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1695541108701},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1695541108701},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1695541108693},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1695541108701},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ad764d48715c5da87d33f048ad5f1ae8b4e2eb52","modified":1695541108701},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1695541108701},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1695541108702},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1695541108702},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1695541108702},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1695541108703},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1695541108702},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1695541108703},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1695541108703},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1695541108703},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1695541108703},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1695541108703},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1695541108704},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1695541108704},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1695541108704},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1695541108704},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"74cf298800fa560e1521d1875f60b5097a5c3b4d","modified":1695541108719},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"0aa15355063b91aa305e9b11fabe7c6ec405831b","modified":1695541108725},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"6f826b6f7dcf9aefc5486fc22da3a8da817a45d3","modified":1695541108725},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1695541108727},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1695541108728},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1695541108728},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1695541108728},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1695541108727},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1695541108728},{"_id":"node_modules/hexo-theme-next/source/images/备案图标.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1695541108731},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1695541108731},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1695541108731},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1695541108731},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"cce4f3cc59e76f899f3c1d9a7c53a33cf693d507","modified":1695541108732},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da11083557070d947da48d29d2d60988c8d628e9","modified":1695541108732},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1695541108732},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1695541108732},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1695541108732},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"8abd170f5d3c2399b8012fb08b22dbf4cef2e89f","modified":1695541108739},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1695541108682},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"3ff7e251bf99a275cd5dfda1b3e51f773c5f7b05","modified":1695541108682},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1695541108682},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1695541108683},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1695541108683},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1695541108683},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1695541108683},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1695541108684},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1695541108684},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1695541108684},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1695541108684},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1695541108684},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1695541108685},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1695541108685},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1695541108685},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1695541108685},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"17e03b61e20a5cb4195f0e0d75261ce61a1cddc4","modified":1695541108686},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1695541108686},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1695541108686},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1695541108686},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1695541108687},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1695541108688},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"8c7f9e013b1df4b85346450358f60852d804b6ff","modified":1695541108687},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1695541108688},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1695541108688},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1695541108689},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"eef710e9be20e7fed7573d0824feaa4eb1cf2737","modified":1695541108689},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1695541108689},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1695541108689},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1695541108689},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1695541108690},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1695541108690},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1695541108690},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1695541108690},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1695541108690},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1695541108691},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1695541108691},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1695541108691},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1695541108692},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1695541108692},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1695541108692},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1695541108693},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1695541108693},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1695541108694},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1695541108694},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1695541108694},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1695541108694},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1695541108695},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"f78cd74b25cc0ef65c060fec1d7e056967e26b4b","modified":1695541108696},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1695541108697},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1695541108697},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1695541108697},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"65825c37e473c942095df05183424003d7263df5","modified":1695541108697},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"a96050b0a9bcb49f1f6897660efc77991024790a","modified":1695541108697},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"17fbc99521440a5d6c32ac991ba2038a12f86b31","modified":1695541108698},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1695541108698},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1695541108698},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1695541108699},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1695541108698},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1695541108699},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1695541108699},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1695541108699},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1695541108700},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1695541108724},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1695541108724},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1695541108724},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1695541108724},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1695541108725},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"714acb6317cc0d4c5aca26d974c536e37bb9ce1b","modified":1695541108733},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1695541108737},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1695541108737},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1695541108693},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1695541108736},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1695541108705},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1695541108737},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1695541108713},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1695541108709},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1695541108715},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"47fc2c3e3e9c30b0ae6455738fecaa79d73c79fe","modified":1695541108705},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1695541108713},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1695541108717},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1695541108715},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1695541108717},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1695541108716},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1695541108716},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1695541108717},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1695541108719},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1695541108720},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1695541108720},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1695541108720},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1695541108720},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"4a454bcadd9de7d73172abd3276943e8626657be","modified":1695541108721},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1695541108721},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1695541108721},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1695541108721},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1695541108722},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1695541108722},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1695541108722},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1695541108722},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1695541108723},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1695541108723},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1695541108723},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1695541108723},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1695541108723},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1695541108722},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1695541108733},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1695541108734},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1695541108733},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1695541108734},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1695541108735},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1695541108734},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1695541108735},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1695541108734},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1695541108735},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1695541108735},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1695541108735},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1695541108736},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1695541108736},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1695541108736},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1695541108736},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1695541108737},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1695541108738},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1695541108738},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1695541108738},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"3272f3373fa7c3910852124bc5e43e90e3470ff8","modified":1695541108738},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1695541108738},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1695541108706},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1695541108707},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"268e0a4cf638b9ce4db07268031ab34c5f31ac65","modified":1695541108707},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1695541108707},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1695541108707},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1695541108707},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1695541108707},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1695541108707},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1695541108709},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1695541108711},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1695541108709},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f465cc1bfe98e3f2b33f5b696d4870c8dc56da6b","modified":1695541108712},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1695541108711},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1695541108712},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1695541108712},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1695541108712},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1695541108712},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1695541108705},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1695541108705},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1695541108706},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1695541108706},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1695541108706},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1695541108709},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1695541108710},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1695541108709},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"0c4c5e39f8ac12febaa0f4ff7265151e139edad8","modified":1695541108710},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1695541108710},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1695541108710},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1695541108710},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1695541108713},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1695541108711},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1695541108713},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1695541108714},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1695541108714},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1695541108714},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1695541108714},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1695541108714},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1695541108715},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"047bf8176ea24e277b1a4f6e6ad599033f1d1a44","modified":1695541108716},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1695541108715},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1695541108716},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1695541108718},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1695541108717},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1695541108718},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1695541108718},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1695541108718},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1695541108718},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1695541108719},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1695541108719},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1695541108719},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1695541108715},{"_id":"node_modules/hexo-theme-next/source/images/wechatpay.jpg","hash":"09da60971f9129e1786f0a3b3d4d984e85bd01ea","modified":1695541108730},{"_id":"node_modules/hexo-theme-next/source/images/touxiang.jpg","hash":"6abe140a8049d5727c44b44753c5fdcb9dc16502","modified":1695541108729},{"_id":"node_modules/hexo-theme-next/source/images/alipay.jpg","hash":"b29f45972177d998bba6f8babd6e9b9df9ccb51d","modified":1695541108727}],"Category":[{"name":"abp","_id":"clmx5hzh80004owtkfytx8auy"},{"name":"代码片段","_id":"clmx5hzhe000howtkcy4b55vi"},{"name":"css","_id":"clmx5hzhg000powtk9ndnarel"},{"name":"dotnet","_id":"clmx5hzhh000wowtkfqr573yc"},{"name":"docker","_id":"clmx5hzhj0011owtkbelj6hi1"},{"name":"go","_id":"clmx5hzht002jowtka3kx05xs"},{"name":"grpc","_id":"clmx5hzhu002rowtk7i5naxi2"},{"name":"jenkins","_id":"clmx5hzhv002zowtk7cwde14r"},{"name":"java","_id":"clmx5hzhw0035owtk02ijal8s"},{"name":"k8s","_id":"clmx5hzhz003iowtkfsgzgmru"},{"name":"虚拟机","_id":"clmx5hzi0003oowtkeqxsavy9"},{"name":"linux","_id":"clmx5hzi0003wowtkbmna60pe"},{"name":"微服务","_id":"clmx5hzi10042owtka5xjb0t8"},{"name":"winform","_id":"clmx5hzi1004eowtk6jzg4ezx"},{"name":"kafka","_id":"clmx5hzi3004kowtkcyae6mfn"}],"Data":[],"Page":[{"title":"404","date":"2022-07-11T12:40:56.000Z","type":404,"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>404</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" \t\t\t  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n\t</body>\n</html>\n","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-07-11 20:40:56\ntype: 404\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>404</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" \t\t\t  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n\t</body>\n</html>\n","updated":"2023-09-24T07:38:31.222Z","path":"404/index.html","comments":1,"layout":"page","_id":"clmx5hzh30000owtk8qjz5tyt","content":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\" \t\t\t  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\" \t\t\t  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n"},{"title":"schedule","date":"2022-07-11T13:06:37.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2022-07-11 21:06:37\n---\n","updated":"2023-09-24T07:38:31.244Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"clmx5hzh70002owtk4lhv0dmh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2022-07-11T12:39:59.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2022-07-11 20:39:59\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-09-24T07:38:31.233Z","path":"categories/index.html","layout":"page","_id":"clmx5hzh90006owtkc6axa3l5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2022-07-11T12:30:17.000Z","_content":"\n吴新恒，dotnet 开发者，喜欢开发但不局限于开发。记录开发过程中遇到的问题，每一次遇到的困难，都是个人的一次成长。\n\n如果您有什么疑问或者建议请留言：\n也可给我发送邮件","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-07-11 20:30:17\n---\n\n吴新恒，dotnet 开发者，喜欢开发但不局限于开发。记录开发过程中遇到的问题，每一次遇到的困难，都是个人的一次成长。\n\n如果您有什么疑问或者建议请留言：\n也可给我发送邮件","updated":"2023-09-24T07:38:31.232Z","path":"about/index.html","comments":1,"layout":"page","_id":"clmx5hzha0008owtkcz86cs0c","content":"<p>吴新恒，dotnet 开发者，喜欢开发但不局限于开发。记录开发过程中遇到的问题，每一次遇到的困难，都是个人的一次成长。</p>\n<p>如果您有什么疑问或者建议请留言：<br>也可给我发送邮件</p>\n","site":{"data":{}},"excerpt":"","more":"<p>吴新恒，dotnet 开发者，喜欢开发但不局限于开发。记录开发过程中遇到的问题，每一次遇到的困难，都是个人的一次成长。</p>\n<p>如果您有什么疑问或者建议请留言：<br>也可给我发送邮件</p>\n"},{"title":"文章标签","date":"2022-07-11T12:46:45.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2022-07-11 20:46:45\ntype: tags\ncomments: false\n---\n","updated":"2023-09-24T07:38:31.244Z","path":"tags/index.html","layout":"page","_id":"clmx5hzhb000aowtkcyk82w5e","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"MailKit","author":"wuxinheng","date":"2022-08-24T14:21:27.000Z","description":"abp使用","_content":"## MailKit\n\n1、在`Domain`模块使用设置系统来进行配置：继承`SettingDefinitionProvider`重写`Define`方法更具文档上添加需要的信息。\n\n```\npublic class xblogsSettingDefinitionProvider : SettingDefinitionProvider\n{\n    public override void Define(ISettingDefinitionContext context)\n    {\n        // Eail Setting Infomation\n        context.Add(new SettingDefinition(EmailSettingNames.Smtp.Host, \"smtp.qq.com\"),\n                new SettingDefinition(EmailSettingNames.Smtp.Port, \"465\"),\n                new SettingDefinition(EmailSettingNames.Smtp.UserName, \"934041144@qq.com\"),\n                new SettingDefinition(EmailSettingNames.Smtp.Password, \"12345\"),\n                new SettingDefinition(EmailSettingNames.Smtp.Domain),\n                new SettingDefinition(EmailSettingNames.Smtp.EnableSsl, \"true\"),\n                new SettingDefinition(EmailSettingNames.Smtp.UseDefaultCredentials, \"false\"),\n                new SettingDefinition(EmailSettingNames.DefaultFromAddress, \"934041144@qq.com\"),\n                new SettingDefinition(EmailSettingNames.DefaultFromDisplayName, \"xblogs\"));\n\n    }\n}\n```\n\n2、在`Domain`模块新建模块。\n\n```\n    /// <summary>\n    /// MailKit模块\n    /// </summary>\n    [DependsOn(\n    typeof(AbpMailKitModule)\n    )]\n    public class MailKitModule : AbpModule\n    {\n        public override void ConfigureServices(ServiceConfigurationContext context)\n        {\n\n            Configure<AbpMailKitOptions>(options =>\n            {\n                options.SecureSocketOption = SecureSocketOptions.SslOnConnect;\n            });\n\n        }\n\n    }\n```\n\n3、在`DomainModule`注册我们的`MailKitModule`\n\n```\n[DependsOn(\n    typeof(MailKitModule)\n)]\npublic class xblogsDomainModule : AbpModule\n{\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        Configure<AbpMultiTenancyOptions>(options =>\n        {\n            options.IsEnabled = MultiTenancyConsts.IsEnabled;\n        });\n    }\n}\n```\n\n> 这里有个概念非常好模块化。我在这里纠结了很长时间abp理念是模块化，减少冗余。可以简单理解为拼积木。请看`模块化`\n>\n> 我当然非常愿意学习一个东西时先看文档。但是文档这个东西很难说每个人的理解能力也不一样。我没有看懂abp这一块的文档。我就直接上手操作。不对就换方法。当自己的摸索出来了之后就可以跟着自己的理解去看文档和写代码了。","source":"_posts/MailKit.md","raw":"---\ntitle: MailKit\nauthor: wuxinheng\ndate: 2022-08-24 22:21:27\ndescription: abp使用\ncategories:\n  - abp\ntags:\n- dotnet\n---\n## MailKit\n\n1、在`Domain`模块使用设置系统来进行配置：继承`SettingDefinitionProvider`重写`Define`方法更具文档上添加需要的信息。\n\n```\npublic class xblogsSettingDefinitionProvider : SettingDefinitionProvider\n{\n    public override void Define(ISettingDefinitionContext context)\n    {\n        // Eail Setting Infomation\n        context.Add(new SettingDefinition(EmailSettingNames.Smtp.Host, \"smtp.qq.com\"),\n                new SettingDefinition(EmailSettingNames.Smtp.Port, \"465\"),\n                new SettingDefinition(EmailSettingNames.Smtp.UserName, \"934041144@qq.com\"),\n                new SettingDefinition(EmailSettingNames.Smtp.Password, \"12345\"),\n                new SettingDefinition(EmailSettingNames.Smtp.Domain),\n                new SettingDefinition(EmailSettingNames.Smtp.EnableSsl, \"true\"),\n                new SettingDefinition(EmailSettingNames.Smtp.UseDefaultCredentials, \"false\"),\n                new SettingDefinition(EmailSettingNames.DefaultFromAddress, \"934041144@qq.com\"),\n                new SettingDefinition(EmailSettingNames.DefaultFromDisplayName, \"xblogs\"));\n\n    }\n}\n```\n\n2、在`Domain`模块新建模块。\n\n```\n    /// <summary>\n    /// MailKit模块\n    /// </summary>\n    [DependsOn(\n    typeof(AbpMailKitModule)\n    )]\n    public class MailKitModule : AbpModule\n    {\n        public override void ConfigureServices(ServiceConfigurationContext context)\n        {\n\n            Configure<AbpMailKitOptions>(options =>\n            {\n                options.SecureSocketOption = SecureSocketOptions.SslOnConnect;\n            });\n\n        }\n\n    }\n```\n\n3、在`DomainModule`注册我们的`MailKitModule`\n\n```\n[DependsOn(\n    typeof(MailKitModule)\n)]\npublic class xblogsDomainModule : AbpModule\n{\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        Configure<AbpMultiTenancyOptions>(options =>\n        {\n            options.IsEnabled = MultiTenancyConsts.IsEnabled;\n        });\n    }\n}\n```\n\n> 这里有个概念非常好模块化。我在这里纠结了很长时间abp理念是模块化，减少冗余。可以简单理解为拼积木。请看`模块化`\n>\n> 我当然非常愿意学习一个东西时先看文档。但是文档这个东西很难说每个人的理解能力也不一样。我没有看懂abp这一块的文档。我就直接上手操作。不对就换方法。当自己的摸索出来了之后就可以跟着自己的理解去看文档和写代码了。","slug":"MailKit","published":1,"updated":"2023-09-24T07:38:31.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzh50001owtkfxu5d9jk","content":"<h2 id=\"MailKit\"><a href=\"#MailKit\" class=\"headerlink\" title=\"MailKit\"></a>MailKit</h2><p>1、在<code>Domain</code>模块使用设置系统来进行配置：继承<code>SettingDefinitionProvider</code>重写<code>Define</code>方法更具文档上添加需要的信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class xblogsSettingDefinitionProvider : SettingDefinitionProvider</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public override void Define(ISettingDefinitionContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // Eail Setting Infomation</span><br><span class=\"line\">        context.Add(new SettingDefinition(EmailSettingNames.Smtp.Host, &quot;smtp.qq.com&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.Port, &quot;465&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.UserName, &quot;934041144@qq.com&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.Password, &quot;12345&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.Domain),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.EnableSsl, &quot;true&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.UseDefaultCredentials, &quot;false&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.DefaultFromAddress, &quot;934041144@qq.com&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.DefaultFromDisplayName, &quot;xblogs&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、在<code>Domain</code>模块新建模块。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// MailKit模块</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">[DependsOn(</span><br><span class=\"line\">typeof(AbpMailKitModule)</span><br><span class=\"line\">)]</span><br><span class=\"line\">public class MailKitModule : AbpModule</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public override void ConfigureServices(ServiceConfigurationContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Configure&lt;AbpMailKitOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.SecureSocketOption = SecureSocketOptions.SslOnConnect;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在<code>DomainModule</code>注册我们的<code>MailKitModule</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DependsOn(</span><br><span class=\"line\">    typeof(MailKitModule)</span><br><span class=\"line\">)]</span><br><span class=\"line\">public class xblogsDomainModule : AbpModule</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public override void ConfigureServices(ServiceConfigurationContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Configure&lt;AbpMultiTenancyOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.IsEnabled = MultiTenancyConsts.IsEnabled;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有个概念非常好模块化。我在这里纠结了很长时间abp理念是模块化，减少冗余。可以简单理解为拼积木。请看<code>模块化</code></p>\n<p>我当然非常愿意学习一个东西时先看文档。但是文档这个东西很难说每个人的理解能力也不一样。我没有看懂abp这一块的文档。我就直接上手操作。不对就换方法。当自己的摸索出来了之后就可以跟着自己的理解去看文档和写代码了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MailKit\"><a href=\"#MailKit\" class=\"headerlink\" title=\"MailKit\"></a>MailKit</h2><p>1、在<code>Domain</code>模块使用设置系统来进行配置：继承<code>SettingDefinitionProvider</code>重写<code>Define</code>方法更具文档上添加需要的信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class xblogsSettingDefinitionProvider : SettingDefinitionProvider</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public override void Define(ISettingDefinitionContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // Eail Setting Infomation</span><br><span class=\"line\">        context.Add(new SettingDefinition(EmailSettingNames.Smtp.Host, &quot;smtp.qq.com&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.Port, &quot;465&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.UserName, &quot;934041144@qq.com&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.Password, &quot;12345&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.Domain),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.EnableSsl, &quot;true&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.Smtp.UseDefaultCredentials, &quot;false&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.DefaultFromAddress, &quot;934041144@qq.com&quot;),</span><br><span class=\"line\">                new SettingDefinition(EmailSettingNames.DefaultFromDisplayName, &quot;xblogs&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、在<code>Domain</code>模块新建模块。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// MailKit模块</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">[DependsOn(</span><br><span class=\"line\">typeof(AbpMailKitModule)</span><br><span class=\"line\">)]</span><br><span class=\"line\">public class MailKitModule : AbpModule</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public override void ConfigureServices(ServiceConfigurationContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Configure&lt;AbpMailKitOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.SecureSocketOption = SecureSocketOptions.SslOnConnect;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、在<code>DomainModule</code>注册我们的<code>MailKitModule</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DependsOn(</span><br><span class=\"line\">    typeof(MailKitModule)</span><br><span class=\"line\">)]</span><br><span class=\"line\">public class xblogsDomainModule : AbpModule</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public override void ConfigureServices(ServiceConfigurationContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Configure&lt;AbpMultiTenancyOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.IsEnabled = MultiTenancyConsts.IsEnabled;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有个概念非常好模块化。我在这里纠结了很长时间abp理念是模块化，减少冗余。可以简单理解为拼积木。请看<code>模块化</code></p>\n<p>我当然非常愿意学习一个东西时先看文档。但是文档这个东西很难说每个人的理解能力也不一样。我没有看懂abp这一块的文档。我就直接上手操作。不对就换方法。当自己的摸索出来了之后就可以跟着自己的理解去看文档和写代码了。</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"MailKit","path":"2022/08/24/MailKit/","eyeCatchImage":null,"excerpt":"abp使用","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:21:27.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:21:27.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"abp","tags":["dotnet"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"apb-api","author":"wuxinheng","date":"2022-08-24T14:24:26.000Z","description":"abp使用","_content":"## API\n\n### 自动api控制器\n\n**必要条件**：`Application` 项目中的 `Service` 必须实现`IApplicationService`\n\n**规范**：`Application.Contracts` 项目定义`Application`中`Service`需要实现的接口，接口可以直接实现`IApplicationService`\n\n**具体操作**：在`Application`项目中`ApplicationModule`类`ConfigureServices`方法加入以下代码\n\n> 并不是ApplicationModule.cs，是与实际项目中*ProjectName*ApplicationModule.cs,下面代码也是如此。\n\n```c#\nConfigure<AbpAspNetCoreMvcOptions>(options =>\n        {\n            options\n                .ConventionalControllers\n                .Create(typeof(ApplicationModule).Assembly);\n        });\n```\n\n### 动态C# API客户端\n\n**必要条件**：在`xblogs.HttpApi.Client`项目中`AbpModule`派生类`ConfigureServices`方法中加入以下代码：\n\n> 并不是ApplicationContractsModule.cs，是与实际Application.Contracts项目中*ProjectName*ApplicationContractsModule.cs,下面代码也是如此。\n\n```C#\n// 创建动态客户端代理\ncontext.Services.AddHttpClientProxies(\n     typeof(ApplicationContractsModule).Assembly\n);\n```\n\n**具体操作**：`xblogs.HttpApi`项目中正常写控制器，正常开发就可以了。","source":"_posts/apb-api.md","raw":"---\ntitle: apb-api\nauthor: wuxinheng\ndate: 2022-08-24 22:24:26\ndescription: abp使用\ncategories:\n  - abp\ntags:\n- dotnet\n---\n## API\n\n### 自动api控制器\n\n**必要条件**：`Application` 项目中的 `Service` 必须实现`IApplicationService`\n\n**规范**：`Application.Contracts` 项目定义`Application`中`Service`需要实现的接口，接口可以直接实现`IApplicationService`\n\n**具体操作**：在`Application`项目中`ApplicationModule`类`ConfigureServices`方法加入以下代码\n\n> 并不是ApplicationModule.cs，是与实际项目中*ProjectName*ApplicationModule.cs,下面代码也是如此。\n\n```c#\nConfigure<AbpAspNetCoreMvcOptions>(options =>\n        {\n            options\n                .ConventionalControllers\n                .Create(typeof(ApplicationModule).Assembly);\n        });\n```\n\n### 动态C# API客户端\n\n**必要条件**：在`xblogs.HttpApi.Client`项目中`AbpModule`派生类`ConfigureServices`方法中加入以下代码：\n\n> 并不是ApplicationContractsModule.cs，是与实际Application.Contracts项目中*ProjectName*ApplicationContractsModule.cs,下面代码也是如此。\n\n```C#\n// 创建动态客户端代理\ncontext.Services.AddHttpClientProxies(\n     typeof(ApplicationContractsModule).Assembly\n);\n```\n\n**具体操作**：`xblogs.HttpApi`项目中正常写控制器，正常开发就可以了。","slug":"apb-api","published":1,"updated":"2023-09-24T07:38:31.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzh70003owtk1huf5djk","content":"<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"自动api控制器\"><a href=\"#自动api控制器\" class=\"headerlink\" title=\"自动api控制器\"></a>自动api控制器</h3><p><strong>必要条件</strong>：<code>Application</code> 项目中的 <code>Service</code> 必须实现<code>IApplicationService</code></p>\n<p><strong>规范</strong>：<code>Application.Contracts</code> 项目定义<code>Application</code>中<code>Service</code>需要实现的接口，接口可以直接实现<code>IApplicationService</code></p>\n<p><strong>具体操作</strong>：在<code>Application</code>项目中<code>ApplicationModule</code>类<code>ConfigureServices</code>方法加入以下代码</p>\n<blockquote>\n<p>并不是ApplicationModule.cs，是与实际项目中<em>ProjectName</em>ApplicationModule.cs,下面代码也是如此。</p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configure&lt;AbpAspNetCoreMvcOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options</span><br><span class=\"line\">                .ConventionalControllers</span><br><span class=\"line\">                .Create(<span class=\"keyword\">typeof</span>(ApplicationModule).Assembly);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态C-API客户端\"><a href=\"#动态C-API客户端\" class=\"headerlink\" title=\"动态C# API客户端\"></a>动态C# API客户端</h3><p><strong>必要条件</strong>：在<code>xblogs.HttpApi.Client</code>项目中<code>AbpModule</code>派生类<code>ConfigureServices</code>方法中加入以下代码：</p>\n<blockquote>\n<p>并不是ApplicationContractsModule.cs，是与实际Application.Contracts项目中<em>ProjectName</em>ApplicationContractsModule.cs,下面代码也是如此。</p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建动态客户端代理</span></span><br><span class=\"line\">context.Services.AddHttpClientProxies(</span><br><span class=\"line\">     <span class=\"keyword\">typeof</span>(ApplicationContractsModule).Assembly</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体操作</strong>：<code>xblogs.HttpApi</code>项目中正常写控制器，正常开发就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"自动api控制器\"><a href=\"#自动api控制器\" class=\"headerlink\" title=\"自动api控制器\"></a>自动api控制器</h3><p><strong>必要条件</strong>：<code>Application</code> 项目中的 <code>Service</code> 必须实现<code>IApplicationService</code></p>\n<p><strong>规范</strong>：<code>Application.Contracts</code> 项目定义<code>Application</code>中<code>Service</code>需要实现的接口，接口可以直接实现<code>IApplicationService</code></p>\n<p><strong>具体操作</strong>：在<code>Application</code>项目中<code>ApplicationModule</code>类<code>ConfigureServices</code>方法加入以下代码</p>\n<blockquote>\n<p>并不是ApplicationModule.cs，是与实际项目中<em>ProjectName</em>ApplicationModule.cs,下面代码也是如此。</p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configure&lt;AbpAspNetCoreMvcOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options</span><br><span class=\"line\">                .ConventionalControllers</span><br><span class=\"line\">                .Create(<span class=\"keyword\">typeof</span>(ApplicationModule).Assembly);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态C-API客户端\"><a href=\"#动态C-API客户端\" class=\"headerlink\" title=\"动态C# API客户端\"></a>动态C# API客户端</h3><p><strong>必要条件</strong>：在<code>xblogs.HttpApi.Client</code>项目中<code>AbpModule</code>派生类<code>ConfigureServices</code>方法中加入以下代码：</p>\n<blockquote>\n<p>并不是ApplicationContractsModule.cs，是与实际Application.Contracts项目中<em>ProjectName</em>ApplicationContractsModule.cs,下面代码也是如此。</p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建动态客户端代理</span></span><br><span class=\"line\">context.Services.AddHttpClientProxies(</span><br><span class=\"line\">     <span class=\"keyword\">typeof</span>(ApplicationContractsModule).Assembly</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体操作</strong>：<code>xblogs.HttpApi</code>项目中正常写控制器，正常开发就可以了。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"apb-api","path":"2022/08/24/apb-api/","eyeCatchImage":null,"excerpt":"abp使用","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:24:26.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:24:26.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"abp","tags":["dotnet"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":".Net Core Api 自动不充Result中包含的枚举Display、Description等说明性文字信息字段","author":"wuxinheng","date":"2022-07-27T09:47:04.000Z","description":"代码片段","_content":"\n```C#\nusing Microsoft.AspNetCore.Mvc;\n\nusing Newtonsoft.Json.Linq;\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Reflection;\n\nnamespace WebApplication\n{\n    /// <summary>\n    /// .Net Core Api 自动不充Result中包含的枚举Display、Description等说明性文字信息字段\n    /// 字段命名规则为Property+Text,如果存在将会跳过,\n    /// </summary>\n    public static class ResultTextAutoCompletion\n    {\n        #region Init Method\n        public static IActionResult ResultTextInit<T>(IActionResult actionResult)\n            where T : class\n        {\n            var result = actionResult as ObjectResult;\n            if (result.IsInvalid())\n                return actionResult;\n\n            JObject obj = new JObject();\n\n            try\n            {\n                PollingObject<T>(result.Value, obj);\n            }\n            catch (Exception)\n            {\n                return actionResult;\n            }\n\n            ContentResult contentResult = new ContentResult()\n            {\n                ContentType = \"application/json\",\n                Content = obj.ToString(),\n            };\n\n            return contentResult;\n        }\n        public static IActionResult ResultTextInit(IActionResult actionResult, AttributeMode mode = AttributeMode.Display)\n        {\n            Mode = mode;\n            var result = actionResult as ObjectResult;\n            if (result.IsInvalid())\n                return actionResult;\n\n            JObject obj = new JObject();\n\n            try\n            {\n                PollingObject(result.Value, obj);\n            }\n            catch (Exception)\n            {\n                return actionResult;\n            }\n\n            ContentResult contentResult = new ContentResult()\n            {\n                ContentType = \"application/json\",\n                Content = obj.ToString(),\n            };\n\n            return contentResult;\n        }\n        #endregion\n\n        #region Main Method\n\n        private static void PollingObject(object value, JObject ob, string pName = \"\")\n        {\n            if (value.IsInvalid())\n                ob.AddOrEdit(pName, \"\");\n            else\n            {\n                var type = value.GetType();\n                var properties = type.GetProperties();// 获取所有的属性\n                // 如果属性个数是0,说明当前需要保存的属性到底了\n                if (properties.Length == 0)\n                {\n                    if (value is Enum @enum)\n                    {\n                        ob.AddOrEdit(pName, JToken.FromObject(value)); // 保存属性名称\n                        ob.AddOrEdit(pName + \"Text\", JToken.FromObject(GetText(value)));  // Text值为DisplayAttribute Name\n                    }\n                    else\n                        ob.AddOrEdit(pName, JToken.FromObject(value));// 不是枚举正常保存\n                }\n                else if (value is string str1)\n                    ob.AddOrEdit(pName, str1);\n                else if (value is DateTime date1)\n                    ob.AddOrEdit(pName, JToken.FromObject(date1));\n                else if (value is IEnumerable arr)\n                {\n                    var Jarray = new JArray();\n                    foreach (var item in arr)\n                    {\n                        Dictionary<string, object> map = null;\n                        if (item is Enum @enum)\n                        {\n                            map = new Dictionary<string, object>(2);\n                            map.Add(\"Key\", item);\n                            map.Add(\"Value\", GetText(@enum));\n                            Jarray.Add(JToken.FromObject(map));\n                        }\n                        else\n                        {\n                            // 如果不是枚举,说明是其他集合或数组对象\n                            JObject obs = new JObject();\n                            PollingObject(item, obs);\n                            Jarray.Add(JToken.FromObject(obs));\n                        }\n\n                    }\n\n                    if (pName.IsInvalid())\n                        ob.AddOrEdit(\"list\", Jarray);\n                    else\n                        ob.AddOrEdit(pName, Jarray);\n\n                }\n                // properties.Length>0\n                else\n                {\n\n                    if (pName.IsNotInvalid()) //初始对象，对象为引用类型\n                    {\n                        JObject newJobj = new JObject(); // 需要初始化一个新的对象来保存\n                        properties.PollingProperties(x =>\n                        {\n                            PollingObject(x.GetValue(value), newJobj, x.Name);\n                        });\n                        ob.AddOrEdit(pName, newJobj);\n                    }\n                    else\n                    {\n                        properties.PollingProperties(x =>\n                        {\n                            if (x.GetValue(value) is DateTime date)\n                                ob.AddOrEdit(x.Name, JToken.FromObject(date));\n                            else if (x.GetValue(value) is string str)\n                                ob.AddOrEdit(x.Name, str);\n                            else\n                                PollingObject(x.GetValue(value), ob, x.Name);\n                        });\n                    }\n                }\n            }\n        }\n        private static void PollingObject<T>(object value, JObject ob, string pName = \"\")\n            where T : class\n        {\n            if (value.IsInvalid())\n                ob.AddOrEdit(pName, \"\");\n            else\n            {\n                var type = value.GetType();\n                var properties = type.GetProperties();// 获取所有的属性\n                // 如果属性个数是0,说明当前需要保存的属性到底了\n                if (properties.Length == 0)\n                {\n                    if (value is Enum @enum)\n                    {\n                        ob.AddOrEdit(pName, JToken.FromObject(value)); // 保存属性名称\n                        ob.AddOrEdit(pName + \"Text\", JToken.FromObject(GetAttributeText<T>(value)));  // Text值为DisplayAttribute Name\n                    }\n                    else\n                        ob.AddOrEdit(pName, JToken.FromObject(value));// 不是枚举正常保存\n                }\n                else if (value is string str1)\n                    ob.AddOrEdit(pName, str1);\n                else if (value is DateTime date1)\n                    ob.AddOrEdit(pName, JToken.FromObject(date1));\n                else if (value is IEnumerable arr)\n                {\n                    var Jarray = new JArray();\n                    foreach (var item in arr)\n                    {\n                        Dictionary<string, object> map = null;\n                        if (item is Enum @enum)\n                        {\n                            map = new Dictionary<string, object>(2);\n                            map.Add(\"Key\", item);\n                            map.Add(\"Value\", GetAttributeText<T>(@enum));\n                            Jarray.Add(JToken.FromObject(map));\n                        }\n                        else\n                        {\n                            // 如果不是枚举,说明是其他集合或数组对象\n                            JObject obs = new JObject();\n                            PollingObject(item, obs);\n                            Jarray.Add(JToken.FromObject(obs));\n                        }\n\n                    }\n\n                    if (pName.IsInvalid())\n                        ob.AddOrEdit(\"list\", Jarray);\n                    else\n                        ob.AddOrEdit(pName, Jarray);\n\n                }\n                // properties.Length>0\n                else\n                {\n\n                    if (pName.IsNotInvalid()) //初始对象，对象为引用类型\n                    {\n                        JObject newJobj = new JObject(); // 需要初始化一个新的对象来保存\n                        properties.PollingProperties(x =>\n                        {\n                            PollingObject(x.GetValue(value), newJobj, x.Name);\n                        });\n                        ob.AddOrEdit(pName, newJobj);\n                    }\n                    else\n                    {\n                        properties.PollingProperties(x =>\n                        {\n                            if (x.GetValue(value) is DateTime date)\n                                ob.AddOrEdit(x.Name, JToken.FromObject(date));\n                            else if (x.GetValue(value) is string str)\n                                ob.AddOrEdit(x.Name, str);\n                            else\n                                PollingObject(x.GetValue(value), ob, x.Name);\n                        });\n                    }\n                }\n            }\n        }\n        #endregion\n\n        #region Select Provider\n        private static string GetText(object obj)\n        {\n            switch (ResultTextAutoCompletion.Mode)\n            {\n                case AttributeMode.Display:\n                    return GetDisplay(obj);\n                case AttributeMode.Description:\n                    return GetDescription(obj);\n                default:\n                    return GetDisplay(obj);\n            }\n        }\n        #endregion\n\n        #region GetText Method\n        private static string GetAttributeText<T>(object obj)\n    where T : class\n        {\n            var result = \"\";\n            var type = obj.GetType();\n            FieldInfo fi = type.GetField(obj.ToString());\n            var t = fi.GetCustomAttribute(typeof(T), true) as T;\n\n            var tType = t.GetType();\n            var propertyInfos = tType.GetProperties();\n            result = propertyInfos.PollingProperties<string>(x =>\n            {\n                if (x.GetCustomAttribute(typeof(ResultTextAutoCompletionPropertyAttribute), true) is ResultTextAutoCompletionPropertyAttribute)\n                    return x?.GetValue(t).ToString() ?? \"\";\n                else\n                    return \"\";\n            });\n            return result;\n        }\n        private static string GetDescription(object obj)\n        {\n            if (obj.IsInvalid()) return \"\";\n            var type = obj.GetType();\n            FieldInfo fi = type.GetField(obj.ToString());\n            DescriptionAttribute description = fi.GetCustomAttribute(typeof(DescriptionAttribute), true) as DescriptionAttribute;\n            return description?.Description ?? obj.ToString();\n        }\n        private static string GetDisplay(object obj)\n        {\n            if (obj.IsInvalid()) return \"\";\n            var type = obj.GetType();\n            FieldInfo fi = type.GetField(obj.ToString());\n            DisplayAttribute display = fi.GetCustomAttribute(typeof(DisplayAttribute), true) as DisplayAttribute;\n            return display?.Name ?? obj.ToString();\n        }\n        private static string GetComment(object obj)\n        {\n            return \"\";\n        }\n        #endregion\n\n        #region Expand Method\n\n        private static bool IsInvalid(this string str) => string.IsNullOrEmpty(str);\n        private static bool IsInvalid(this object obj) => obj == null;\n        private static bool IsNotInvalid(this object obj) => obj != null;\n        private static bool IsNotInvalid(this string str) => !string.IsNullOrEmpty(str);\n        private static void AddOrEdit(this JObject obj, string name, JToken? jToken)\n        {\n            if (obj.GetValue(name).IsNotInvalid())\n            {\n                obj.Remove(name);\n                obj.Add(name, jToken);\n            }\n            else\n                obj.Add(name, jToken);\n        }\n\n        #endregion\n\n        #region PollingProperties Method\n        private static void PollingProperties(this PropertyInfo[] infos, Action<PropertyInfo> action)\n        {\n            foreach (var item in infos)\n            {\n                action.Invoke(item);\n            }\n        }\n        private static T PollingProperties<T>(this PropertyInfo[] infos, Func<PropertyInfo, T> action)\n        {\n            T result = default(T);\n            foreach (var item in infos)\n            {\n                result = action.Invoke(item);\n                if (result.ToString().IsNotInvalid())\n                    return result;\n            }\n            return result;\n        }\n        #endregion\n\n        #region Private\n\n        /// <summary>\n        /// 当前使用模式，默认Display\n        /// </summary>\n        private static AttributeMode? Mode { get; set; }\n\n        #endregion\n\n        #region Public\n\n        /// <summary>\n        /// 默认支持的特性\n        /// </summary>\n        public enum AttributeMode\n        {\n            Display = 0,\n            Description = 1,\n        }\n\n        /// <summary>\n        /// 允许使用自定义特性，标记属性是否负责记录\n        /// </summary>\n        [System.AttributeUsage(System.AttributeTargets.Property)]\n        public class ResultTextAutoCompletionPropertyAttribute : System.Attribute\n        {\n        }\n\n        #endregion\n\n\n    }\n}\n\n```","source":"_posts/ResultTextAutoCompletion.md","raw":"---\ntitle: .Net Core Api 自动不充Result中包含的枚举Display、Description等说明性文字信息字段\nauthor: wuxinheng\ndate: 2022-07-27 17:47:04\ndescription: 代码片段\ntags:\n- 我爱写代码\n- dotnet\n- 代码片段\ncategories:\n- 代码片段\n---\n\n```C#\nusing Microsoft.AspNetCore.Mvc;\n\nusing Newtonsoft.Json.Linq;\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Reflection;\n\nnamespace WebApplication\n{\n    /// <summary>\n    /// .Net Core Api 自动不充Result中包含的枚举Display、Description等说明性文字信息字段\n    /// 字段命名规则为Property+Text,如果存在将会跳过,\n    /// </summary>\n    public static class ResultTextAutoCompletion\n    {\n        #region Init Method\n        public static IActionResult ResultTextInit<T>(IActionResult actionResult)\n            where T : class\n        {\n            var result = actionResult as ObjectResult;\n            if (result.IsInvalid())\n                return actionResult;\n\n            JObject obj = new JObject();\n\n            try\n            {\n                PollingObject<T>(result.Value, obj);\n            }\n            catch (Exception)\n            {\n                return actionResult;\n            }\n\n            ContentResult contentResult = new ContentResult()\n            {\n                ContentType = \"application/json\",\n                Content = obj.ToString(),\n            };\n\n            return contentResult;\n        }\n        public static IActionResult ResultTextInit(IActionResult actionResult, AttributeMode mode = AttributeMode.Display)\n        {\n            Mode = mode;\n            var result = actionResult as ObjectResult;\n            if (result.IsInvalid())\n                return actionResult;\n\n            JObject obj = new JObject();\n\n            try\n            {\n                PollingObject(result.Value, obj);\n            }\n            catch (Exception)\n            {\n                return actionResult;\n            }\n\n            ContentResult contentResult = new ContentResult()\n            {\n                ContentType = \"application/json\",\n                Content = obj.ToString(),\n            };\n\n            return contentResult;\n        }\n        #endregion\n\n        #region Main Method\n\n        private static void PollingObject(object value, JObject ob, string pName = \"\")\n        {\n            if (value.IsInvalid())\n                ob.AddOrEdit(pName, \"\");\n            else\n            {\n                var type = value.GetType();\n                var properties = type.GetProperties();// 获取所有的属性\n                // 如果属性个数是0,说明当前需要保存的属性到底了\n                if (properties.Length == 0)\n                {\n                    if (value is Enum @enum)\n                    {\n                        ob.AddOrEdit(pName, JToken.FromObject(value)); // 保存属性名称\n                        ob.AddOrEdit(pName + \"Text\", JToken.FromObject(GetText(value)));  // Text值为DisplayAttribute Name\n                    }\n                    else\n                        ob.AddOrEdit(pName, JToken.FromObject(value));// 不是枚举正常保存\n                }\n                else if (value is string str1)\n                    ob.AddOrEdit(pName, str1);\n                else if (value is DateTime date1)\n                    ob.AddOrEdit(pName, JToken.FromObject(date1));\n                else if (value is IEnumerable arr)\n                {\n                    var Jarray = new JArray();\n                    foreach (var item in arr)\n                    {\n                        Dictionary<string, object> map = null;\n                        if (item is Enum @enum)\n                        {\n                            map = new Dictionary<string, object>(2);\n                            map.Add(\"Key\", item);\n                            map.Add(\"Value\", GetText(@enum));\n                            Jarray.Add(JToken.FromObject(map));\n                        }\n                        else\n                        {\n                            // 如果不是枚举,说明是其他集合或数组对象\n                            JObject obs = new JObject();\n                            PollingObject(item, obs);\n                            Jarray.Add(JToken.FromObject(obs));\n                        }\n\n                    }\n\n                    if (pName.IsInvalid())\n                        ob.AddOrEdit(\"list\", Jarray);\n                    else\n                        ob.AddOrEdit(pName, Jarray);\n\n                }\n                // properties.Length>0\n                else\n                {\n\n                    if (pName.IsNotInvalid()) //初始对象，对象为引用类型\n                    {\n                        JObject newJobj = new JObject(); // 需要初始化一个新的对象来保存\n                        properties.PollingProperties(x =>\n                        {\n                            PollingObject(x.GetValue(value), newJobj, x.Name);\n                        });\n                        ob.AddOrEdit(pName, newJobj);\n                    }\n                    else\n                    {\n                        properties.PollingProperties(x =>\n                        {\n                            if (x.GetValue(value) is DateTime date)\n                                ob.AddOrEdit(x.Name, JToken.FromObject(date));\n                            else if (x.GetValue(value) is string str)\n                                ob.AddOrEdit(x.Name, str);\n                            else\n                                PollingObject(x.GetValue(value), ob, x.Name);\n                        });\n                    }\n                }\n            }\n        }\n        private static void PollingObject<T>(object value, JObject ob, string pName = \"\")\n            where T : class\n        {\n            if (value.IsInvalid())\n                ob.AddOrEdit(pName, \"\");\n            else\n            {\n                var type = value.GetType();\n                var properties = type.GetProperties();// 获取所有的属性\n                // 如果属性个数是0,说明当前需要保存的属性到底了\n                if (properties.Length == 0)\n                {\n                    if (value is Enum @enum)\n                    {\n                        ob.AddOrEdit(pName, JToken.FromObject(value)); // 保存属性名称\n                        ob.AddOrEdit(pName + \"Text\", JToken.FromObject(GetAttributeText<T>(value)));  // Text值为DisplayAttribute Name\n                    }\n                    else\n                        ob.AddOrEdit(pName, JToken.FromObject(value));// 不是枚举正常保存\n                }\n                else if (value is string str1)\n                    ob.AddOrEdit(pName, str1);\n                else if (value is DateTime date1)\n                    ob.AddOrEdit(pName, JToken.FromObject(date1));\n                else if (value is IEnumerable arr)\n                {\n                    var Jarray = new JArray();\n                    foreach (var item in arr)\n                    {\n                        Dictionary<string, object> map = null;\n                        if (item is Enum @enum)\n                        {\n                            map = new Dictionary<string, object>(2);\n                            map.Add(\"Key\", item);\n                            map.Add(\"Value\", GetAttributeText<T>(@enum));\n                            Jarray.Add(JToken.FromObject(map));\n                        }\n                        else\n                        {\n                            // 如果不是枚举,说明是其他集合或数组对象\n                            JObject obs = new JObject();\n                            PollingObject(item, obs);\n                            Jarray.Add(JToken.FromObject(obs));\n                        }\n\n                    }\n\n                    if (pName.IsInvalid())\n                        ob.AddOrEdit(\"list\", Jarray);\n                    else\n                        ob.AddOrEdit(pName, Jarray);\n\n                }\n                // properties.Length>0\n                else\n                {\n\n                    if (pName.IsNotInvalid()) //初始对象，对象为引用类型\n                    {\n                        JObject newJobj = new JObject(); // 需要初始化一个新的对象来保存\n                        properties.PollingProperties(x =>\n                        {\n                            PollingObject(x.GetValue(value), newJobj, x.Name);\n                        });\n                        ob.AddOrEdit(pName, newJobj);\n                    }\n                    else\n                    {\n                        properties.PollingProperties(x =>\n                        {\n                            if (x.GetValue(value) is DateTime date)\n                                ob.AddOrEdit(x.Name, JToken.FromObject(date));\n                            else if (x.GetValue(value) is string str)\n                                ob.AddOrEdit(x.Name, str);\n                            else\n                                PollingObject(x.GetValue(value), ob, x.Name);\n                        });\n                    }\n                }\n            }\n        }\n        #endregion\n\n        #region Select Provider\n        private static string GetText(object obj)\n        {\n            switch (ResultTextAutoCompletion.Mode)\n            {\n                case AttributeMode.Display:\n                    return GetDisplay(obj);\n                case AttributeMode.Description:\n                    return GetDescription(obj);\n                default:\n                    return GetDisplay(obj);\n            }\n        }\n        #endregion\n\n        #region GetText Method\n        private static string GetAttributeText<T>(object obj)\n    where T : class\n        {\n            var result = \"\";\n            var type = obj.GetType();\n            FieldInfo fi = type.GetField(obj.ToString());\n            var t = fi.GetCustomAttribute(typeof(T), true) as T;\n\n            var tType = t.GetType();\n            var propertyInfos = tType.GetProperties();\n            result = propertyInfos.PollingProperties<string>(x =>\n            {\n                if (x.GetCustomAttribute(typeof(ResultTextAutoCompletionPropertyAttribute), true) is ResultTextAutoCompletionPropertyAttribute)\n                    return x?.GetValue(t).ToString() ?? \"\";\n                else\n                    return \"\";\n            });\n            return result;\n        }\n        private static string GetDescription(object obj)\n        {\n            if (obj.IsInvalid()) return \"\";\n            var type = obj.GetType();\n            FieldInfo fi = type.GetField(obj.ToString());\n            DescriptionAttribute description = fi.GetCustomAttribute(typeof(DescriptionAttribute), true) as DescriptionAttribute;\n            return description?.Description ?? obj.ToString();\n        }\n        private static string GetDisplay(object obj)\n        {\n            if (obj.IsInvalid()) return \"\";\n            var type = obj.GetType();\n            FieldInfo fi = type.GetField(obj.ToString());\n            DisplayAttribute display = fi.GetCustomAttribute(typeof(DisplayAttribute), true) as DisplayAttribute;\n            return display?.Name ?? obj.ToString();\n        }\n        private static string GetComment(object obj)\n        {\n            return \"\";\n        }\n        #endregion\n\n        #region Expand Method\n\n        private static bool IsInvalid(this string str) => string.IsNullOrEmpty(str);\n        private static bool IsInvalid(this object obj) => obj == null;\n        private static bool IsNotInvalid(this object obj) => obj != null;\n        private static bool IsNotInvalid(this string str) => !string.IsNullOrEmpty(str);\n        private static void AddOrEdit(this JObject obj, string name, JToken? jToken)\n        {\n            if (obj.GetValue(name).IsNotInvalid())\n            {\n                obj.Remove(name);\n                obj.Add(name, jToken);\n            }\n            else\n                obj.Add(name, jToken);\n        }\n\n        #endregion\n\n        #region PollingProperties Method\n        private static void PollingProperties(this PropertyInfo[] infos, Action<PropertyInfo> action)\n        {\n            foreach (var item in infos)\n            {\n                action.Invoke(item);\n            }\n        }\n        private static T PollingProperties<T>(this PropertyInfo[] infos, Func<PropertyInfo, T> action)\n        {\n            T result = default(T);\n            foreach (var item in infos)\n            {\n                result = action.Invoke(item);\n                if (result.ToString().IsNotInvalid())\n                    return result;\n            }\n            return result;\n        }\n        #endregion\n\n        #region Private\n\n        /// <summary>\n        /// 当前使用模式，默认Display\n        /// </summary>\n        private static AttributeMode? Mode { get; set; }\n\n        #endregion\n\n        #region Public\n\n        /// <summary>\n        /// 默认支持的特性\n        /// </summary>\n        public enum AttributeMode\n        {\n            Display = 0,\n            Description = 1,\n        }\n\n        /// <summary>\n        /// 允许使用自定义特性，标记属性是否负责记录\n        /// </summary>\n        [System.AttributeUsage(System.AttributeTargets.Property)]\n        public class ResultTextAutoCompletionPropertyAttribute : System.Attribute\n        {\n        }\n\n        #endregion\n\n\n    }\n}\n\n```","slug":"ResultTextAutoCompletion","published":1,"updated":"2023-09-24T07:38:31.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzha0007owtk7rzkhshl","content":"<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> Newtonsoft.Json.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WebApplication</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> .Net Core Api 自动不充Result中包含的枚举Display、Description等说明性文字信息字段</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 字段命名规则为Property+Text,如果存在将会跳过,</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ResultTextAutoCompletion</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Init Method</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IActionResult <span class=\"title\">ResultTextInit</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">IActionResult actionResult</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = actionResult <span class=\"keyword\">as</span> ObjectResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.IsInvalid())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\"></span><br><span class=\"line\">            JObject obj = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                PollingObject&lt;T&gt;(result.Value, obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ContentResult contentResult = <span class=\"keyword\">new</span> ContentResult()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ContentType = <span class=\"string\">&quot;application/json&quot;</span>,</span><br><span class=\"line\">                Content = obj.ToString(),</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> contentResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IActionResult <span class=\"title\">ResultTextInit</span>(<span class=\"params\">IActionResult actionResult, AttributeMode mode = AttributeMode.Display</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Mode = mode;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = actionResult <span class=\"keyword\">as</span> ObjectResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.IsInvalid())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\"></span><br><span class=\"line\">            JObject obj = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                PollingObject(result.Value, obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ContentResult contentResult = <span class=\"keyword\">new</span> ContentResult()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ContentType = <span class=\"string\">&quot;application/json&quot;</span>,</span><br><span class=\"line\">                Content = obj.ToString(),</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> contentResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Main Method</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PollingObject</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, JObject ob, <span class=\"built_in\">string</span> pName = <span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>.IsInvalid())</span><br><span class=\"line\">                ob.AddOrEdit(pName, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> type = <span class=\"keyword\">value</span>.GetType();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> properties = type.GetProperties();<span class=\"comment\">// 获取所有的属性</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果属性个数是0,说明当前需要保存的属性到底了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (properties.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>)); <span class=\"comment\">// 保存属性名称</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName + <span class=\"string\">&quot;Text&quot;</span>, JToken.FromObject(GetText(<span class=\"keyword\">value</span>)));  <span class=\"comment\">// Text值为DisplayAttribute Name</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>));<span class=\"comment\">// 不是枚举正常保存</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, str1);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> DateTime date1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, JToken.FromObject(date1));</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> IEnumerable arr)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> Jarray = <span class=\"keyword\">new</span> JArray();</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> arr)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt; map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (item <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            map = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Key&quot;</span>, item);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Value&quot;</span>, GetText(@enum));</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(map));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 如果不是枚举,说明是其他集合或数组对象</span></span><br><span class=\"line\">                            JObject obs = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\">                            PollingObject(item, obs);</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(obs));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsInvalid())</span><br><span class=\"line\">                        ob.AddOrEdit(<span class=\"string\">&quot;list&quot;</span>, Jarray);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, Jarray);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// properties.Length&gt;0</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsNotInvalid()) <span class=\"comment\">//初始对象，对象为引用类型</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        JObject newJobj = <span class=\"keyword\">new</span> JObject(); <span class=\"comment\">// 需要初始化一个新的对象来保存</span></span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            PollingObject(x.GetValue(<span class=\"keyword\">value</span>), newJobj, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        ob.AddOrEdit(pName, newJobj);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> DateTime date)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, JToken.FromObject(date));</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, str);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                PollingObject(x.GetValue(<span class=\"keyword\">value</span>), ob, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PollingObject</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, JObject ob, <span class=\"built_in\">string</span> pName = <span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>.IsInvalid())</span><br><span class=\"line\">                ob.AddOrEdit(pName, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> type = <span class=\"keyword\">value</span>.GetType();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> properties = type.GetProperties();<span class=\"comment\">// 获取所有的属性</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果属性个数是0,说明当前需要保存的属性到底了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (properties.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>)); <span class=\"comment\">// 保存属性名称</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName + <span class=\"string\">&quot;Text&quot;</span>, JToken.FromObject(GetAttributeText&lt;T&gt;(<span class=\"keyword\">value</span>)));  <span class=\"comment\">// Text值为DisplayAttribute Name</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>));<span class=\"comment\">// 不是枚举正常保存</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, str1);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> DateTime date1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, JToken.FromObject(date1));</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> IEnumerable arr)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> Jarray = <span class=\"keyword\">new</span> JArray();</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> arr)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt; map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (item <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            map = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Key&quot;</span>, item);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Value&quot;</span>, GetAttributeText&lt;T&gt;(@enum));</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(map));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 如果不是枚举,说明是其他集合或数组对象</span></span><br><span class=\"line\">                            JObject obs = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\">                            PollingObject(item, obs);</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(obs));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsInvalid())</span><br><span class=\"line\">                        ob.AddOrEdit(<span class=\"string\">&quot;list&quot;</span>, Jarray);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, Jarray);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// properties.Length&gt;0</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsNotInvalid()) <span class=\"comment\">//初始对象，对象为引用类型</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        JObject newJobj = <span class=\"keyword\">new</span> JObject(); <span class=\"comment\">// 需要初始化一个新的对象来保存</span></span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            PollingObject(x.GetValue(<span class=\"keyword\">value</span>), newJobj, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        ob.AddOrEdit(pName, newJobj);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> DateTime date)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, JToken.FromObject(date));</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, str);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                PollingObject(x.GetValue(<span class=\"keyword\">value</span>), ob, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Select Provider</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetText</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (ResultTextAutoCompletion.Mode)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> AttributeMode.Display:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GetDisplay(obj);</span><br><span class=\"line\">                <span class=\"keyword\">case</span> AttributeMode.Description:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GetDescription(obj);</span><br><span class=\"line\">                <span class=\"literal\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GetDisplay(obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> GetText Method</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetAttributeText</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = obj.GetType();</span><br><span class=\"line\">            FieldInfo fi = type.GetField(obj.ToString());</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = fi.GetCustomAttribute(<span class=\"keyword\">typeof</span>(T), <span class=\"literal\">true</span>) <span class=\"keyword\">as</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> tType = t.GetType();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> propertyInfos = tType.GetProperties();</span><br><span class=\"line\">            result = propertyInfos.PollingProperties&lt;<span class=\"built_in\">string</span>&gt;(x =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x.GetCustomAttribute(<span class=\"keyword\">typeof</span>(ResultTextAutoCompletionPropertyAttribute), <span class=\"literal\">true</span>) <span class=\"keyword\">is</span> ResultTextAutoCompletionPropertyAttribute)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> x?.GetValue(t).ToString() ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetDescription</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.IsInvalid()) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = obj.GetType();</span><br><span class=\"line\">            FieldInfo fi = type.GetField(obj.ToString());</span><br><span class=\"line\">            DescriptionAttribute description = fi.GetCustomAttribute(<span class=\"keyword\">typeof</span>(DescriptionAttribute), <span class=\"literal\">true</span>) <span class=\"keyword\">as</span> DescriptionAttribute;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> description?.Description ?? obj.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetDisplay</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.IsInvalid()) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = obj.GetType();</span><br><span class=\"line\">            FieldInfo fi = type.GetField(obj.ToString());</span><br><span class=\"line\">            DisplayAttribute display = fi.GetCustomAttribute(<span class=\"keyword\">typeof</span>(DisplayAttribute), <span class=\"literal\">true</span>) <span class=\"keyword\">as</span> DisplayAttribute;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> display?.Name ?? obj.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetComment</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Expand Method</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">string</span> str</span>)</span> =&gt; <span class=\"built_in\">string</span>.IsNullOrEmpty(str);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">object</span> obj</span>)</span> =&gt; obj == <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsNotInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">object</span> obj</span>)</span> =&gt; obj != <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsNotInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">string</span> str</span>)</span> =&gt; !<span class=\"built_in\">string</span>.IsNullOrEmpty(str);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AddOrEdit</span>(<span class=\"params\"><span class=\"keyword\">this</span> JObject obj, <span class=\"built_in\">string</span> name, JToken? jToken</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.GetValue(name).IsNotInvalid())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                obj.Remove(name);</span><br><span class=\"line\">                obj.Add(name, jToken);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                obj.Add(name, jToken);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> PollingProperties Method</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PollingProperties</span>(<span class=\"params\"><span class=\"keyword\">this</span> PropertyInfo[] infos, Action&lt;PropertyInfo&gt; action</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> infos)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                action.Invoke(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T <span class=\"title\">PollingProperties</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> PropertyInfo[] infos, Func&lt;PropertyInfo, T&gt; action</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            T result = <span class=\"literal\">default</span>(T);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> infos)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = action.Invoke(item);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result.ToString().IsNotInvalid())</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Private</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 当前使用模式，默认Display</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AttributeMode? Mode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Public</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 默认支持的特性</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> AttributeMode</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Display = <span class=\"number\">0</span>,</span><br><span class=\"line\">            Description = <span class=\"number\">1</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 允许使用自定义特性，标记属性是否负责记录</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">System.AttributeUsage(System.AttributeTargets.Property)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ResultTextAutoCompletionPropertyAttribute</span> : <span class=\"title\">System.Attribute</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> Newtonsoft.Json.Linq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.ComponentModel.DataAnnotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WebApplication</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> .Net Core Api 自动不充Result中包含的枚举Display、Description等说明性文字信息字段</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 字段命名规则为Property+Text,如果存在将会跳过,</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ResultTextAutoCompletion</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Init Method</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IActionResult <span class=\"title\">ResultTextInit</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">IActionResult actionResult</span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = actionResult <span class=\"keyword\">as</span> ObjectResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.IsInvalid())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\"></span><br><span class=\"line\">            JObject obj = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                PollingObject&lt;T&gt;(result.Value, obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ContentResult contentResult = <span class=\"keyword\">new</span> ContentResult()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ContentType = <span class=\"string\">&quot;application/json&quot;</span>,</span><br><span class=\"line\">                Content = obj.ToString(),</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> contentResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IActionResult <span class=\"title\">ResultTextInit</span>(<span class=\"params\">IActionResult actionResult, AttributeMode mode = AttributeMode.Display</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Mode = mode;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = actionResult <span class=\"keyword\">as</span> ObjectResult;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.IsInvalid())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\"></span><br><span class=\"line\">            JObject obj = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                PollingObject(result.Value, obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> actionResult;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ContentResult contentResult = <span class=\"keyword\">new</span> ContentResult()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ContentType = <span class=\"string\">&quot;application/json&quot;</span>,</span><br><span class=\"line\">                Content = obj.ToString(),</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> contentResult;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Main Method</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PollingObject</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, JObject ob, <span class=\"built_in\">string</span> pName = <span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>.IsInvalid())</span><br><span class=\"line\">                ob.AddOrEdit(pName, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> type = <span class=\"keyword\">value</span>.GetType();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> properties = type.GetProperties();<span class=\"comment\">// 获取所有的属性</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果属性个数是0,说明当前需要保存的属性到底了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (properties.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>)); <span class=\"comment\">// 保存属性名称</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName + <span class=\"string\">&quot;Text&quot;</span>, JToken.FromObject(GetText(<span class=\"keyword\">value</span>)));  <span class=\"comment\">// Text值为DisplayAttribute Name</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>));<span class=\"comment\">// 不是枚举正常保存</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, str1);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> DateTime date1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, JToken.FromObject(date1));</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> IEnumerable arr)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> Jarray = <span class=\"keyword\">new</span> JArray();</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> arr)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt; map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (item <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            map = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Key&quot;</span>, item);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Value&quot;</span>, GetText(@enum));</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(map));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 如果不是枚举,说明是其他集合或数组对象</span></span><br><span class=\"line\">                            JObject obs = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\">                            PollingObject(item, obs);</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(obs));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsInvalid())</span><br><span class=\"line\">                        ob.AddOrEdit(<span class=\"string\">&quot;list&quot;</span>, Jarray);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, Jarray);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// properties.Length&gt;0</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsNotInvalid()) <span class=\"comment\">//初始对象，对象为引用类型</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        JObject newJobj = <span class=\"keyword\">new</span> JObject(); <span class=\"comment\">// 需要初始化一个新的对象来保存</span></span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            PollingObject(x.GetValue(<span class=\"keyword\">value</span>), newJobj, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        ob.AddOrEdit(pName, newJobj);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> DateTime date)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, JToken.FromObject(date));</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, str);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                PollingObject(x.GetValue(<span class=\"keyword\">value</span>), ob, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PollingObject</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span>, JObject ob, <span class=\"built_in\">string</span> pName = <span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>.IsInvalid())</span><br><span class=\"line\">                ob.AddOrEdit(pName, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> type = <span class=\"keyword\">value</span>.GetType();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> properties = type.GetProperties();<span class=\"comment\">// 获取所有的属性</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果属性个数是0,说明当前需要保存的属性到底了</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (properties.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>)); <span class=\"comment\">// 保存属性名称</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName + <span class=\"string\">&quot;Text&quot;</span>, JToken.FromObject(GetAttributeText&lt;T&gt;(<span class=\"keyword\">value</span>)));  <span class=\"comment\">// Text值为DisplayAttribute Name</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, JToken.FromObject(<span class=\"keyword\">value</span>));<span class=\"comment\">// 不是枚举正常保存</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, str1);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> DateTime date1)</span><br><span class=\"line\">                    ob.AddOrEdit(pName, JToken.FromObject(date1));</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> IEnumerable arr)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> Jarray = <span class=\"keyword\">new</span> JArray();</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> arr)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt; map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (item <span class=\"keyword\">is</span> Enum @enum)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            map = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Key&quot;</span>, item);</span><br><span class=\"line\">                            map.Add(<span class=\"string\">&quot;Value&quot;</span>, GetAttributeText&lt;T&gt;(@enum));</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(map));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 如果不是枚举,说明是其他集合或数组对象</span></span><br><span class=\"line\">                            JObject obs = <span class=\"keyword\">new</span> JObject();</span><br><span class=\"line\">                            PollingObject(item, obs);</span><br><span class=\"line\">                            Jarray.Add(JToken.FromObject(obs));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsInvalid())</span><br><span class=\"line\">                        ob.AddOrEdit(<span class=\"string\">&quot;list&quot;</span>, Jarray);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ob.AddOrEdit(pName, Jarray);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// properties.Length&gt;0</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pName.IsNotInvalid()) <span class=\"comment\">//初始对象，对象为引用类型</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        JObject newJobj = <span class=\"keyword\">new</span> JObject(); <span class=\"comment\">// 需要初始化一个新的对象来保存</span></span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            PollingObject(x.GetValue(<span class=\"keyword\">value</span>), newJobj, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        ob.AddOrEdit(pName, newJobj);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        properties.PollingProperties(x =&gt;</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> DateTime date)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, JToken.FromObject(date));</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x.GetValue(<span class=\"keyword\">value</span>) <span class=\"keyword\">is</span> <span class=\"built_in\">string</span> str)</span><br><span class=\"line\">                                ob.AddOrEdit(x.Name, str);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                PollingObject(x.GetValue(<span class=\"keyword\">value</span>), ob, x.Name);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Select Provider</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetText</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (ResultTextAutoCompletion.Mode)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> AttributeMode.Display:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GetDisplay(obj);</span><br><span class=\"line\">                <span class=\"keyword\">case</span> AttributeMode.Description:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GetDescription(obj);</span><br><span class=\"line\">                <span class=\"literal\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> GetDisplay(obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> GetText Method</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetAttributeText</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">where</span> T : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = obj.GetType();</span><br><span class=\"line\">            FieldInfo fi = type.GetField(obj.ToString());</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = fi.GetCustomAttribute(<span class=\"keyword\">typeof</span>(T), <span class=\"literal\">true</span>) <span class=\"keyword\">as</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> tType = t.GetType();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> propertyInfos = tType.GetProperties();</span><br><span class=\"line\">            result = propertyInfos.PollingProperties&lt;<span class=\"built_in\">string</span>&gt;(x =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x.GetCustomAttribute(<span class=\"keyword\">typeof</span>(ResultTextAutoCompletionPropertyAttribute), <span class=\"literal\">true</span>) <span class=\"keyword\">is</span> ResultTextAutoCompletionPropertyAttribute)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> x?.GetValue(t).ToString() ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetDescription</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.IsInvalid()) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = obj.GetType();</span><br><span class=\"line\">            FieldInfo fi = type.GetField(obj.ToString());</span><br><span class=\"line\">            DescriptionAttribute description = fi.GetCustomAttribute(<span class=\"keyword\">typeof</span>(DescriptionAttribute), <span class=\"literal\">true</span>) <span class=\"keyword\">as</span> DescriptionAttribute;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> description?.Description ?? obj.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetDisplay</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.IsInvalid()) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = obj.GetType();</span><br><span class=\"line\">            FieldInfo fi = type.GetField(obj.ToString());</span><br><span class=\"line\">            DisplayAttribute display = fi.GetCustomAttribute(<span class=\"keyword\">typeof</span>(DisplayAttribute), <span class=\"literal\">true</span>) <span class=\"keyword\">as</span> DisplayAttribute;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> display?.Name ?? obj.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetComment</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Expand Method</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">string</span> str</span>)</span> =&gt; <span class=\"built_in\">string</span>.IsNullOrEmpty(str);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">object</span> obj</span>)</span> =&gt; obj == <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsNotInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">object</span> obj</span>)</span> =&gt; obj != <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsNotInvalid</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">string</span> str</span>)</span> =&gt; !<span class=\"built_in\">string</span>.IsNullOrEmpty(str);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AddOrEdit</span>(<span class=\"params\"><span class=\"keyword\">this</span> JObject obj, <span class=\"built_in\">string</span> name, JToken? jToken</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.GetValue(name).IsNotInvalid())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                obj.Remove(name);</span><br><span class=\"line\">                obj.Add(name, jToken);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                obj.Add(name, jToken);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> PollingProperties Method</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PollingProperties</span>(<span class=\"params\"><span class=\"keyword\">this</span> PropertyInfo[] infos, Action&lt;PropertyInfo&gt; action</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> infos)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                action.Invoke(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> T <span class=\"title\">PollingProperties</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> PropertyInfo[] infos, Func&lt;PropertyInfo, T&gt; action</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            T result = <span class=\"literal\">default</span>(T);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> infos)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = action.Invoke(item);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result.ToString().IsNotInvalid())</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Private</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 当前使用模式，默认Display</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AttributeMode? Mode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">region</span> Public</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 默认支持的特性</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> AttributeMode</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Display = <span class=\"number\">0</span>,</span><br><span class=\"line\">            Description = <span class=\"number\">1</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 允许使用自定义特性，标记属性是否负责记录</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">System.AttributeUsage(System.AttributeTargets.Property)</span>]</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ResultTextAutoCompletionPropertyAttribute</span> : <span class=\"title\">System.Attribute</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":".Net Core Api 自动不充Result中包含的枚举Display、Description等说明性文字信息字段","path":"2022/07/27/ResultTextAutoCompletion/","eyeCatchImage":null,"excerpt":"代码片段","date":{"_isAMomentObject":true,"_i":"2022-07-27T09:47:04.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-27T09:47:04.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"代码片段","tags":["dotnet","我爱写代码","代码片段"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"css","author":"wuxinheng","date":"2022-08-24T14:17:34.000Z","description":"css效果","_content":"###### 文本本超长显示省略号\n\n```\n.overflow_omitted {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n```\n\n\n\n###### 鼠标样式\n\n```\n.mouse_style {\n    cursor: pointer;\n    /*cursor: url(https://blog-static.cnblogs.com/files/big2cat/chiken.ico),auto;*/\n}\n```\n\n\n\n###### 页面灰度\n\n```\n.grayscale {\n\tfilter: grayscale(1);\n}\n```\n\n","source":"_posts/css.md","raw":"---\ntitle: css\nauthor: wuxinheng\ndate: 2022-08-24 22:17:34\ndescription: css效果\ncategories:\n  - css\n---\n###### 文本本超长显示省略号\n\n```\n.overflow_omitted {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n```\n\n\n\n###### 鼠标样式\n\n```\n.mouse_style {\n    cursor: pointer;\n    /*cursor: url(https://blog-static.cnblogs.com/files/big2cat/chiken.ico),auto;*/\n}\n```\n\n\n\n###### 页面灰度\n\n```\n.grayscale {\n\tfilter: grayscale(1);\n}\n```\n\n","slug":"css","published":1,"updated":"2023-09-24T07:38:31.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhb0009owtkhtgpg04r","content":"<h6 id=\"文本本超长显示省略号\"><a href=\"#文本本超长显示省略号\" class=\"headerlink\" title=\"文本本超长显示省略号\"></a>文本本超长显示省略号</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.overflow_omitted &#123;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"鼠标样式\"><a href=\"#鼠标样式\" class=\"headerlink\" title=\"鼠标样式\"></a>鼠标样式</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mouse_style &#123;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    /*cursor: url(https://blog-static.cnblogs.com/files/big2cat/chiken.ico),auto;*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"页面灰度\"><a href=\"#页面灰度\" class=\"headerlink\" title=\"页面灰度\"></a>页面灰度</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grayscale &#123;</span><br><span class=\"line\">\tfilter: grayscale(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"文本本超长显示省略号\"><a href=\"#文本本超长显示省略号\" class=\"headerlink\" title=\"文本本超长显示省略号\"></a>文本本超长显示省略号</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.overflow_omitted &#123;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"鼠标样式\"><a href=\"#鼠标样式\" class=\"headerlink\" title=\"鼠标样式\"></a>鼠标样式</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mouse_style &#123;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    /*cursor: url(https://blog-static.cnblogs.com/files/big2cat/chiken.ico),auto;*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"页面灰度\"><a href=\"#页面灰度\" class=\"headerlink\" title=\"页面灰度\"></a>页面灰度</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grayscale &#123;</span><br><span class=\"line\">\tfilter: grayscale(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"css","path":"2022/08/24/css/","eyeCatchImage":null,"excerpt":"css效果","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:17:34.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:17:34.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"css","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"在docker中部署私有化NuGet","description":"本文介绍了如何在docker中部署私有化nuget。已经nuget使用","author":"wuxinheng","date":"2022-07-15T12:48:00.000Z","_content":"\n> 私有化NuGet\n\n#### 创建项目配置文件\n\n项目的根目录创建`baget.env`文件，文件内容如下\n\n```nginx\n# 以下配置是用于发布包的 API Key。\n# 你应该把它改成一个秘密值来保护你的服务器。\nApiKey=你的秘钥\n\n#文件存储方式和路径\nStorage__Type=FileSystem\nStorage__Path=/var/baget/packages\n\n#数据存储的方式和路径，此处配置要和appsettings.json一致\n#Database__Type=Sqlite\n#Database__ConnectionString=Data Source=/var/baget/baget.db\nDatabase__Type=MySql\nDatabase__ConnectionString=Server=127.0.0.1;Database=BaGet;Uid=root;Pwd=123456;\n\n#查询的类型\nSearch__Type=Database\n```\n\n#### 打包\n\n```shell\ndocker build  -t baget .\n```\n\n#### 运行\n\n```shell\ndocker run  --rm --name baget -d -p 5555:80 --env-file baget.env -v \"$(pwd)/baget-data:/var/baget\" loicsharma/baget:latest\n```\n\n#### 注意\n\n1. 下面三处的`ApiKey`需要一致\n\n- 代码工程的`appsettings.json`的`ApiKey`\n- `baget.env`文件`ApiKey`\n- 上传包`--api-key`\n\n1. 数据存储方式配置一致\n   `baget.env`文件要和appsettings.json一致\n\n#### NuGet\n\n##### 上传\n\n```shell\n# 进入nupkg所在文件夹，使用命令行。\ndotnet nuget push -s http://ip:5555/v3/index.json XXX.nupkg -k apiKey\n```\n\n##### 删除\n\n```shell\ndotnet nuget delete ShuWen.Common 1.0.0 --non-interactive -s http://ip:5555/v3/index.json -k shuwenNuGet\n```\n\n> 编辑：配置nupkg版本和其他信息使用`NuGetPackageExplorer`工具\n\n##### git仓库地址\n\n```shell\n# NuGetPackageExplorer编辑器代码仓库\nhttps://github.com/NuGetPackageExplorer/NuGetPackageExplorer.git\n# BaGet代码仓库\nhttps://github.com/loic-sharma/BaGet.git\n```\n\n##### 设置visual studio包源\n\n```shell\n# 命令行,设置完成之后重启\ndotnet nuget add source http://ip:5555/v3/index.json -n name_xx\n```\n\n##### 批处理上传\n\n将所有的nupkg放在同一的文件夹下，新建bat文件，复制下面内容运行根据自己的地址进行修改。\n\n```bash\n:: close echo\n@echo off\n:: init params\nset url=http://ip:5555/v3/index.json\nset deployFile=*.nupkg\nset apikey=shuwenNuGet\necho Searching nupkg file...\nrem 启用\"延缓环境变量扩充\"\nSETLOCAL ENABLEDELAYEDEXPANSION\nfor %%f in (%deployFile%) do (\n   set name=%%f\n   echo !name! to deploy to %url%\n   rem deploy to server\n   dotnet nuget push -s %url%  !name!  -k %apikey%\n)\n\npause\n```\n\n","source":"_posts/baget.md","raw":"---\ntitle: 在docker中部署私有化NuGet\ndescription: 本文介绍了如何在docker中部署私有化nuget。已经nuget使用\nauthor: wuxinheng\ndate: 2022-07-15 20:48:00\ntags:\n- deploy\n- docker\n- 批量上传nupkg\n- bat\n- NuGet私有化\n- dotnet\ncategories:\n- dotnet\n---\n\n> 私有化NuGet\n\n#### 创建项目配置文件\n\n项目的根目录创建`baget.env`文件，文件内容如下\n\n```nginx\n# 以下配置是用于发布包的 API Key。\n# 你应该把它改成一个秘密值来保护你的服务器。\nApiKey=你的秘钥\n\n#文件存储方式和路径\nStorage__Type=FileSystem\nStorage__Path=/var/baget/packages\n\n#数据存储的方式和路径，此处配置要和appsettings.json一致\n#Database__Type=Sqlite\n#Database__ConnectionString=Data Source=/var/baget/baget.db\nDatabase__Type=MySql\nDatabase__ConnectionString=Server=127.0.0.1;Database=BaGet;Uid=root;Pwd=123456;\n\n#查询的类型\nSearch__Type=Database\n```\n\n#### 打包\n\n```shell\ndocker build  -t baget .\n```\n\n#### 运行\n\n```shell\ndocker run  --rm --name baget -d -p 5555:80 --env-file baget.env -v \"$(pwd)/baget-data:/var/baget\" loicsharma/baget:latest\n```\n\n#### 注意\n\n1. 下面三处的`ApiKey`需要一致\n\n- 代码工程的`appsettings.json`的`ApiKey`\n- `baget.env`文件`ApiKey`\n- 上传包`--api-key`\n\n1. 数据存储方式配置一致\n   `baget.env`文件要和appsettings.json一致\n\n#### NuGet\n\n##### 上传\n\n```shell\n# 进入nupkg所在文件夹，使用命令行。\ndotnet nuget push -s http://ip:5555/v3/index.json XXX.nupkg -k apiKey\n```\n\n##### 删除\n\n```shell\ndotnet nuget delete ShuWen.Common 1.0.0 --non-interactive -s http://ip:5555/v3/index.json -k shuwenNuGet\n```\n\n> 编辑：配置nupkg版本和其他信息使用`NuGetPackageExplorer`工具\n\n##### git仓库地址\n\n```shell\n# NuGetPackageExplorer编辑器代码仓库\nhttps://github.com/NuGetPackageExplorer/NuGetPackageExplorer.git\n# BaGet代码仓库\nhttps://github.com/loic-sharma/BaGet.git\n```\n\n##### 设置visual studio包源\n\n```shell\n# 命令行,设置完成之后重启\ndotnet nuget add source http://ip:5555/v3/index.json -n name_xx\n```\n\n##### 批处理上传\n\n将所有的nupkg放在同一的文件夹下，新建bat文件，复制下面内容运行根据自己的地址进行修改。\n\n```bash\n:: close echo\n@echo off\n:: init params\nset url=http://ip:5555/v3/index.json\nset deployFile=*.nupkg\nset apikey=shuwenNuGet\necho Searching nupkg file...\nrem 启用\"延缓环境变量扩充\"\nSETLOCAL ENABLEDELAYEDEXPANSION\nfor %%f in (%deployFile%) do (\n   set name=%%f\n   echo !name! to deploy to %url%\n   rem deploy to server\n   dotnet nuget push -s %url%  !name!  -k %apikey%\n)\n\npause\n```\n\n","slug":"baget","published":1,"updated":"2023-09-24T07:38:31.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhb000bowtk0mpk7vln","content":"<blockquote>\n<p>私有化NuGet</p>\n</blockquote>\n<h4 id=\"创建项目配置文件\"><a href=\"#创建项目配置文件\" class=\"headerlink\" title=\"创建项目配置文件\"></a>创建项目配置文件</h4><p>项目的根目录创建<code>baget.env</code>文件，文件内容如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下配置是用于发布包的 API Key。</span></span><br><span class=\"line\"><span class=\"comment\"># 你应该把它改成一个秘密值来保护你的服务器。</span></span><br><span class=\"line\">ApiKey=你的秘钥</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件存储方式和路径</span></span><br><span class=\"line\">Storage__Type=<span class=\"attribute\">FileSystem</span></span><br><span class=\"line\">Storage__Path=/var/baget/packages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数据存储的方式和路径，此处配置要和appsettings.json一致</span></span><br><span class=\"line\"><span class=\"comment\">#Database__Type=Sqlite</span></span><br><span class=\"line\"><span class=\"comment\">#Database__ConnectionString=Data Source=/var/baget/baget.db</span></span><br><span class=\"line\">Database__Type=MySql</span><br><span class=\"line\">Database__ConnectionString=Server=<span class=\"number\">127.0.0.1</span>;Database=BaGet;Uid=root;Pwd=123456;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查询的类型</span></span><br><span class=\"line\">Search__Type=Database</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build  -t baget .</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  --rm --name baget -d -p 5555:80 --env-file baget.env -v &quot;$(pwd)/baget-data:/var/baget&quot; loicsharma/baget:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li>下面三处的<code>ApiKey</code>需要一致</li>\n</ol>\n<ul>\n<li>代码工程的<code>appsettings.json</code>的<code>ApiKey</code></li>\n<li><code>baget.env</code>文件<code>ApiKey</code></li>\n<li>上传包<code>--api-key</code></li>\n</ul>\n<ol>\n<li>数据存储方式配置一致<br><code>baget.env</code>文件要和appsettings.json一致</li>\n</ol>\n<h4 id=\"NuGet\"><a href=\"#NuGet\" class=\"headerlink\" title=\"NuGet\"></a>NuGet</h4><h5 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入nupkg所在文件夹，使用命令行。</span></span><br><span class=\"line\">dotnet nuget push -s http://ip:5555/v3/index.json XXX.nupkg -k apiKey</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet nuget delete ShuWen.Common 1.0.0 --non-interactive -s http://ip:5555/v3/index.json -k shuwenNuGet</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编辑：配置nupkg版本和其他信息使用<code>NuGetPackageExplorer</code>工具</p>\n</blockquote>\n<h5 id=\"git仓库地址\"><a href=\"#git仓库地址\" class=\"headerlink\" title=\"git仓库地址\"></a>git仓库地址</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NuGetPackageExplorer编辑器代码仓库</span></span><br><span class=\"line\">https://github.com/NuGetPackageExplorer/NuGetPackageExplorer.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">BaGet代码仓库</span></span><br><span class=\"line\">https://github.com/loic-sharma/BaGet.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置visual-studio包源\"><a href=\"#设置visual-studio包源\" class=\"headerlink\" title=\"设置visual studio包源\"></a>设置visual studio包源</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令行,设置完成之后重启</span></span><br><span class=\"line\">dotnet nuget add source http://ip:5555/v3/index.json -n name_xx</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"批处理上传\"><a href=\"#批处理上传\" class=\"headerlink\" title=\"批处理上传\"></a>批处理上传</h5><p>将所有的nupkg放在同一的文件夹下，新建bat文件，复制下面内容运行根据自己的地址进行修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:: close <span class=\"built_in\">echo</span></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\">:: init params</span><br><span class=\"line\"><span class=\"built_in\">set</span> url=http://ip:5555/v3/index.json</span><br><span class=\"line\"><span class=\"built_in\">set</span> deployFile=*.nupkg</span><br><span class=\"line\"><span class=\"built_in\">set</span> apikey=shuwenNuGet</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Searching nupkg file...</span><br><span class=\"line\">rem 启用<span class=\"string\">&quot;延缓环境变量扩充&quot;</span></span><br><span class=\"line\">SETLOCAL ENABLEDELAYEDEXPANSION</span><br><span class=\"line\"><span class=\"keyword\">for</span> %%f <span class=\"keyword\">in</span> (%deployFile%) <span class=\"keyword\">do</span> (</span><br><span class=\"line\">   <span class=\"built_in\">set</span> name=%%f</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> !name! to deploy to %url%</span><br><span class=\"line\">   rem deploy to server</span><br><span class=\"line\">   dotnet nuget push -s %url%  !name!  -k %apikey%</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>私有化NuGet</p>\n</blockquote>\n<h4 id=\"创建项目配置文件\"><a href=\"#创建项目配置文件\" class=\"headerlink\" title=\"创建项目配置文件\"></a>创建项目配置文件</h4><p>项目的根目录创建<code>baget.env</code>文件，文件内容如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下配置是用于发布包的 API Key。</span></span><br><span class=\"line\"><span class=\"comment\"># 你应该把它改成一个秘密值来保护你的服务器。</span></span><br><span class=\"line\">ApiKey=你的秘钥</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件存储方式和路径</span></span><br><span class=\"line\">Storage__Type=<span class=\"attribute\">FileSystem</span></span><br><span class=\"line\">Storage__Path=/var/baget/packages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数据存储的方式和路径，此处配置要和appsettings.json一致</span></span><br><span class=\"line\"><span class=\"comment\">#Database__Type=Sqlite</span></span><br><span class=\"line\"><span class=\"comment\">#Database__ConnectionString=Data Source=/var/baget/baget.db</span></span><br><span class=\"line\">Database__Type=MySql</span><br><span class=\"line\">Database__ConnectionString=Server=<span class=\"number\">127.0.0.1</span>;Database=BaGet;Uid=root;Pwd=123456;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查询的类型</span></span><br><span class=\"line\">Search__Type=Database</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build  -t baget .</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  --rm --name baget -d -p 5555:80 --env-file baget.env -v &quot;$(pwd)/baget-data:/var/baget&quot; loicsharma/baget:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li>下面三处的<code>ApiKey</code>需要一致</li>\n</ol>\n<ul>\n<li>代码工程的<code>appsettings.json</code>的<code>ApiKey</code></li>\n<li><code>baget.env</code>文件<code>ApiKey</code></li>\n<li>上传包<code>--api-key</code></li>\n</ul>\n<ol>\n<li>数据存储方式配置一致<br><code>baget.env</code>文件要和appsettings.json一致</li>\n</ol>\n<h4 id=\"NuGet\"><a href=\"#NuGet\" class=\"headerlink\" title=\"NuGet\"></a>NuGet</h4><h5 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入nupkg所在文件夹，使用命令行。</span></span><br><span class=\"line\">dotnet nuget push -s http://ip:5555/v3/index.json XXX.nupkg -k apiKey</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet nuget delete ShuWen.Common 1.0.0 --non-interactive -s http://ip:5555/v3/index.json -k shuwenNuGet</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编辑：配置nupkg版本和其他信息使用<code>NuGetPackageExplorer</code>工具</p>\n</blockquote>\n<h5 id=\"git仓库地址\"><a href=\"#git仓库地址\" class=\"headerlink\" title=\"git仓库地址\"></a>git仓库地址</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NuGetPackageExplorer编辑器代码仓库</span></span><br><span class=\"line\">https://github.com/NuGetPackageExplorer/NuGetPackageExplorer.git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">BaGet代码仓库</span></span><br><span class=\"line\">https://github.com/loic-sharma/BaGet.git</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置visual-studio包源\"><a href=\"#设置visual-studio包源\" class=\"headerlink\" title=\"设置visual studio包源\"></a>设置visual studio包源</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令行,设置完成之后重启</span></span><br><span class=\"line\">dotnet nuget add source http://ip:5555/v3/index.json -n name_xx</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"批处理上传\"><a href=\"#批处理上传\" class=\"headerlink\" title=\"批处理上传\"></a>批处理上传</h5><p>将所有的nupkg放在同一的文件夹下，新建bat文件，复制下面内容运行根据自己的地址进行修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:: close <span class=\"built_in\">echo</span></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\">:: init params</span><br><span class=\"line\"><span class=\"built_in\">set</span> url=http://ip:5555/v3/index.json</span><br><span class=\"line\"><span class=\"built_in\">set</span> deployFile=*.nupkg</span><br><span class=\"line\"><span class=\"built_in\">set</span> apikey=shuwenNuGet</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Searching nupkg file...</span><br><span class=\"line\">rem 启用<span class=\"string\">&quot;延缓环境变量扩充&quot;</span></span><br><span class=\"line\">SETLOCAL ENABLEDELAYEDEXPANSION</span><br><span class=\"line\"><span class=\"keyword\">for</span> %%f <span class=\"keyword\">in</span> (%deployFile%) <span class=\"keyword\">do</span> (</span><br><span class=\"line\">   <span class=\"built_in\">set</span> name=%%f</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> !name! to deploy to %url%</span><br><span class=\"line\">   rem deploy to server</span><br><span class=\"line\">   dotnet nuget push -s %url%  !name!  -k %apikey%</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"在docker中部署私有化NuGet","path":"2022/07/15/baget/","eyeCatchImage":null,"excerpt":"本文介绍了如何在docker中部署私有化nuget。已经nuget使用","date":{"_isAMomentObject":true,"_i":"2022-07-15T12:48:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-15T12:48:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","deploy","docker","批量上传nupkg","bat","NuGet私有化"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"di","author":"wuxinheng","date":"2022-08-24T14:24:05.000Z","description":"abp使用","_content":"> 这里偷懒直接拿abp的，abp文档有的真的不太好理解，有的还行\n\n## 依赖注入\n\nABP的依赖注入系统是基于Microsoft的[依赖注入扩展](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)库（Microsoft.Extensions.DependencyInjection nuget包）开发的.因此,它的文档在ABP中也是有效的.\n\n> 虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.启动模板中已安装了Autofac. 更多信息请参阅 [Autofac 集成](Autofac-Integration.md) 文档.\n\n### 模块化\n\n由于ABP是一个模块化框架,因此每个模块都定义它自己的服务并在它自己的单独[模块类](Module-Development-Basics.md)中通过依赖注入进行注册.例:\n\n````C#\npublic class BlogModule : AbpModule\n{\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        //在此处注入依赖项\n    }\n}\n````\n\n### 依照约定的注册\n\nABP引入了依照约定的服务注册.依照约定你无需做任何事,它会自动完成.如果要禁用它,你可以通过重写`PreConfigureServices`方法,设置`SkipAutoServiceRegistration`为`true`.\n\n````C#\npublic class BlogModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        SkipAutoServiceRegistration = true;\n    }\n}\n````\n\n一旦跳过自动注册,你应该手动注册你的服务.在这种情况下,`AddAssemblyOf`扩展方法可以帮助你依照约定注册所有服务.例:\n\n````c#\npublic class BlogModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        SkipAutoServiceRegistration = true;\n    }\n\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        context.Services.AddAssemblyOf<BlogModule>();\n    }\n}\n````\n\n以下部分解释了约定和配置.\n\n#### 固有的注册类型\n\n一些特定类型会默认注册到依赖注入.例子:\n\n* 模块类注册为singleton.\n* MVC控制器（继承``Controller``或``AbpController``）被注册为transient.\n* MVC页面模型（继承``PageModel``或``AbpPageModel``）被注册为transient.\n* MVC视图组件（继承``ViewComponent``或``AbpViewComponent``）被注册为transient.\n* 应用程序服务（实现``IApplicationService``接口或继承``ApplicationService``类）注册为transient.\n* 存储库（实现``IRepository``接口）注册为transient.\n* 域服务（实现``IDomainService``接口）注册为transient.\n\n示例:\n\n````C#\npublic class BlogPostAppService : ApplicationService\n{\n}\n````\n\n``BlogPostAppService`` 由于它是从已知的基类派生的,因此会自动注册为transient生命周期.\n\n#### 依赖接口\n\n如果实现这些接口,则会自动将类注册到依赖注入:\n\n* ``ITransientDependency`` 注册为transient生命周期.\n* ``ISingletonDependency`` 注册为singleton生命周期.\n* ``IScopedDependency`` 注册为scoped生命周期.\n\n示例:\n\n````C#\npublic class TaxCalculator : ITransientDependency\n{\n}\n````\n\n``TaxCalculator``因为实现了``ITransientDependency``,所以它会自动注册为transient生命周期.\n\n#### Dependency 特性\n\n配置依赖注入服务的另一种方法是使用``DependencyAttribute``.它具有以下属性:\n\n* ``Lifetime``: 注册的生命周期:Singleton,Transient或Scoped.\n* ``TryRegister``: 设置``true``则只注册以前未注册的服务.使用IServiceCollection的TryAdd ... 扩展方法.\n* ``ReplaceServices``: 设置``true``则替换之前已经注册过的服务.使用IServiceCollection的Replace扩展方法.\n\n示例:\n\n````C#\n[Dependency(ServiceLifetime.Transient, ReplaceServices = true)]\npublic class TaxCalculator\n{\n\n}\n\n````\n\n如果定义了``Lifetime``属性,则``Dependency``特性具有比其他依赖接口更高的优先级. \n\n#### ExposeServices 特性 \n\n``ExposeServicesAttribute``用于控制相关类提供了什么服务.例: \n\n````C#\n[ExposeServices(typeof(ITaxCalculator))]\npublic class TaxCalculator: ICalculator, ITaxCalculator, ICanCalculate, ITransientDependency\n{\n\n}\n````\n\n``TaxCalculator``类只公开``ITaxCalculator``接口.这意味着你只能注入``ITaxCalculator``,但不能注入``TaxCalculator``或``ICalculator``到你的应用程序中.\n\n#### 依照约定公开的服务\n\n如果你未指定要公开的服务,则ABP依照约定公开服务.以上面定义的``TaxCalculator``为例:\n\n* 默认情况下,类本身是公开的.这意味着你可以按``TaxCalculator``类注入它.\n* 默认情况下,默认接口是公开的.默认接口是由命名约定确定.在这个例子中,``ICalculator``和``ITaxCalculator``是``TaxCalculator``的默认接口,但``ICanCalculate``不是.\n\n#### 组合到一起\n\n只要有意义,特性和接口是可以组合在一起使用的.\n\n````C#\n[Dependency(ReplaceServices = true)]\n[ExposeServices(typeof(ITaxCalculator))]\npublic class TaxCalculator : ITaxCalculator, ITransientDependency\n{\n\n}\n````\n\n#### 手动注册\n\n在某些情况下,你可能需要向``IServiceCollection``手动注册服务,尤其是在需要使用自定义工厂方法或singleton实例时.在这种情况下,你可以像[Microsoft文档](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)描述的那样直接添加服务.例:\n\n````C#\npublic class BlogModule : AbpModule\n{\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        //注册一个singleton实例\n        context.Services.AddSingleton<TaxCalculator>(new TaxCalculator(taxRatio: 0.18));\n\n        //注册一个从IServiceProvider解析得来的工厂方法\n        context.Services.AddScoped<ITaxCalculator>(sp => sp.GetRequiredService<TaxCalculator>());\n    }\n}\n````\n\n### 注入依赖关系\n\n使用已注册的服务有三种常用方法.\n\n#### 构造方法注入\n\n这是将服务注入类的最常用方法.例如:\n\n````C#\npublic class TaxAppService : ApplicationService\n{\n    private readonly ITaxCalculator _taxCalculator;\n\n    public TaxAppService(ITaxCalculator taxCalculator)\n    {\n        _taxCalculator = taxCalculator;\n    }\n\n    public void DoSomething()\n    {\n        //...使用 _taxCalculator...\n    }\n}\n````\n\n``TaxAppService``在构造方法中得到``ITaxCalculator``.依赖注入系统在运行时自动提供所请求的服务.\n\n构造方法注入是将依赖项注入类的首选方式.这样,除非提供了所有构造方法注入的依赖项,否则无法构造类.因此,该类明确的声明了它必需的服务.\n\n#### 属性注入\n\nMicrosoft依赖注入库不支持属性注入.但是,ABP可以与第三方DI提供商（例如[Autofac](https://autofac.org/)）集成,以实现属性注入.例:\n\n````C#\npublic class MyService : ITransientDependency\n{\n    public ILogger<MyService> Logger { get; set; }\n\n    public MyService()\n    {\n        Logger = NullLogger<MyService>.Instance;\n    }\n\n    public void DoSomething()\n    {\n        //...使用 Logger 写日志...\n    }\n}\n````\n\n对于属性注入依赖项,使用公开的setter声明公共属性.这允许DI框架在创建类之后设置它.\n\n属性注入依赖项通常被视为可选依赖项.这意味着没有它们,服务也可以正常工作.``Logger``就是这样的依赖项,``MyService``可以继续工作而无需日志记录.\n\n为了使依赖项成为可选的,我们通常会为依赖项设置默认/后备(fallback)值.在此示例中,NullLogger用作后备.因此,如果DI框架或你在创建``MyService``后未设置Logger属性,则``MyService``依然可以工作但不写日志.\n\n属性注入的一个限制是你不能在构造函数中使用依赖项,因为它是在对象构造之后设置的.\n\n当你想要设计一个默认注入了一些公共服务的基类时,属性注入也很有用.如果你打算使用构造方法注入,那么所有派生类也应该将依赖的服务注入到它们自己的构造方法中,这使得开发更加困难.但是,对于非可选服务使用属性注入要非常小心,因为它使得类的要求难以清楚地看到.\n\n#### 从IServiceProvider解析服务\n\n你可能希望直接从``IServiceProvider``解析服务.在这种情况下,你可以将``IServiceProvider``注入到你的类并使用``GetService``方法,如下所示:\n\n````C#\npublic class MyService : ITransientDependency\n{\n    private readonly IServiceProvider _serviceProvider;\n\n    public MyService(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public void DoSomething()\n    {\n        var taxCalculator = _serviceProvider.GetService<ITaxCalculator>();\n        //...\n    }\n}\n````\n\n#### 释放/处理（Releasing/Disposing）服务\n\n如果你使用了构造函数或属性注入,则无需担心释放服务的资源.但是,如果你从``IServiceProvider``解析了服务,在某些情况下,你可能需要注意释放服务.\n\nASP.NET Core会在当前HTTP请求结束时释放所有服务,即使你直接从``IServiceProvider``解析了服务（假设你注入了IServiceProvider）.但是,在某些情况下,你可能希望释放/处理手动解析的服务:\n\n* 你的代码在AspNet Core请求之外执行,执行者没有处理服务范围.\n* 你只有对根服务提供者的引用.\n* 你可能希望立即释放和处理服务（例如,你可能会创建太多具有大量内存占用且不想过度使用内存的服务）.\n\n在任何情况下,你都可以使用这样的`using`代码块来安全地立即释放服务:\n\n````C#\nusing (var scope = _serviceProvider.CreateScope())\n{\n    var service1 = scope.ServiceProvider.GetService<IMyService1>();\n    var service2 = scope.ServiceProvider.GetService<IMyService2>();\n}\n````\n\n两个服务在创建的scope被处理时（在using块的末尾）释放.\n\n## 高级特性\n\n### IServiceCollection.OnRegistred 事件\n\n你可能想在注册到依赖注入的每个服务上执行一个操作, 在你的模块的 `PreConfigureServices` 方法中, 使用 `OnRegistred` 方法注册一个回调(callback) , 如下所示:\n\n````csharp\npublic class AppModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        context.Services.OnRegistred(ctx =>\n        {\n            var type = ctx.ImplementationType;\n            //...\n        });\n    }\n}\n````\n\n`ImplementationType` 提供了服务类型. 该回调(callback)通常用于向服务添加拦截器. 例如:\n\n````csharp\npublic class AppModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        context.Services.OnRegistred(ctx =>\n        {\n            if (ctx.ImplementationType.IsDefined(typeof(MyLogAttribute), true))\n            {\n                ctx.Interceptors.TryAdd<MyLogInterceptor>();\n            }\n        });\n    }\n}\n````\n\n这个示例判断一个服务类是否具有 `MyLogAttribute` 特性, 如果有的话就添加一个 `MyLogInterceptor` 到拦截器集合中.\n\n> 注意, 如果服务类公开了多于一个服务或接口, `OnRegistred` 回调(callback)可能被同一服务类多次调用. 因此, 较安全的方法是使用 `Interceptors.TryAdd` 方法而不是 `Interceptors.Add` 方法. 请参阅动态代理(dynamic proxying)/拦截器 [文档](Dynamic-Proxying-Interceptors.md).\n\n## 第三方提供程序\n\n虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.\n\n启动模板中已安装了Autofac. 更多信息请参阅 [Autofac 集成](Autofac-Integration.md) 文档.\n\n\n### 请参阅\n\n* [ASP.NET Core依赖注入最佳实践,提示和技巧](https://blog.abp.io/asp-net-core-dependency-injection-best-practices-tips-tricks)","source":"_posts/di.md","raw":"---\ntitle: di\nauthor: wuxinheng\ndate: 2022-08-24 22:24:05\ndescription: abp使用\ncategories:\n  - abp\ntags:\n- dotnet\n---\n> 这里偷懒直接拿abp的，abp文档有的真的不太好理解，有的还行\n\n## 依赖注入\n\nABP的依赖注入系统是基于Microsoft的[依赖注入扩展](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)库（Microsoft.Extensions.DependencyInjection nuget包）开发的.因此,它的文档在ABP中也是有效的.\n\n> 虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.启动模板中已安装了Autofac. 更多信息请参阅 [Autofac 集成](Autofac-Integration.md) 文档.\n\n### 模块化\n\n由于ABP是一个模块化框架,因此每个模块都定义它自己的服务并在它自己的单独[模块类](Module-Development-Basics.md)中通过依赖注入进行注册.例:\n\n````C#\npublic class BlogModule : AbpModule\n{\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        //在此处注入依赖项\n    }\n}\n````\n\n### 依照约定的注册\n\nABP引入了依照约定的服务注册.依照约定你无需做任何事,它会自动完成.如果要禁用它,你可以通过重写`PreConfigureServices`方法,设置`SkipAutoServiceRegistration`为`true`.\n\n````C#\npublic class BlogModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        SkipAutoServiceRegistration = true;\n    }\n}\n````\n\n一旦跳过自动注册,你应该手动注册你的服务.在这种情况下,`AddAssemblyOf`扩展方法可以帮助你依照约定注册所有服务.例:\n\n````c#\npublic class BlogModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        SkipAutoServiceRegistration = true;\n    }\n\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        context.Services.AddAssemblyOf<BlogModule>();\n    }\n}\n````\n\n以下部分解释了约定和配置.\n\n#### 固有的注册类型\n\n一些特定类型会默认注册到依赖注入.例子:\n\n* 模块类注册为singleton.\n* MVC控制器（继承``Controller``或``AbpController``）被注册为transient.\n* MVC页面模型（继承``PageModel``或``AbpPageModel``）被注册为transient.\n* MVC视图组件（继承``ViewComponent``或``AbpViewComponent``）被注册为transient.\n* 应用程序服务（实现``IApplicationService``接口或继承``ApplicationService``类）注册为transient.\n* 存储库（实现``IRepository``接口）注册为transient.\n* 域服务（实现``IDomainService``接口）注册为transient.\n\n示例:\n\n````C#\npublic class BlogPostAppService : ApplicationService\n{\n}\n````\n\n``BlogPostAppService`` 由于它是从已知的基类派生的,因此会自动注册为transient生命周期.\n\n#### 依赖接口\n\n如果实现这些接口,则会自动将类注册到依赖注入:\n\n* ``ITransientDependency`` 注册为transient生命周期.\n* ``ISingletonDependency`` 注册为singleton生命周期.\n* ``IScopedDependency`` 注册为scoped生命周期.\n\n示例:\n\n````C#\npublic class TaxCalculator : ITransientDependency\n{\n}\n````\n\n``TaxCalculator``因为实现了``ITransientDependency``,所以它会自动注册为transient生命周期.\n\n#### Dependency 特性\n\n配置依赖注入服务的另一种方法是使用``DependencyAttribute``.它具有以下属性:\n\n* ``Lifetime``: 注册的生命周期:Singleton,Transient或Scoped.\n* ``TryRegister``: 设置``true``则只注册以前未注册的服务.使用IServiceCollection的TryAdd ... 扩展方法.\n* ``ReplaceServices``: 设置``true``则替换之前已经注册过的服务.使用IServiceCollection的Replace扩展方法.\n\n示例:\n\n````C#\n[Dependency(ServiceLifetime.Transient, ReplaceServices = true)]\npublic class TaxCalculator\n{\n\n}\n\n````\n\n如果定义了``Lifetime``属性,则``Dependency``特性具有比其他依赖接口更高的优先级. \n\n#### ExposeServices 特性 \n\n``ExposeServicesAttribute``用于控制相关类提供了什么服务.例: \n\n````C#\n[ExposeServices(typeof(ITaxCalculator))]\npublic class TaxCalculator: ICalculator, ITaxCalculator, ICanCalculate, ITransientDependency\n{\n\n}\n````\n\n``TaxCalculator``类只公开``ITaxCalculator``接口.这意味着你只能注入``ITaxCalculator``,但不能注入``TaxCalculator``或``ICalculator``到你的应用程序中.\n\n#### 依照约定公开的服务\n\n如果你未指定要公开的服务,则ABP依照约定公开服务.以上面定义的``TaxCalculator``为例:\n\n* 默认情况下,类本身是公开的.这意味着你可以按``TaxCalculator``类注入它.\n* 默认情况下,默认接口是公开的.默认接口是由命名约定确定.在这个例子中,``ICalculator``和``ITaxCalculator``是``TaxCalculator``的默认接口,但``ICanCalculate``不是.\n\n#### 组合到一起\n\n只要有意义,特性和接口是可以组合在一起使用的.\n\n````C#\n[Dependency(ReplaceServices = true)]\n[ExposeServices(typeof(ITaxCalculator))]\npublic class TaxCalculator : ITaxCalculator, ITransientDependency\n{\n\n}\n````\n\n#### 手动注册\n\n在某些情况下,你可能需要向``IServiceCollection``手动注册服务,尤其是在需要使用自定义工厂方法或singleton实例时.在这种情况下,你可以像[Microsoft文档](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)描述的那样直接添加服务.例:\n\n````C#\npublic class BlogModule : AbpModule\n{\n    public override void ConfigureServices(ServiceConfigurationContext context)\n    {\n        //注册一个singleton实例\n        context.Services.AddSingleton<TaxCalculator>(new TaxCalculator(taxRatio: 0.18));\n\n        //注册一个从IServiceProvider解析得来的工厂方法\n        context.Services.AddScoped<ITaxCalculator>(sp => sp.GetRequiredService<TaxCalculator>());\n    }\n}\n````\n\n### 注入依赖关系\n\n使用已注册的服务有三种常用方法.\n\n#### 构造方法注入\n\n这是将服务注入类的最常用方法.例如:\n\n````C#\npublic class TaxAppService : ApplicationService\n{\n    private readonly ITaxCalculator _taxCalculator;\n\n    public TaxAppService(ITaxCalculator taxCalculator)\n    {\n        _taxCalculator = taxCalculator;\n    }\n\n    public void DoSomething()\n    {\n        //...使用 _taxCalculator...\n    }\n}\n````\n\n``TaxAppService``在构造方法中得到``ITaxCalculator``.依赖注入系统在运行时自动提供所请求的服务.\n\n构造方法注入是将依赖项注入类的首选方式.这样,除非提供了所有构造方法注入的依赖项,否则无法构造类.因此,该类明确的声明了它必需的服务.\n\n#### 属性注入\n\nMicrosoft依赖注入库不支持属性注入.但是,ABP可以与第三方DI提供商（例如[Autofac](https://autofac.org/)）集成,以实现属性注入.例:\n\n````C#\npublic class MyService : ITransientDependency\n{\n    public ILogger<MyService> Logger { get; set; }\n\n    public MyService()\n    {\n        Logger = NullLogger<MyService>.Instance;\n    }\n\n    public void DoSomething()\n    {\n        //...使用 Logger 写日志...\n    }\n}\n````\n\n对于属性注入依赖项,使用公开的setter声明公共属性.这允许DI框架在创建类之后设置它.\n\n属性注入依赖项通常被视为可选依赖项.这意味着没有它们,服务也可以正常工作.``Logger``就是这样的依赖项,``MyService``可以继续工作而无需日志记录.\n\n为了使依赖项成为可选的,我们通常会为依赖项设置默认/后备(fallback)值.在此示例中,NullLogger用作后备.因此,如果DI框架或你在创建``MyService``后未设置Logger属性,则``MyService``依然可以工作但不写日志.\n\n属性注入的一个限制是你不能在构造函数中使用依赖项,因为它是在对象构造之后设置的.\n\n当你想要设计一个默认注入了一些公共服务的基类时,属性注入也很有用.如果你打算使用构造方法注入,那么所有派生类也应该将依赖的服务注入到它们自己的构造方法中,这使得开发更加困难.但是,对于非可选服务使用属性注入要非常小心,因为它使得类的要求难以清楚地看到.\n\n#### 从IServiceProvider解析服务\n\n你可能希望直接从``IServiceProvider``解析服务.在这种情况下,你可以将``IServiceProvider``注入到你的类并使用``GetService``方法,如下所示:\n\n````C#\npublic class MyService : ITransientDependency\n{\n    private readonly IServiceProvider _serviceProvider;\n\n    public MyService(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public void DoSomething()\n    {\n        var taxCalculator = _serviceProvider.GetService<ITaxCalculator>();\n        //...\n    }\n}\n````\n\n#### 释放/处理（Releasing/Disposing）服务\n\n如果你使用了构造函数或属性注入,则无需担心释放服务的资源.但是,如果你从``IServiceProvider``解析了服务,在某些情况下,你可能需要注意释放服务.\n\nASP.NET Core会在当前HTTP请求结束时释放所有服务,即使你直接从``IServiceProvider``解析了服务（假设你注入了IServiceProvider）.但是,在某些情况下,你可能希望释放/处理手动解析的服务:\n\n* 你的代码在AspNet Core请求之外执行,执行者没有处理服务范围.\n* 你只有对根服务提供者的引用.\n* 你可能希望立即释放和处理服务（例如,你可能会创建太多具有大量内存占用且不想过度使用内存的服务）.\n\n在任何情况下,你都可以使用这样的`using`代码块来安全地立即释放服务:\n\n````C#\nusing (var scope = _serviceProvider.CreateScope())\n{\n    var service1 = scope.ServiceProvider.GetService<IMyService1>();\n    var service2 = scope.ServiceProvider.GetService<IMyService2>();\n}\n````\n\n两个服务在创建的scope被处理时（在using块的末尾）释放.\n\n## 高级特性\n\n### IServiceCollection.OnRegistred 事件\n\n你可能想在注册到依赖注入的每个服务上执行一个操作, 在你的模块的 `PreConfigureServices` 方法中, 使用 `OnRegistred` 方法注册一个回调(callback) , 如下所示:\n\n````csharp\npublic class AppModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        context.Services.OnRegistred(ctx =>\n        {\n            var type = ctx.ImplementationType;\n            //...\n        });\n    }\n}\n````\n\n`ImplementationType` 提供了服务类型. 该回调(callback)通常用于向服务添加拦截器. 例如:\n\n````csharp\npublic class AppModule : AbpModule\n{\n    public override void PreConfigureServices(ServiceConfigurationContext context)\n    {\n        context.Services.OnRegistred(ctx =>\n        {\n            if (ctx.ImplementationType.IsDefined(typeof(MyLogAttribute), true))\n            {\n                ctx.Interceptors.TryAdd<MyLogInterceptor>();\n            }\n        });\n    }\n}\n````\n\n这个示例判断一个服务类是否具有 `MyLogAttribute` 特性, 如果有的话就添加一个 `MyLogInterceptor` 到拦截器集合中.\n\n> 注意, 如果服务类公开了多于一个服务或接口, `OnRegistred` 回调(callback)可能被同一服务类多次调用. 因此, 较安全的方法是使用 `Interceptors.TryAdd` 方法而不是 `Interceptors.Add` 方法. 请参阅动态代理(dynamic proxying)/拦截器 [文档](Dynamic-Proxying-Interceptors.md).\n\n## 第三方提供程序\n\n虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.\n\n启动模板中已安装了Autofac. 更多信息请参阅 [Autofac 集成](Autofac-Integration.md) 文档.\n\n\n### 请参阅\n\n* [ASP.NET Core依赖注入最佳实践,提示和技巧](https://blog.abp.io/asp-net-core-dependency-injection-best-practices-tips-tricks)","slug":"di","published":1,"updated":"2023-09-24T07:38:31.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhd000fowtk30s6g5kb","content":"<blockquote>\n<p>这里偷懒直接拿abp的，abp文档有的真的不太好理解，有的还行</p>\n</blockquote>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><p>ABP的依赖注入系统是基于Microsoft的<a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\">依赖注入扩展</a>库（Microsoft.Extensions.DependencyInjection nuget包）开发的.因此,它的文档在ABP中也是有效的.</p>\n<blockquote>\n<p>虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.启动模板中已安装了Autofac. 更多信息请参阅 <a href=\"Autofac-Integration.md\">Autofac 集成</a> 文档.</p>\n</blockquote>\n<h3 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h3><p>由于ABP是一个模块化框架,因此每个模块都定义它自己的服务并在它自己的单独<a href=\"Module-Development-Basics.md\">模块类</a>中通过依赖注入进行注册.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在此处注入依赖项</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"依照约定的注册\"><a href=\"#依照约定的注册\" class=\"headerlink\" title=\"依照约定的注册\"></a>依照约定的注册</h3><p>ABP引入了依照约定的服务注册.依照约定你无需做任何事,它会自动完成.如果要禁用它,你可以通过重写<code>PreConfigureServices</code>方法,设置<code>SkipAutoServiceRegistration</code>为<code>true</code>.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SkipAutoServiceRegistration = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一旦跳过自动注册,你应该手动注册你的服务.在这种情况下,<code>AddAssemblyOf</code>扩展方法可以帮助你依照约定注册所有服务.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SkipAutoServiceRegistration = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.Services.AddAssemblyOf&lt;BlogModule&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下部分解释了约定和配置.</p>\n<h4 id=\"固有的注册类型\"><a href=\"#固有的注册类型\" class=\"headerlink\" title=\"固有的注册类型\"></a>固有的注册类型</h4><p>一些特定类型会默认注册到依赖注入.例子:</p>\n<ul>\n<li>模块类注册为singleton.</li>\n<li>MVC控制器（继承<code>Controller</code>或<code>AbpController</code>）被注册为transient.</li>\n<li>MVC页面模型（继承<code>PageModel</code>或<code>AbpPageModel</code>）被注册为transient.</li>\n<li>MVC视图组件（继承<code>ViewComponent</code>或<code>AbpViewComponent</code>）被注册为transient.</li>\n<li>应用程序服务（实现<code>IApplicationService</code>接口或继承<code>ApplicationService</code>类）注册为transient.</li>\n<li>存储库（实现<code>IRepository</code>接口）注册为transient.</li>\n<li>域服务（实现<code>IDomainService</code>接口）注册为transient.</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogPostAppService</span> : <span class=\"title\">ApplicationService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BlogPostAppService</code> 由于它是从已知的基类派生的,因此会自动注册为transient生命周期.</p>\n<h4 id=\"依赖接口\"><a href=\"#依赖接口\" class=\"headerlink\" title=\"依赖接口\"></a>依赖接口</h4><p>如果实现这些接口,则会自动将类注册到依赖注入:</p>\n<ul>\n<li><code>ITransientDependency</code> 注册为transient生命周期.</li>\n<li><code>ISingletonDependency</code> 注册为singleton生命周期.</li>\n<li><code>IScopedDependency</code> 注册为scoped生命周期.</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span> : <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TaxCalculator</code>因为实现了<code>ITransientDependency</code>,所以它会自动注册为transient生命周期.</p>\n<h4 id=\"Dependency-特性\"><a href=\"#Dependency-特性\" class=\"headerlink\" title=\"Dependency 特性\"></a>Dependency 特性</h4><p>配置依赖注入服务的另一种方法是使用<code>DependencyAttribute</code>.它具有以下属性:</p>\n<ul>\n<li><code>Lifetime</code>: 注册的生命周期:Singleton,Transient或Scoped.</li>\n<li><code>TryRegister</code>: 设置<code>true</code>则只注册以前未注册的服务.使用IServiceCollection的TryAdd … 扩展方法.</li>\n<li><code>ReplaceServices</code>: 设置<code>true</code>则替换之前已经注册过的服务.使用IServiceCollection的Replace扩展方法.</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Dependency(ServiceLifetime.Transient, ReplaceServices = true)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果定义了<code>Lifetime</code>属性,则<code>Dependency</code>特性具有比其他依赖接口更高的优先级. </p>\n<h4 id=\"ExposeServices-特性\"><a href=\"#ExposeServices-特性\" class=\"headerlink\" title=\"ExposeServices 特性\"></a>ExposeServices 特性</h4><p><code>ExposeServicesAttribute</code>用于控制相关类提供了什么服务.例: </p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ExposeServices(typeof(ITaxCalculator))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span>: <span class=\"title\">ICalculator</span>, <span class=\"title\">ITaxCalculator</span>, <span class=\"title\">ICanCalculate</span>, <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TaxCalculator</code>类只公开<code>ITaxCalculator</code>接口.这意味着你只能注入<code>ITaxCalculator</code>,但不能注入<code>TaxCalculator</code>或<code>ICalculator</code>到你的应用程序中.</p>\n<h4 id=\"依照约定公开的服务\"><a href=\"#依照约定公开的服务\" class=\"headerlink\" title=\"依照约定公开的服务\"></a>依照约定公开的服务</h4><p>如果你未指定要公开的服务,则ABP依照约定公开服务.以上面定义的<code>TaxCalculator</code>为例:</p>\n<ul>\n<li>默认情况下,类本身是公开的.这意味着你可以按<code>TaxCalculator</code>类注入它.</li>\n<li>默认情况下,默认接口是公开的.默认接口是由命名约定确定.在这个例子中,<code>ICalculator</code>和<code>ITaxCalculator</code>是<code>TaxCalculator</code>的默认接口,但<code>ICanCalculate</code>不是.</li>\n</ul>\n<h4 id=\"组合到一起\"><a href=\"#组合到一起\" class=\"headerlink\" title=\"组合到一起\"></a>组合到一起</h4><p>只要有意义,特性和接口是可以组合在一起使用的.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Dependency(ReplaceServices = true)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ExposeServices(typeof(ITaxCalculator))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span> : <span class=\"title\">ITaxCalculator</span>, <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手动注册\"><a href=\"#手动注册\" class=\"headerlink\" title=\"手动注册\"></a>手动注册</h4><p>在某些情况下,你可能需要向<code>IServiceCollection</code>手动注册服务,尤其是在需要使用自定义工厂方法或singleton实例时.在这种情况下,你可以像<a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\">Microsoft文档</a>描述的那样直接添加服务.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//注册一个singleton实例</span></span><br><span class=\"line\">        context.Services.AddSingleton&lt;TaxCalculator&gt;(<span class=\"keyword\">new</span> TaxCalculator(taxRatio: <span class=\"number\">0.18</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册一个从IServiceProvider解析得来的工厂方法</span></span><br><span class=\"line\">        context.Services.AddScoped&lt;ITaxCalculator&gt;(sp =&gt; sp.GetRequiredService&lt;TaxCalculator&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注入依赖关系\"><a href=\"#注入依赖关系\" class=\"headerlink\" title=\"注入依赖关系\"></a>注入依赖关系</h3><p>使用已注册的服务有三种常用方法.</p>\n<h4 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h4><p>这是将服务注入类的最常用方法.例如:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxAppService</span> : <span class=\"title\">ApplicationService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ITaxCalculator _taxCalculator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaxAppService</span>(<span class=\"params\">ITaxCalculator taxCalculator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _taxCalculator = taxCalculator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...使用 _taxCalculator...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TaxAppService</code>在构造方法中得到<code>ITaxCalculator</code>.依赖注入系统在运行时自动提供所请求的服务.</p>\n<p>构造方法注入是将依赖项注入类的首选方式.这样,除非提供了所有构造方法注入的依赖项,否则无法构造类.因此,该类明确的声明了它必需的服务.</p>\n<h4 id=\"属性注入\"><a href=\"#属性注入\" class=\"headerlink\" title=\"属性注入\"></a>属性注入</h4><p>Microsoft依赖注入库不支持属性注入.但是,ABP可以与第三方DI提供商（例如<a href=\"https://autofac.org/\">Autofac</a>）集成,以实现属性注入.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyService</span> : <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ILogger&lt;MyService&gt; Logger &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyService</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Logger = NullLogger&lt;MyService&gt;.Instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...使用 Logger 写日志...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于属性注入依赖项,使用公开的setter声明公共属性.这允许DI框架在创建类之后设置它.</p>\n<p>属性注入依赖项通常被视为可选依赖项.这意味着没有它们,服务也可以正常工作.<code>Logger</code>就是这样的依赖项,<code>MyService</code>可以继续工作而无需日志记录.</p>\n<p>为了使依赖项成为可选的,我们通常会为依赖项设置默认&#x2F;后备(fallback)值.在此示例中,NullLogger用作后备.因此,如果DI框架或你在创建<code>MyService</code>后未设置Logger属性,则<code>MyService</code>依然可以工作但不写日志.</p>\n<p>属性注入的一个限制是你不能在构造函数中使用依赖项,因为它是在对象构造之后设置的.</p>\n<p>当你想要设计一个默认注入了一些公共服务的基类时,属性注入也很有用.如果你打算使用构造方法注入,那么所有派生类也应该将依赖的服务注入到它们自己的构造方法中,这使得开发更加困难.但是,对于非可选服务使用属性注入要非常小心,因为它使得类的要求难以清楚地看到.</p>\n<h4 id=\"从IServiceProvider解析服务\"><a href=\"#从IServiceProvider解析服务\" class=\"headerlink\" title=\"从IServiceProvider解析服务\"></a>从IServiceProvider解析服务</h4><p>你可能希望直接从<code>IServiceProvider</code>解析服务.在这种情况下,你可以将<code>IServiceProvider</code>注入到你的类并使用<code>GetService</code>方法,如下所示:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyService</span> : <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IServiceProvider _serviceProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyService</span>(<span class=\"params\">IServiceProvider serviceProvider</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _serviceProvider = serviceProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> taxCalculator = _serviceProvider.GetService&lt;ITaxCalculator&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"释放-x2F-处理（Releasing-x2F-Disposing）服务\"><a href=\"#释放-x2F-处理（Releasing-x2F-Disposing）服务\" class=\"headerlink\" title=\"释放&#x2F;处理（Releasing&#x2F;Disposing）服务\"></a>释放&#x2F;处理（Releasing&#x2F;Disposing）服务</h4><p>如果你使用了构造函数或属性注入,则无需担心释放服务的资源.但是,如果你从<code>IServiceProvider</code>解析了服务,在某些情况下,你可能需要注意释放服务.</p>\n<p>ASP.NET Core会在当前HTTP请求结束时释放所有服务,即使你直接从<code>IServiceProvider</code>解析了服务（假设你注入了IServiceProvider）.但是,在某些情况下,你可能希望释放&#x2F;处理手动解析的服务:</p>\n<ul>\n<li>你的代码在AspNet Core请求之外执行,执行者没有处理服务范围.</li>\n<li>你只有对根服务提供者的引用.</li>\n<li>你可能希望立即释放和处理服务（例如,你可能会创建太多具有大量内存占用且不想过度使用内存的服务）.</li>\n</ul>\n<p>在任何情况下,你都可以使用这样的<code>using</code>代码块来安全地立即释放服务:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> scope = _serviceProvider.CreateScope())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> service1 = scope.ServiceProvider.GetService&lt;IMyService1&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> service2 = scope.ServiceProvider.GetService&lt;IMyService2&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个服务在创建的scope被处理时（在using块的末尾）释放.</p>\n<h2 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h2><h3 id=\"IServiceCollection-OnRegistred-事件\"><a href=\"#IServiceCollection-OnRegistred-事件\" class=\"headerlink\" title=\"IServiceCollection.OnRegistred 事件\"></a>IServiceCollection.OnRegistred 事件</h3><p>你可能想在注册到依赖注入的每个服务上执行一个操作, 在你的模块的 <code>PreConfigureServices</code> 方法中, 使用 <code>OnRegistred</code> 方法注册一个回调(callback) , 如下所示:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.Services.OnRegistred(ctx =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = ctx.ImplementationType;</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ImplementationType</code> 提供了服务类型. 该回调(callback)通常用于向服务添加拦截器. 例如:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.Services.OnRegistred(ctx =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctx.ImplementationType.IsDefined(<span class=\"keyword\">typeof</span>(MyLogAttribute), <span class=\"literal\">true</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ctx.Interceptors.TryAdd&lt;MyLogInterceptor&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个示例判断一个服务类是否具有 <code>MyLogAttribute</code> 特性, 如果有的话就添加一个 <code>MyLogInterceptor</code> 到拦截器集合中.</p>\n<blockquote>\n<p>注意, 如果服务类公开了多于一个服务或接口, <code>OnRegistred</code> 回调(callback)可能被同一服务类多次调用. 因此, 较安全的方法是使用 <code>Interceptors.TryAdd</code> 方法而不是 <code>Interceptors.Add</code> 方法. 请参阅动态代理(dynamic proxying)&#x2F;拦截器 <a href=\"Dynamic-Proxying-Interceptors.md\">文档</a>.</p>\n</blockquote>\n<h2 id=\"第三方提供程序\"><a href=\"#第三方提供程序\" class=\"headerlink\" title=\"第三方提供程序\"></a>第三方提供程序</h2><p>虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.</p>\n<p>启动模板中已安装了Autofac. 更多信息请参阅 <a href=\"Autofac-Integration.md\">Autofac 集成</a> 文档.</p>\n<h3 id=\"请参阅\"><a href=\"#请参阅\" class=\"headerlink\" title=\"请参阅\"></a>请参阅</h3><ul>\n<li><a href=\"https://blog.abp.io/asp-net-core-dependency-injection-best-practices-tips-tricks\">ASP.NET Core依赖注入最佳实践,提示和技巧</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这里偷懒直接拿abp的，abp文档有的真的不太好理解，有的还行</p>\n</blockquote>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><p>ABP的依赖注入系统是基于Microsoft的<a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\">依赖注入扩展</a>库（Microsoft.Extensions.DependencyInjection nuget包）开发的.因此,它的文档在ABP中也是有效的.</p>\n<blockquote>\n<p>虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.启动模板中已安装了Autofac. 更多信息请参阅 <a href=\"Autofac-Integration.md\">Autofac 集成</a> 文档.</p>\n</blockquote>\n<h3 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h3><p>由于ABP是一个模块化框架,因此每个模块都定义它自己的服务并在它自己的单独<a href=\"Module-Development-Basics.md\">模块类</a>中通过依赖注入进行注册.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在此处注入依赖项</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"依照约定的注册\"><a href=\"#依照约定的注册\" class=\"headerlink\" title=\"依照约定的注册\"></a>依照约定的注册</h3><p>ABP引入了依照约定的服务注册.依照约定你无需做任何事,它会自动完成.如果要禁用它,你可以通过重写<code>PreConfigureServices</code>方法,设置<code>SkipAutoServiceRegistration</code>为<code>true</code>.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SkipAutoServiceRegistration = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一旦跳过自动注册,你应该手动注册你的服务.在这种情况下,<code>AddAssemblyOf</code>扩展方法可以帮助你依照约定注册所有服务.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SkipAutoServiceRegistration = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.Services.AddAssemblyOf&lt;BlogModule&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下部分解释了约定和配置.</p>\n<h4 id=\"固有的注册类型\"><a href=\"#固有的注册类型\" class=\"headerlink\" title=\"固有的注册类型\"></a>固有的注册类型</h4><p>一些特定类型会默认注册到依赖注入.例子:</p>\n<ul>\n<li>模块类注册为singleton.</li>\n<li>MVC控制器（继承<code>Controller</code>或<code>AbpController</code>）被注册为transient.</li>\n<li>MVC页面模型（继承<code>PageModel</code>或<code>AbpPageModel</code>）被注册为transient.</li>\n<li>MVC视图组件（继承<code>ViewComponent</code>或<code>AbpViewComponent</code>）被注册为transient.</li>\n<li>应用程序服务（实现<code>IApplicationService</code>接口或继承<code>ApplicationService</code>类）注册为transient.</li>\n<li>存储库（实现<code>IRepository</code>接口）注册为transient.</li>\n<li>域服务（实现<code>IDomainService</code>接口）注册为transient.</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogPostAppService</span> : <span class=\"title\">ApplicationService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BlogPostAppService</code> 由于它是从已知的基类派生的,因此会自动注册为transient生命周期.</p>\n<h4 id=\"依赖接口\"><a href=\"#依赖接口\" class=\"headerlink\" title=\"依赖接口\"></a>依赖接口</h4><p>如果实现这些接口,则会自动将类注册到依赖注入:</p>\n<ul>\n<li><code>ITransientDependency</code> 注册为transient生命周期.</li>\n<li><code>ISingletonDependency</code> 注册为singleton生命周期.</li>\n<li><code>IScopedDependency</code> 注册为scoped生命周期.</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span> : <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TaxCalculator</code>因为实现了<code>ITransientDependency</code>,所以它会自动注册为transient生命周期.</p>\n<h4 id=\"Dependency-特性\"><a href=\"#Dependency-特性\" class=\"headerlink\" title=\"Dependency 特性\"></a>Dependency 特性</h4><p>配置依赖注入服务的另一种方法是使用<code>DependencyAttribute</code>.它具有以下属性:</p>\n<ul>\n<li><code>Lifetime</code>: 注册的生命周期:Singleton,Transient或Scoped.</li>\n<li><code>TryRegister</code>: 设置<code>true</code>则只注册以前未注册的服务.使用IServiceCollection的TryAdd … 扩展方法.</li>\n<li><code>ReplaceServices</code>: 设置<code>true</code>则替换之前已经注册过的服务.使用IServiceCollection的Replace扩展方法.</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Dependency(ServiceLifetime.Transient, ReplaceServices = true)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果定义了<code>Lifetime</code>属性,则<code>Dependency</code>特性具有比其他依赖接口更高的优先级. </p>\n<h4 id=\"ExposeServices-特性\"><a href=\"#ExposeServices-特性\" class=\"headerlink\" title=\"ExposeServices 特性\"></a>ExposeServices 特性</h4><p><code>ExposeServicesAttribute</code>用于控制相关类提供了什么服务.例: </p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ExposeServices(typeof(ITaxCalculator))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span>: <span class=\"title\">ICalculator</span>, <span class=\"title\">ITaxCalculator</span>, <span class=\"title\">ICanCalculate</span>, <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TaxCalculator</code>类只公开<code>ITaxCalculator</code>接口.这意味着你只能注入<code>ITaxCalculator</code>,但不能注入<code>TaxCalculator</code>或<code>ICalculator</code>到你的应用程序中.</p>\n<h4 id=\"依照约定公开的服务\"><a href=\"#依照约定公开的服务\" class=\"headerlink\" title=\"依照约定公开的服务\"></a>依照约定公开的服务</h4><p>如果你未指定要公开的服务,则ABP依照约定公开服务.以上面定义的<code>TaxCalculator</code>为例:</p>\n<ul>\n<li>默认情况下,类本身是公开的.这意味着你可以按<code>TaxCalculator</code>类注入它.</li>\n<li>默认情况下,默认接口是公开的.默认接口是由命名约定确定.在这个例子中,<code>ICalculator</code>和<code>ITaxCalculator</code>是<code>TaxCalculator</code>的默认接口,但<code>ICanCalculate</code>不是.</li>\n</ul>\n<h4 id=\"组合到一起\"><a href=\"#组合到一起\" class=\"headerlink\" title=\"组合到一起\"></a>组合到一起</h4><p>只要有意义,特性和接口是可以组合在一起使用的.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Dependency(ReplaceServices = true)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ExposeServices(typeof(ITaxCalculator))</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxCalculator</span> : <span class=\"title\">ITaxCalculator</span>, <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手动注册\"><a href=\"#手动注册\" class=\"headerlink\" title=\"手动注册\"></a>手动注册</h4><p>在某些情况下,你可能需要向<code>IServiceCollection</code>手动注册服务,尤其是在需要使用自定义工厂方法或singleton实例时.在这种情况下,你可以像<a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\">Microsoft文档</a>描述的那样直接添加服务.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BlogModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//注册一个singleton实例</span></span><br><span class=\"line\">        context.Services.AddSingleton&lt;TaxCalculator&gt;(<span class=\"keyword\">new</span> TaxCalculator(taxRatio: <span class=\"number\">0.18</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册一个从IServiceProvider解析得来的工厂方法</span></span><br><span class=\"line\">        context.Services.AddScoped&lt;ITaxCalculator&gt;(sp =&gt; sp.GetRequiredService&lt;TaxCalculator&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注入依赖关系\"><a href=\"#注入依赖关系\" class=\"headerlink\" title=\"注入依赖关系\"></a>注入依赖关系</h3><p>使用已注册的服务有三种常用方法.</p>\n<h4 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h4><p>这是将服务注入类的最常用方法.例如:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TaxAppService</span> : <span class=\"title\">ApplicationService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ITaxCalculator _taxCalculator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaxAppService</span>(<span class=\"params\">ITaxCalculator taxCalculator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _taxCalculator = taxCalculator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...使用 _taxCalculator...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TaxAppService</code>在构造方法中得到<code>ITaxCalculator</code>.依赖注入系统在运行时自动提供所请求的服务.</p>\n<p>构造方法注入是将依赖项注入类的首选方式.这样,除非提供了所有构造方法注入的依赖项,否则无法构造类.因此,该类明确的声明了它必需的服务.</p>\n<h4 id=\"属性注入\"><a href=\"#属性注入\" class=\"headerlink\" title=\"属性注入\"></a>属性注入</h4><p>Microsoft依赖注入库不支持属性注入.但是,ABP可以与第三方DI提供商（例如<a href=\"https://autofac.org/\">Autofac</a>）集成,以实现属性注入.例:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyService</span> : <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ILogger&lt;MyService&gt; Logger &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyService</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Logger = NullLogger&lt;MyService&gt;.Instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...使用 Logger 写日志...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于属性注入依赖项,使用公开的setter声明公共属性.这允许DI框架在创建类之后设置它.</p>\n<p>属性注入依赖项通常被视为可选依赖项.这意味着没有它们,服务也可以正常工作.<code>Logger</code>就是这样的依赖项,<code>MyService</code>可以继续工作而无需日志记录.</p>\n<p>为了使依赖项成为可选的,我们通常会为依赖项设置默认&#x2F;后备(fallback)值.在此示例中,NullLogger用作后备.因此,如果DI框架或你在创建<code>MyService</code>后未设置Logger属性,则<code>MyService</code>依然可以工作但不写日志.</p>\n<p>属性注入的一个限制是你不能在构造函数中使用依赖项,因为它是在对象构造之后设置的.</p>\n<p>当你想要设计一个默认注入了一些公共服务的基类时,属性注入也很有用.如果你打算使用构造方法注入,那么所有派生类也应该将依赖的服务注入到它们自己的构造方法中,这使得开发更加困难.但是,对于非可选服务使用属性注入要非常小心,因为它使得类的要求难以清楚地看到.</p>\n<h4 id=\"从IServiceProvider解析服务\"><a href=\"#从IServiceProvider解析服务\" class=\"headerlink\" title=\"从IServiceProvider解析服务\"></a>从IServiceProvider解析服务</h4><p>你可能希望直接从<code>IServiceProvider</code>解析服务.在这种情况下,你可以将<code>IServiceProvider</code>注入到你的类并使用<code>GetService</code>方法,如下所示:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyService</span> : <span class=\"title\">ITransientDependency</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IServiceProvider _serviceProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyService</span>(<span class=\"params\">IServiceProvider serviceProvider</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _serviceProvider = serviceProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> taxCalculator = _serviceProvider.GetService&lt;ITaxCalculator&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"释放-x2F-处理（Releasing-x2F-Disposing）服务\"><a href=\"#释放-x2F-处理（Releasing-x2F-Disposing）服务\" class=\"headerlink\" title=\"释放&#x2F;处理（Releasing&#x2F;Disposing）服务\"></a>释放&#x2F;处理（Releasing&#x2F;Disposing）服务</h4><p>如果你使用了构造函数或属性注入,则无需担心释放服务的资源.但是,如果你从<code>IServiceProvider</code>解析了服务,在某些情况下,你可能需要注意释放服务.</p>\n<p>ASP.NET Core会在当前HTTP请求结束时释放所有服务,即使你直接从<code>IServiceProvider</code>解析了服务（假设你注入了IServiceProvider）.但是,在某些情况下,你可能希望释放&#x2F;处理手动解析的服务:</p>\n<ul>\n<li>你的代码在AspNet Core请求之外执行,执行者没有处理服务范围.</li>\n<li>你只有对根服务提供者的引用.</li>\n<li>你可能希望立即释放和处理服务（例如,你可能会创建太多具有大量内存占用且不想过度使用内存的服务）.</li>\n</ul>\n<p>在任何情况下,你都可以使用这样的<code>using</code>代码块来安全地立即释放服务:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> scope = _serviceProvider.CreateScope())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> service1 = scope.ServiceProvider.GetService&lt;IMyService1&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> service2 = scope.ServiceProvider.GetService&lt;IMyService2&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个服务在创建的scope被处理时（在using块的末尾）释放.</p>\n<h2 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h2><h3 id=\"IServiceCollection-OnRegistred-事件\"><a href=\"#IServiceCollection-OnRegistred-事件\" class=\"headerlink\" title=\"IServiceCollection.OnRegistred 事件\"></a>IServiceCollection.OnRegistred 事件</h3><p>你可能想在注册到依赖注入的每个服务上执行一个操作, 在你的模块的 <code>PreConfigureServices</code> 方法中, 使用 <code>OnRegistred</code> 方法注册一个回调(callback) , 如下所示:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.Services.OnRegistred(ctx =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = ctx.ImplementationType;</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ImplementationType</code> 提供了服务类型. 该回调(callback)通常用于向服务添加拦截器. 例如:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> : <span class=\"title\">AbpModule</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">PreConfigureServices</span>(<span class=\"params\">ServiceConfigurationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.Services.OnRegistred(ctx =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctx.ImplementationType.IsDefined(<span class=\"keyword\">typeof</span>(MyLogAttribute), <span class=\"literal\">true</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ctx.Interceptors.TryAdd&lt;MyLogInterceptor&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个示例判断一个服务类是否具有 <code>MyLogAttribute</code> 特性, 如果有的话就添加一个 <code>MyLogInterceptor</code> 到拦截器集合中.</p>\n<blockquote>\n<p>注意, 如果服务类公开了多于一个服务或接口, <code>OnRegistred</code> 回调(callback)可能被同一服务类多次调用. 因此, 较安全的方法是使用 <code>Interceptors.TryAdd</code> 方法而不是 <code>Interceptors.Add</code> 方法. 请参阅动态代理(dynamic proxying)&#x2F;拦截器 <a href=\"Dynamic-Proxying-Interceptors.md\">文档</a>.</p>\n</blockquote>\n<h2 id=\"第三方提供程序\"><a href=\"#第三方提供程序\" class=\"headerlink\" title=\"第三方提供程序\"></a>第三方提供程序</h2><p>虽然ABP框架没有对任何第三方DI提供程序的核心依赖, 但它必须使用一个提供程序来支持动态代理(dynamic proxying)和一些高级特性以便ABP特性能正常工作.</p>\n<p>启动模板中已安装了Autofac. 更多信息请参阅 <a href=\"Autofac-Integration.md\">Autofac 集成</a> 文档.</p>\n<h3 id=\"请参阅\"><a href=\"#请参阅\" class=\"headerlink\" title=\"请参阅\"></a>请参阅</h3><ul>\n<li><a href=\"https://blog.abp.io/asp-net-core-dependency-injection-best-practices-tips-tricks\">ASP.NET Core依赖注入最佳实践,提示和技巧</a></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"di","path":"2022/08/24/di/","eyeCatchImage":null,"excerpt":"abp使用","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:24:05.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:24:05.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"abp","tags":["dotnet"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"docker-compose","author":"wuxinheng","date":"2022-07-18T15:37:38.000Z","description":"本文从具体使用角度简单介绍了如何去使用docker-compose 部署项目和修改项目文件","_content":"\n### 编写docker-compose.yml\n\n> 项目文件结构本来不是现在这个样子。由于使用的是dotnet Wtm开发框架，生成代码的原因。对文件结构进行了改动。\n>\n> Dockerfile是在没有移动之前就创建了。如果解决方案文件在目标项目文件目录中，或者低于其他引用的项目文件VS提示无法添加。但是，不要慌！\n> 这根本不是问题。我们自己可以仿写一个Dockerfile。这个过程中需要注意两点。1、修改目标项目需要的文件复制信息（包括引用文件）和项目信息2、打包容器是否需要指定Dockerfile文件。\n> 可以在Dokcerfile中指定国内镜像。方便安装一些其他插件\n>\n> Docker-compose。应为好像也跟Dockerfile一样的原因。可能提示你失败之后文件出现在目标项目文件夹中。但是肯定不对！\n> 我是自己新建一个项目创建的Docker-compose。然后把项目文件和.yml文件粘贴到整个项目文件夹中。然后到vs添加docker-compse项目\n>\n> 然后根据自己需求修改配置文件即可。\n\n#### 演示项目文件目录说明\n\n```shell\nC:.\n├─Property  # 多租户\n│  ├─ShuWen.Property # 展示层\n│  │ ├─Dockerfile # 构建镜像的文本文件\n│  │ ├─appsettings.json # 应用程序配置文件\n│  │ ├─nuget.config # 私有化nuget配置文件\n│  │ ├─ShuWen.Property.sln # ShuWen.Property 解决方案\n│  └─ShuWen.Property.ViewModel # 业务逻辑\n├─PropertyHost # 管理平台\n│  ├─Shuwen.Property.Host # 展示层\n│  │ ├─Dockerfile # 构建镜像的文本文件\n│  │ ├─appsettings.json # 应用程序配置文件\n│  │ ├─nuget.config # 私有化nuget配置文件\n│  │ ├─ShuWen.Property.Host.sln # ShuWen.Property.Host 解决方案\n│  └─Shuwen.Property.Host.ViewModel # 业务逻辑\n├─ShuWen.Property.DataAccess # 数据访问\n├─ShuWen.Property.Model # 通用实体\n├─src # 框架源代码\n├─docker-compose.dcproj # 不是dotnet开发可以忽略\n├─docker-compose.override.yml # 编排文件，override 开发应该都懂\n└─docker-compose.yml # 编排文件\n```\n\n##### ShuWen.Property/Dockerfile\n\n```ini\nFROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base\n\n# 更新 apt-get,简单的说容器内核基于Ubuntu。\nRUN apt-get update \n# 更换国内镜像\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n  echo \"deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n  echo \"deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list\n# Linux上是没有GDI+，于是 Mono 团队使用C语言实现了 GDI+ 接口，提供对非 Windows 系统的 GDI+ 接口访问能力，这个就是libgdiplus\nRUN  apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n\nWORKDIR /app\nEXPOSE 80\nFROM mcr.microsoft.com/dotnet/sdk:5.0 AS build\n\nWORKDIR /src\nCOPY [\"Property/ShuWen.Property/ShuWen.Property.csproj\", \"Property/ShuWen.Property/\"]\nCOPY [\"Property/ShuWen.Property/nuget.config\", \"Property/ShuWen.Property/\"]\n\nCOPY [\"src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj\", \"src/WalkingTec.Mvvm.TagHelpers.LayUI/\"]\nCOPY [\"src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj\", \"src/WalkingTec.Mvvm.Core/\"]\nCOPY [\"src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj\", \"src/WalkingTec.Mvvm.Mvc/\"]\n\n\nCOPY [\"ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj\", \"ShuWen.Property.DataAccess/\"]\n\nCOPY [\"ShuWen.Property.Model/ShuWen.Property.Model.csproj\", \"ShuWen.Property.Model/\"]\n\nCOPY [\"Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj\", \"Property/ShuWen.Property.ViewModel/\"]\n\nRUN dotnet restore \"Property/ShuWen.Property/ShuWen.Property.csproj\"  --configfile \"Property/ShuWen.Property/nuget.config\"\n\nCOPY . .\nWORKDIR \"Property/ShuWen.Property/\"\nRUN dotnet build \"ShuWen.Property.csproj\" -c Release -o /app/build\n\nFROM build AS publish\nRUN dotnet publish \"ShuWen.Property.csproj\" -c Release -o /app/publish\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"ShuWen.Property.dll\"]\n```\n\n##### nuget.config\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<packageSources>\n\t\t<add key=\"Nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n\t\t<add key=\"Baget\" value=\"http://ip:5555/v3/index.json\" />\n\t</packageSources>\n</configuration>\n```\n\n##### docker-compose.yml\n\n```shell\nversion: '3.4'\n\nservices:\n  shuwen.property:\n    image: ${DOCKER_REGISTRY-}shuwen.property # 镜像名称\n    build:\n      context: .\n      dockerfile: Property/ShuWen.Property/Dockerfile #docker文件地址\n    ports: \n      - \"5001:80\"\t# 主机端口：容器端口\n      \n  shuwen.property.host:\n    image: ${DOCKER_REGISTRY-}shuwen.property.host\n    build:\n      context: .\n      dockerfile: PropertyHost/Shuwen.Property.Host/Dockerfile\n    ports: \n      - \"5002:80\"\n\n```\n\n##### docker-compose.override.yml\n\n```shell\nversion: '3.4'\n\nservices:\n  shuwen.property:\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ASPNETCORE_URLS=http://+:80\t# 运行地址,加上443要求使用ssl，我就删除了，后期通过nginx来处理吧\n      # - ASPNETCORE_URLS=https://+:443;http://+:80\n    ports: \n      - \"5001:80\" # 主机端口：容器端口\n    volumes:\n      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro\n      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro\n  shuwen.property.host:\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ASPNETCORE_URLS=http://+:80\n      # - ASPNETCORE_URLS=https://+:443;http://+:80\n    ports: \n      - \"5002:80\"\n    volumes:\n      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro\n      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro\n```\n\n### 安装\n\n> 不建议使用pip安装，经常报错。能解决报错除外！\n\n```shell\n# github太慢使用下面daocloud地址\nsudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n# daocloud地址\nsudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n# 添加可执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n# 验证\ndocker-compose --version\n```\n\n### 打包\n\n```shell\ndocker-compose build\n```\n\n### 运行\n\n```shell\ndocker-compose up -d\n```\n\n","source":"_posts/docker-compose.md","raw":"---\ntitle: docker-compose\nauthor: wuxinheng\ndate: 2022-07-18 23:37:38\ndescription: 本文从具体使用角度简单介绍了如何去使用docker-compose 部署项目和修改项目文件\ncategories:\n  - docker\ntags:\n  - docker-compose\n  - dotnet\n---\n\n### 编写docker-compose.yml\n\n> 项目文件结构本来不是现在这个样子。由于使用的是dotnet Wtm开发框架，生成代码的原因。对文件结构进行了改动。\n>\n> Dockerfile是在没有移动之前就创建了。如果解决方案文件在目标项目文件目录中，或者低于其他引用的项目文件VS提示无法添加。但是，不要慌！\n> 这根本不是问题。我们自己可以仿写一个Dockerfile。这个过程中需要注意两点。1、修改目标项目需要的文件复制信息（包括引用文件）和项目信息2、打包容器是否需要指定Dockerfile文件。\n> 可以在Dokcerfile中指定国内镜像。方便安装一些其他插件\n>\n> Docker-compose。应为好像也跟Dockerfile一样的原因。可能提示你失败之后文件出现在目标项目文件夹中。但是肯定不对！\n> 我是自己新建一个项目创建的Docker-compose。然后把项目文件和.yml文件粘贴到整个项目文件夹中。然后到vs添加docker-compse项目\n>\n> 然后根据自己需求修改配置文件即可。\n\n#### 演示项目文件目录说明\n\n```shell\nC:.\n├─Property  # 多租户\n│  ├─ShuWen.Property # 展示层\n│  │ ├─Dockerfile # 构建镜像的文本文件\n│  │ ├─appsettings.json # 应用程序配置文件\n│  │ ├─nuget.config # 私有化nuget配置文件\n│  │ ├─ShuWen.Property.sln # ShuWen.Property 解决方案\n│  └─ShuWen.Property.ViewModel # 业务逻辑\n├─PropertyHost # 管理平台\n│  ├─Shuwen.Property.Host # 展示层\n│  │ ├─Dockerfile # 构建镜像的文本文件\n│  │ ├─appsettings.json # 应用程序配置文件\n│  │ ├─nuget.config # 私有化nuget配置文件\n│  │ ├─ShuWen.Property.Host.sln # ShuWen.Property.Host 解决方案\n│  └─Shuwen.Property.Host.ViewModel # 业务逻辑\n├─ShuWen.Property.DataAccess # 数据访问\n├─ShuWen.Property.Model # 通用实体\n├─src # 框架源代码\n├─docker-compose.dcproj # 不是dotnet开发可以忽略\n├─docker-compose.override.yml # 编排文件，override 开发应该都懂\n└─docker-compose.yml # 编排文件\n```\n\n##### ShuWen.Property/Dockerfile\n\n```ini\nFROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base\n\n# 更新 apt-get,简单的说容器内核基于Ubuntu。\nRUN apt-get update \n# 更换国内镜像\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n  echo \"deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n  echo \"deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n  echo \"deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list\n# Linux上是没有GDI+，于是 Mono 团队使用C语言实现了 GDI+ 接口，提供对非 Windows 系统的 GDI+ 接口访问能力，这个就是libgdiplus\nRUN  apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n\nWORKDIR /app\nEXPOSE 80\nFROM mcr.microsoft.com/dotnet/sdk:5.0 AS build\n\nWORKDIR /src\nCOPY [\"Property/ShuWen.Property/ShuWen.Property.csproj\", \"Property/ShuWen.Property/\"]\nCOPY [\"Property/ShuWen.Property/nuget.config\", \"Property/ShuWen.Property/\"]\n\nCOPY [\"src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj\", \"src/WalkingTec.Mvvm.TagHelpers.LayUI/\"]\nCOPY [\"src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj\", \"src/WalkingTec.Mvvm.Core/\"]\nCOPY [\"src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj\", \"src/WalkingTec.Mvvm.Mvc/\"]\n\n\nCOPY [\"ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj\", \"ShuWen.Property.DataAccess/\"]\n\nCOPY [\"ShuWen.Property.Model/ShuWen.Property.Model.csproj\", \"ShuWen.Property.Model/\"]\n\nCOPY [\"Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj\", \"Property/ShuWen.Property.ViewModel/\"]\n\nRUN dotnet restore \"Property/ShuWen.Property/ShuWen.Property.csproj\"  --configfile \"Property/ShuWen.Property/nuget.config\"\n\nCOPY . .\nWORKDIR \"Property/ShuWen.Property/\"\nRUN dotnet build \"ShuWen.Property.csproj\" -c Release -o /app/build\n\nFROM build AS publish\nRUN dotnet publish \"ShuWen.Property.csproj\" -c Release -o /app/publish\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"ShuWen.Property.dll\"]\n```\n\n##### nuget.config\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<packageSources>\n\t\t<add key=\"Nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n\t\t<add key=\"Baget\" value=\"http://ip:5555/v3/index.json\" />\n\t</packageSources>\n</configuration>\n```\n\n##### docker-compose.yml\n\n```shell\nversion: '3.4'\n\nservices:\n  shuwen.property:\n    image: ${DOCKER_REGISTRY-}shuwen.property # 镜像名称\n    build:\n      context: .\n      dockerfile: Property/ShuWen.Property/Dockerfile #docker文件地址\n    ports: \n      - \"5001:80\"\t# 主机端口：容器端口\n      \n  shuwen.property.host:\n    image: ${DOCKER_REGISTRY-}shuwen.property.host\n    build:\n      context: .\n      dockerfile: PropertyHost/Shuwen.Property.Host/Dockerfile\n    ports: \n      - \"5002:80\"\n\n```\n\n##### docker-compose.override.yml\n\n```shell\nversion: '3.4'\n\nservices:\n  shuwen.property:\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ASPNETCORE_URLS=http://+:80\t# 运行地址,加上443要求使用ssl，我就删除了，后期通过nginx来处理吧\n      # - ASPNETCORE_URLS=https://+:443;http://+:80\n    ports: \n      - \"5001:80\" # 主机端口：容器端口\n    volumes:\n      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro\n      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro\n  shuwen.property.host:\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ASPNETCORE_URLS=http://+:80\n      # - ASPNETCORE_URLS=https://+:443;http://+:80\n    ports: \n      - \"5002:80\"\n    volumes:\n      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro\n      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro\n```\n\n### 安装\n\n> 不建议使用pip安装，经常报错。能解决报错除外！\n\n```shell\n# github太慢使用下面daocloud地址\nsudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n# daocloud地址\nsudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n# 添加可执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n# 验证\ndocker-compose --version\n```\n\n### 打包\n\n```shell\ndocker-compose build\n```\n\n### 运行\n\n```shell\ndocker-compose up -d\n```\n\n","slug":"docker-compose","published":1,"updated":"2023-09-24T07:38:31.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhe000gowtkgolvdgzq","content":"<h3 id=\"编写docker-compose-yml\"><a href=\"#编写docker-compose-yml\" class=\"headerlink\" title=\"编写docker-compose.yml\"></a>编写docker-compose.yml</h3><blockquote>\n<p>项目文件结构本来不是现在这个样子。由于使用的是dotnet Wtm开发框架，生成代码的原因。对文件结构进行了改动。</p>\n<p>Dockerfile是在没有移动之前就创建了。如果解决方案文件在目标项目文件目录中，或者低于其他引用的项目文件VS提示无法添加。但是，不要慌！<br>这根本不是问题。我们自己可以仿写一个Dockerfile。这个过程中需要注意两点。1、修改目标项目需要的文件复制信息（包括引用文件）和项目信息2、打包容器是否需要指定Dockerfile文件。<br>可以在Dokcerfile中指定国内镜像。方便安装一些其他插件</p>\n<p>Docker-compose。应为好像也跟Dockerfile一样的原因。可能提示你失败之后文件出现在目标项目文件夹中。但是肯定不对！<br>我是自己新建一个项目创建的Docker-compose。然后把项目文件和.yml文件粘贴到整个项目文件夹中。然后到vs添加docker-compse项目</p>\n<p>然后根据自己需求修改配置文件即可。</p>\n</blockquote>\n<h4 id=\"演示项目文件目录说明\"><a href=\"#演示项目文件目录说明\" class=\"headerlink\" title=\"演示项目文件目录说明\"></a>演示项目文件目录说明</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:.</span><br><span class=\"line\">├─Property  # 多租户</span><br><span class=\"line\">│  ├─ShuWen.Property # 展示层</span><br><span class=\"line\">│  │ ├─Dockerfile # 构建镜像的文本文件</span><br><span class=\"line\">│  │ ├─appsettings.json # 应用程序配置文件</span><br><span class=\"line\">│  │ ├─nuget.config # 私有化nuget配置文件</span><br><span class=\"line\">│  │ ├─ShuWen.Property.sln # ShuWen.Property 解决方案</span><br><span class=\"line\">│  └─ShuWen.Property.ViewModel # 业务逻辑</span><br><span class=\"line\">├─PropertyHost # 管理平台</span><br><span class=\"line\">│  ├─Shuwen.Property.Host # 展示层</span><br><span class=\"line\">│  │ ├─Dockerfile # 构建镜像的文本文件</span><br><span class=\"line\">│  │ ├─appsettings.json # 应用程序配置文件</span><br><span class=\"line\">│  │ ├─nuget.config # 私有化nuget配置文件</span><br><span class=\"line\">│  │ ├─ShuWen.Property.Host.sln # ShuWen.Property.Host 解决方案</span><br><span class=\"line\">│  └─Shuwen.Property.Host.ViewModel # 业务逻辑</span><br><span class=\"line\">├─ShuWen.Property.DataAccess # 数据访问</span><br><span class=\"line\">├─ShuWen.Property.Model # 通用实体</span><br><span class=\"line\">├─src # 框架源代码</span><br><span class=\"line\">├─docker-compose.dcproj # 不是dotnet开发可以忽略</span><br><span class=\"line\">├─docker-compose.override.yml # 编排文件，override 开发应该都懂</span><br><span class=\"line\">└─docker-compose.yml # 编排文件</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ShuWen-Property-x2F-Dockerfile\"><a href=\"#ShuWen-Property-x2F-Dockerfile\" class=\"headerlink\" title=\"ShuWen.Property&#x2F;Dockerfile\"></a>ShuWen.Property&#x2F;Dockerfile</h5><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新 apt-get,简单的说容器内核基于Ubuntu。</span></span><br><span class=\"line\">RUN apt-get update </span><br><span class=\"line\"><span class=\"comment\"># 更换国内镜像</span></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># Linux上是没有GDI+，于是 Mono 团队使用C语言实现了 GDI+ 接口，提供对非 Windows 系统的 GDI+ 接口访问能力，这个就是libgdiplus</span></span><br><span class=\"line\">RUN  apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\">COPY <span class=\"section\">[&quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;, &quot;Property/ShuWen.Property/&quot;]</span></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;Property/ShuWen.Property/nuget.config&quot;, &quot;Property/ShuWen.Property/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj&quot;, &quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/&quot;]</span></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj&quot;, &quot;src/WalkingTec.Mvvm.Core/&quot;]</span></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj&quot;, &quot;src/WalkingTec.Mvvm.Mvc/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj&quot;, &quot;ShuWen.Property.DataAccess/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;ShuWen.Property.Model/ShuWen.Property.Model.csproj&quot;, &quot;ShuWen.Property.Model/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj&quot;, &quot;Property/ShuWen.Property.ViewModel/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">RUN dotnet restore &quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;  --configfile &quot;Property/ShuWen.Property/nuget.config&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">WORKDIR &quot;Property/ShuWen.Property/&quot;</span><br><span class=\"line\">RUN dotnet build &quot;ShuWen.Property.csproj&quot; -c Release -o /app/build</span><br><span class=\"line\"></span><br><span class=\"line\">FROM build AS publish</span><br><span class=\"line\">RUN dotnet publish &quot;ShuWen.Property.csproj&quot; -c Release -o /app/publish</span><br><span class=\"line\"></span><br><span class=\"line\">FROM base AS final</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY <span class=\"attr\">--from</span>=publish /app/publish .</span><br><span class=\"line\">ENTRYPOINT <span class=\"section\">[&quot;dotnet&quot;, &quot;ShuWen.Property.dll&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"nuget-config\"><a href=\"#nuget-config\" class=\"headerlink\" title=\"nuget.config\"></a>nuget.config</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;packageSources&gt;</span><br><span class=\"line\">\t\t&lt;add key=&quot;Nuget.org&quot; value=&quot;https://api.nuget.org/v3/index.json&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;add key=&quot;Baget&quot; value=&quot;http://ip:5555/v3/index.json&quot; /&gt;</span><br><span class=\"line\">\t&lt;/packageSources&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  shuwen.property:</span><br><span class=\"line\">    image: $&#123;DOCKER_REGISTRY-&#125;shuwen.property # 镜像名称</span><br><span class=\"line\">    build:</span><br><span class=\"line\">      context: .</span><br><span class=\"line\">      dockerfile: Property/ShuWen.Property/Dockerfile #docker文件地址</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5001:80&quot;\t# 主机端口：容器端口</span><br><span class=\"line\">      </span><br><span class=\"line\">  shuwen.property.host:</span><br><span class=\"line\">    image: $&#123;DOCKER_REGISTRY-&#125;shuwen.property.host</span><br><span class=\"line\">    build:</span><br><span class=\"line\">      context: .</span><br><span class=\"line\">      dockerfile: PropertyHost/Shuwen.Property.Host/Dockerfile</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5002:80&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"docker-compose-override-yml\"><a href=\"#docker-compose-override-yml\" class=\"headerlink\" title=\"docker-compose.override.yml\"></a>docker-compose.override.yml</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  shuwen.property:</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - ASPNETCORE_ENVIRONMENT=Development</span><br><span class=\"line\">      - ASPNETCORE_URLS=http://+:80\t# 运行地址,加上443要求使用ssl，我就删除了，后期通过nginx来处理吧</span><br><span class=\"line\">      # - ASPNETCORE_URLS=https://+:443;http://+:80</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5001:80&quot; # 主机端口：容器端口</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/ASP.NET/Https:/root/.aspnet/https:ro</span><br><span class=\"line\">  shuwen.property.host:</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - ASPNETCORE_ENVIRONMENT=Development</span><br><span class=\"line\">      - ASPNETCORE_URLS=http://+:80</span><br><span class=\"line\">      # - ASPNETCORE_URLS=https://+:443;http://+:80</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5002:80&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/ASP.NET/Https:/root/.aspnet/https:ro</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>不建议使用pip安装，经常报错。能解决报错除外！</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">github太慢使用下面daocloud地址</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">daocloud地址</span></span><br><span class=\"line\">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加可执行权限</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证</span></span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"编写docker-compose-yml\"><a href=\"#编写docker-compose-yml\" class=\"headerlink\" title=\"编写docker-compose.yml\"></a>编写docker-compose.yml</h3><blockquote>\n<p>项目文件结构本来不是现在这个样子。由于使用的是dotnet Wtm开发框架，生成代码的原因。对文件结构进行了改动。</p>\n<p>Dockerfile是在没有移动之前就创建了。如果解决方案文件在目标项目文件目录中，或者低于其他引用的项目文件VS提示无法添加。但是，不要慌！<br>这根本不是问题。我们自己可以仿写一个Dockerfile。这个过程中需要注意两点。1、修改目标项目需要的文件复制信息（包括引用文件）和项目信息2、打包容器是否需要指定Dockerfile文件。<br>可以在Dokcerfile中指定国内镜像。方便安装一些其他插件</p>\n<p>Docker-compose。应为好像也跟Dockerfile一样的原因。可能提示你失败之后文件出现在目标项目文件夹中。但是肯定不对！<br>我是自己新建一个项目创建的Docker-compose。然后把项目文件和.yml文件粘贴到整个项目文件夹中。然后到vs添加docker-compse项目</p>\n<p>然后根据自己需求修改配置文件即可。</p>\n</blockquote>\n<h4 id=\"演示项目文件目录说明\"><a href=\"#演示项目文件目录说明\" class=\"headerlink\" title=\"演示项目文件目录说明\"></a>演示项目文件目录说明</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:.</span><br><span class=\"line\">├─Property  # 多租户</span><br><span class=\"line\">│  ├─ShuWen.Property # 展示层</span><br><span class=\"line\">│  │ ├─Dockerfile # 构建镜像的文本文件</span><br><span class=\"line\">│  │ ├─appsettings.json # 应用程序配置文件</span><br><span class=\"line\">│  │ ├─nuget.config # 私有化nuget配置文件</span><br><span class=\"line\">│  │ ├─ShuWen.Property.sln # ShuWen.Property 解决方案</span><br><span class=\"line\">│  └─ShuWen.Property.ViewModel # 业务逻辑</span><br><span class=\"line\">├─PropertyHost # 管理平台</span><br><span class=\"line\">│  ├─Shuwen.Property.Host # 展示层</span><br><span class=\"line\">│  │ ├─Dockerfile # 构建镜像的文本文件</span><br><span class=\"line\">│  │ ├─appsettings.json # 应用程序配置文件</span><br><span class=\"line\">│  │ ├─nuget.config # 私有化nuget配置文件</span><br><span class=\"line\">│  │ ├─ShuWen.Property.Host.sln # ShuWen.Property.Host 解决方案</span><br><span class=\"line\">│  └─Shuwen.Property.Host.ViewModel # 业务逻辑</span><br><span class=\"line\">├─ShuWen.Property.DataAccess # 数据访问</span><br><span class=\"line\">├─ShuWen.Property.Model # 通用实体</span><br><span class=\"line\">├─src # 框架源代码</span><br><span class=\"line\">├─docker-compose.dcproj # 不是dotnet开发可以忽略</span><br><span class=\"line\">├─docker-compose.override.yml # 编排文件，override 开发应该都懂</span><br><span class=\"line\">└─docker-compose.yml # 编排文件</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ShuWen-Property-x2F-Dockerfile\"><a href=\"#ShuWen-Property-x2F-Dockerfile\" class=\"headerlink\" title=\"ShuWen.Property&#x2F;Dockerfile\"></a>ShuWen.Property&#x2F;Dockerfile</h5><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新 apt-get,简单的说容器内核基于Ubuntu。</span></span><br><span class=\"line\">RUN apt-get update </span><br><span class=\"line\"><span class=\"comment\"># 更换国内镜像</span></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">  echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># Linux上是没有GDI+，于是 Mono 团队使用C语言实现了 GDI+ 接口，提供对非 Windows 系统的 GDI+ 接口访问能力，这个就是libgdiplus</span></span><br><span class=\"line\">RUN  apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\">COPY <span class=\"section\">[&quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;, &quot;Property/ShuWen.Property/&quot;]</span></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;Property/ShuWen.Property/nuget.config&quot;, &quot;Property/ShuWen.Property/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj&quot;, &quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/&quot;]</span></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj&quot;, &quot;src/WalkingTec.Mvvm.Core/&quot;]</span></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj&quot;, &quot;src/WalkingTec.Mvvm.Mvc/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj&quot;, &quot;ShuWen.Property.DataAccess/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;ShuWen.Property.Model/ShuWen.Property.Model.csproj&quot;, &quot;ShuWen.Property.Model/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">COPY <span class=\"section\">[&quot;Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj&quot;, &quot;Property/ShuWen.Property.ViewModel/&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">RUN dotnet restore &quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;  --configfile &quot;Property/ShuWen.Property/nuget.config&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">WORKDIR &quot;Property/ShuWen.Property/&quot;</span><br><span class=\"line\">RUN dotnet build &quot;ShuWen.Property.csproj&quot; -c Release -o /app/build</span><br><span class=\"line\"></span><br><span class=\"line\">FROM build AS publish</span><br><span class=\"line\">RUN dotnet publish &quot;ShuWen.Property.csproj&quot; -c Release -o /app/publish</span><br><span class=\"line\"></span><br><span class=\"line\">FROM base AS final</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY <span class=\"attr\">--from</span>=publish /app/publish .</span><br><span class=\"line\">ENTRYPOINT <span class=\"section\">[&quot;dotnet&quot;, &quot;ShuWen.Property.dll&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"nuget-config\"><a href=\"#nuget-config\" class=\"headerlink\" title=\"nuget.config\"></a>nuget.config</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;packageSources&gt;</span><br><span class=\"line\">\t\t&lt;add key=&quot;Nuget.org&quot; value=&quot;https://api.nuget.org/v3/index.json&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;add key=&quot;Baget&quot; value=&quot;http://ip:5555/v3/index.json&quot; /&gt;</span><br><span class=\"line\">\t&lt;/packageSources&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  shuwen.property:</span><br><span class=\"line\">    image: $&#123;DOCKER_REGISTRY-&#125;shuwen.property # 镜像名称</span><br><span class=\"line\">    build:</span><br><span class=\"line\">      context: .</span><br><span class=\"line\">      dockerfile: Property/ShuWen.Property/Dockerfile #docker文件地址</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5001:80&quot;\t# 主机端口：容器端口</span><br><span class=\"line\">      </span><br><span class=\"line\">  shuwen.property.host:</span><br><span class=\"line\">    image: $&#123;DOCKER_REGISTRY-&#125;shuwen.property.host</span><br><span class=\"line\">    build:</span><br><span class=\"line\">      context: .</span><br><span class=\"line\">      dockerfile: PropertyHost/Shuwen.Property.Host/Dockerfile</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5002:80&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"docker-compose-override-yml\"><a href=\"#docker-compose-override-yml\" class=\"headerlink\" title=\"docker-compose.override.yml\"></a>docker-compose.override.yml</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  shuwen.property:</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - ASPNETCORE_ENVIRONMENT=Development</span><br><span class=\"line\">      - ASPNETCORE_URLS=http://+:80\t# 运行地址,加上443要求使用ssl，我就删除了，后期通过nginx来处理吧</span><br><span class=\"line\">      # - ASPNETCORE_URLS=https://+:443;http://+:80</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5001:80&quot; # 主机端口：容器端口</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/ASP.NET/Https:/root/.aspnet/https:ro</span><br><span class=\"line\">  shuwen.property.host:</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - ASPNETCORE_ENVIRONMENT=Development</span><br><span class=\"line\">      - ASPNETCORE_URLS=http://+:80</span><br><span class=\"line\">      # - ASPNETCORE_URLS=https://+:443;http://+:80</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - &quot;5002:80&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span><br><span class=\"line\">      - $&#123;APPDATA&#125;/ASP.NET/Https:/root/.aspnet/https:ro</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>不建议使用pip安装，经常报错。能解决报错除外！</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">github太慢使用下面daocloud地址</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">daocloud地址</span></span><br><span class=\"line\">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加可执行权限</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证</span></span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"docker-compose","path":"2022/07/18/docker-compose/","eyeCatchImage":null,"excerpt":"本文从具体使用角度简单介绍了如何去使用docker-compose 部署项目和修改项目文件","date":{"_isAMomentObject":true,"_i":"2022-07-18T15:37:38.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-18T15:37:38.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["dotnet","docker-compose"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"docker-machine[官方弃用]","author":"wuxinheng","description":"好消息，在我写这篇文档得时候，最有一个问题一直没有解决。我就去了github上发现这个项目21年8月已经停更了。微软将docker desktop做为替代品。因为这篇文章记录怎么解决了电脑开启虚拟化cpu问题我选择保留这篇文章。docker系列在这也算短暂的完结。","date":"2022-07-25T08:39:00.000Z","_content":"## docker-machine[官方弃用]\n\n> 好消息，在我写这篇文档得时候，最有一个问题一直没有解决。我就去了github上发现这个项目21年8月已经停更了。微软将docker desktop做为替代品。\n> 因为这篇文章记录怎么解决了电脑开启虚拟化cpu问题我选择保留这篇文章\n\n安装\n\n```shell\ncurl -L https://github.com/docker/machine/releases/download/v0.12.0/docker-machine-`uname -s`-`uname -m` > /tmp/docker-machine\nchmod +x /tmp/docker-machine\nsudo mv /tmp/docker-machine /usr/local/bin/docker-machine\n```\n\n验证\n\n```shell\ndocker-machine -v\n```\n\n安装virtualbox\n\n1.在/etc/yum.repos.d/目录下新建virtualbox.repo并写入如下内容\n\n[virtualbox]\nname=Oracle Linux / RHEL / CentOS-$releasever / $basearch - VirtualBox\nbaseurl=http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://www.virtualbox.org/download/oracle_vbox.asc\n\n2.更新yum缓存\n\nyum clean all\n\nyum makecache\n\n3.安装virtualbox\n\nyum install VirtualBox-6.1\n\n4.下载boot2docker.iso\n\nboot2docker.iso 必须是命令行提示的版本\n\n参考：[Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)](https://www.cnblogs.com/xishuai/p/docker-swarm.html)\n\n创建\n\n```\ndocker-machine create -d virtualbox default\n```\n\n启动\n\n> 启动出现设置网络被拒绝，暂时还没解决，先到这\n\n```shell\ndocker-machine start default\n```\n\n暂停\n\n```\ndocker-machine stop default\n```\n\n\n\n### docker-machine 常用命令\n\n| 命令                   | 说明                                        |\n| ---------------------- | ------------------------------------------- |\n| docker-machine create  | 创建一个 Docker 主机（常用`-d virtualbox`） |\n| docker-machine ls      | 查看所有的 Docker 主机                      |\n| docker-machine ssh     | SSH 到主机上执行命令                        |\n| docker-machine env     | 显示连接到某个主机需要的环境变量            |\n| docker-machine inspect | 输出主机更多信息                            |\n| docker-machine kill    | 停止某个主机                                |\n| docker-machine restart | 重启某台主机                                |\n| docker-machine rm      | 删除某台主机                                |\n| docker-machine scp     | 在主机之间复制文件                          |\n| docker-machine start   | 启动一个主机                                |\n| docker-machine status  | 查看主机状态                                |\n| docker-machine stop    | 停止一个主机                                |\n\n[docker创建本地主机实例Virtualbox 驱动出错 - JK_night - 博客园 (cnblogs.com)](https://www.cnblogs.com/effortday/p/15026423.html)\n\n没有再深化了,创建虚拟机提示virtualbox不存在，不过我也看见有人使用其他的虚拟机驱动是可以的具体没试过。我用自己的电脑开启VTD之后还是不行。服务器也试过了。这一块等有机会吧再补充吧。\n\n补充：\n\n这里有很多地方需要修改才能启动vm虚拟化引擎\n\n1.修改BOIS\n2.关闭Hyper-V\n3.关闭Windows沙盒\n4.关闭Windows虚拟机监控程序平台\n5.内核隔离关闭\n\n中间可能需要多次重启。需要停掉虚拟机才能修改，挂起是不行的\n\n[win11系统vmware虚拟机报错“不支持嵌套虚拟化”问题解决方案汇总_小へ斌斌丶呀~的博客-CSDN博客_vmware在此主机上不支持嵌套虚拟化](https://blog.csdn.net/qq_44777532/article/details/124662130)","source":"_posts/docker-machine.md","raw":"---\ntitle: 'docker-machine[官方弃用]'\nauthor: wuxinheng\ndescription: >-\n  好消息，在我写这篇文档得时候，最有一个问题一直没有解决。我就去了github上发现这个项目21年8月已经停更了。微软将docker\n  desktop做为替代品。因为这篇文章记录怎么解决了电脑开启虚拟化cpu问题我选择保留这篇文章。docker系列在这也算短暂的完结。\ncategories:\n  - docker\ntags:\n  - docker-machine\n  - 电脑开启虚拟换CPU\n  - VT-x\n  - VT-d\n  - vm\n  - 虚拟机\ndate: 2022-07-25 16:39:00\n---\n## docker-machine[官方弃用]\n\n> 好消息，在我写这篇文档得时候，最有一个问题一直没有解决。我就去了github上发现这个项目21年8月已经停更了。微软将docker desktop做为替代品。\n> 因为这篇文章记录怎么解决了电脑开启虚拟化cpu问题我选择保留这篇文章\n\n安装\n\n```shell\ncurl -L https://github.com/docker/machine/releases/download/v0.12.0/docker-machine-`uname -s`-`uname -m` > /tmp/docker-machine\nchmod +x /tmp/docker-machine\nsudo mv /tmp/docker-machine /usr/local/bin/docker-machine\n```\n\n验证\n\n```shell\ndocker-machine -v\n```\n\n安装virtualbox\n\n1.在/etc/yum.repos.d/目录下新建virtualbox.repo并写入如下内容\n\n[virtualbox]\nname=Oracle Linux / RHEL / CentOS-$releasever / $basearch - VirtualBox\nbaseurl=http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://www.virtualbox.org/download/oracle_vbox.asc\n\n2.更新yum缓存\n\nyum clean all\n\nyum makecache\n\n3.安装virtualbox\n\nyum install VirtualBox-6.1\n\n4.下载boot2docker.iso\n\nboot2docker.iso 必须是命令行提示的版本\n\n参考：[Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)](https://www.cnblogs.com/xishuai/p/docker-swarm.html)\n\n创建\n\n```\ndocker-machine create -d virtualbox default\n```\n\n启动\n\n> 启动出现设置网络被拒绝，暂时还没解决，先到这\n\n```shell\ndocker-machine start default\n```\n\n暂停\n\n```\ndocker-machine stop default\n```\n\n\n\n### docker-machine 常用命令\n\n| 命令                   | 说明                                        |\n| ---------------------- | ------------------------------------------- |\n| docker-machine create  | 创建一个 Docker 主机（常用`-d virtualbox`） |\n| docker-machine ls      | 查看所有的 Docker 主机                      |\n| docker-machine ssh     | SSH 到主机上执行命令                        |\n| docker-machine env     | 显示连接到某个主机需要的环境变量            |\n| docker-machine inspect | 输出主机更多信息                            |\n| docker-machine kill    | 停止某个主机                                |\n| docker-machine restart | 重启某台主机                                |\n| docker-machine rm      | 删除某台主机                                |\n| docker-machine scp     | 在主机之间复制文件                          |\n| docker-machine start   | 启动一个主机                                |\n| docker-machine status  | 查看主机状态                                |\n| docker-machine stop    | 停止一个主机                                |\n\n[docker创建本地主机实例Virtualbox 驱动出错 - JK_night - 博客园 (cnblogs.com)](https://www.cnblogs.com/effortday/p/15026423.html)\n\n没有再深化了,创建虚拟机提示virtualbox不存在，不过我也看见有人使用其他的虚拟机驱动是可以的具体没试过。我用自己的电脑开启VTD之后还是不行。服务器也试过了。这一块等有机会吧再补充吧。\n\n补充：\n\n这里有很多地方需要修改才能启动vm虚拟化引擎\n\n1.修改BOIS\n2.关闭Hyper-V\n3.关闭Windows沙盒\n4.关闭Windows虚拟机监控程序平台\n5.内核隔离关闭\n\n中间可能需要多次重启。需要停掉虚拟机才能修改，挂起是不行的\n\n[win11系统vmware虚拟机报错“不支持嵌套虚拟化”问题解决方案汇总_小へ斌斌丶呀~的博客-CSDN博客_vmware在此主机上不支持嵌套虚拟化](https://blog.csdn.net/qq_44777532/article/details/124662130)","slug":"docker-machine","published":1,"updated":"2023-09-24T07:38:31.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhe000lowtk6k4saomm","content":"<h2 id=\"docker-machine-官方弃用\"><a href=\"#docker-machine-官方弃用\" class=\"headerlink\" title=\"docker-machine[官方弃用]\"></a>docker-machine[官方弃用]</h2><blockquote>\n<p>好消息，在我写这篇文档得时候，最有一个问题一直没有解决。我就去了github上发现这个项目21年8月已经停更了。微软将docker desktop做为替代品。<br>因为这篇文章记录怎么解决了电脑开启虚拟化cpu问题我选择保留这篇文章</p>\n</blockquote>\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/machine/releases/download/v0.12.0/docker-machine-`uname -s`-`uname -m` &gt; /tmp/docker-machine</span><br><span class=\"line\">chmod +x /tmp/docker-machine</span><br><span class=\"line\">sudo mv /tmp/docker-machine /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine -v</span><br></pre></td></tr></table></figure>\n\n<p>安装virtualbox</p>\n<p>1.在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下新建virtualbox.repo并写入如下内容</p>\n<p>[virtualbox]<br>name&#x3D;Oracle Linux &#x2F; RHEL &#x2F; CentOS-$releasever &#x2F; $basearch - VirtualBox<br>baseurl&#x3D;<a href=\"http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch\">http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch</a><br>enabled&#x3D;1<br>gpgcheck&#x3D;1<br>repo_gpgcheck&#x3D;1<br>gpgkey&#x3D;<a href=\"https://www.virtualbox.org/download/oracle_vbox.asc\">https://www.virtualbox.org/download/oracle_vbox.asc</a></p>\n<p>2.更新yum缓存</p>\n<p>yum clean all</p>\n<p>yum makecache</p>\n<p>3.安装virtualbox</p>\n<p>yum install VirtualBox-6.1</p>\n<p>4.下载boot2docker.iso</p>\n<p>boot2docker.iso 必须是命令行提示的版本</p>\n<p>参考：<a href=\"https://www.cnblogs.com/xishuai/p/docker-swarm.html\">Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)</a></p>\n<p>创建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d virtualbox default</span><br></pre></td></tr></table></figure>\n\n<p>启动</p>\n<blockquote>\n<p>启动出现设置网络被拒绝，暂时还没解决，先到这</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine start default</span><br></pre></td></tr></table></figure>\n\n<p>暂停</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine stop default</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-machine-常用命令\"><a href=\"#docker-machine-常用命令\" class=\"headerlink\" title=\"docker-machine 常用命令\"></a>docker-machine 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker-machine create</td>\n<td>创建一个 Docker 主机（常用<code>-d virtualbox</code>）</td>\n</tr>\n<tr>\n<td>docker-machine ls</td>\n<td>查看所有的 Docker 主机</td>\n</tr>\n<tr>\n<td>docker-machine ssh</td>\n<td>SSH 到主机上执行命令</td>\n</tr>\n<tr>\n<td>docker-machine env</td>\n<td>显示连接到某个主机需要的环境变量</td>\n</tr>\n<tr>\n<td>docker-machine inspect</td>\n<td>输出主机更多信息</td>\n</tr>\n<tr>\n<td>docker-machine kill</td>\n<td>停止某个主机</td>\n</tr>\n<tr>\n<td>docker-machine restart</td>\n<td>重启某台主机</td>\n</tr>\n<tr>\n<td>docker-machine rm</td>\n<td>删除某台主机</td>\n</tr>\n<tr>\n<td>docker-machine scp</td>\n<td>在主机之间复制文件</td>\n</tr>\n<tr>\n<td>docker-machine start</td>\n<td>启动一个主机</td>\n</tr>\n<tr>\n<td>docker-machine status</td>\n<td>查看主机状态</td>\n</tr>\n<tr>\n<td>docker-machine stop</td>\n<td>停止一个主机</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.cnblogs.com/effortday/p/15026423.html\">docker创建本地主机实例Virtualbox 驱动出错 - JK_night - 博客园 (cnblogs.com)</a></p>\n<p>没有再深化了,创建虚拟机提示virtualbox不存在，不过我也看见有人使用其他的虚拟机驱动是可以的具体没试过。我用自己的电脑开启VTD之后还是不行。服务器也试过了。这一块等有机会吧再补充吧。</p>\n<p>补充：</p>\n<p>这里有很多地方需要修改才能启动vm虚拟化引擎</p>\n<p>1.修改BOIS<br>2.关闭Hyper-V<br>3.关闭Windows沙盒<br>4.关闭Windows虚拟机监控程序平台<br>5.内核隔离关闭</p>\n<p>中间可能需要多次重启。需要停掉虚拟机才能修改，挂起是不行的</p>\n<p><a href=\"https://blog.csdn.net/qq_44777532/article/details/124662130\">win11系统vmware虚拟机报错“不支持嵌套虚拟化”问题解决方案汇总_小へ斌斌丶呀~的博客-CSDN博客_vmware在此主机上不支持嵌套虚拟化</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker-machine-官方弃用\"><a href=\"#docker-machine-官方弃用\" class=\"headerlink\" title=\"docker-machine[官方弃用]\"></a>docker-machine[官方弃用]</h2><blockquote>\n<p>好消息，在我写这篇文档得时候，最有一个问题一直没有解决。我就去了github上发现这个项目21年8月已经停更了。微软将docker desktop做为替代品。<br>因为这篇文章记录怎么解决了电脑开启虚拟化cpu问题我选择保留这篇文章</p>\n</blockquote>\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/machine/releases/download/v0.12.0/docker-machine-`uname -s`-`uname -m` &gt; /tmp/docker-machine</span><br><span class=\"line\">chmod +x /tmp/docker-machine</span><br><span class=\"line\">sudo mv /tmp/docker-machine /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine -v</span><br></pre></td></tr></table></figure>\n\n<p>安装virtualbox</p>\n<p>1.在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下新建virtualbox.repo并写入如下内容</p>\n<p>[virtualbox]<br>name&#x3D;Oracle Linux &#x2F; RHEL &#x2F; CentOS-$releasever &#x2F; $basearch - VirtualBox<br>baseurl&#x3D;<a href=\"http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch\">http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch</a><br>enabled&#x3D;1<br>gpgcheck&#x3D;1<br>repo_gpgcheck&#x3D;1<br>gpgkey&#x3D;<a href=\"https://www.virtualbox.org/download/oracle_vbox.asc\">https://www.virtualbox.org/download/oracle_vbox.asc</a></p>\n<p>2.更新yum缓存</p>\n<p>yum clean all</p>\n<p>yum makecache</p>\n<p>3.安装virtualbox</p>\n<p>yum install VirtualBox-6.1</p>\n<p>4.下载boot2docker.iso</p>\n<p>boot2docker.iso 必须是命令行提示的版本</p>\n<p>参考：<a href=\"https://www.cnblogs.com/xishuai/p/docker-swarm.html\">Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)</a></p>\n<p>创建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d virtualbox default</span><br></pre></td></tr></table></figure>\n\n<p>启动</p>\n<blockquote>\n<p>启动出现设置网络被拒绝，暂时还没解决，先到这</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine start default</span><br></pre></td></tr></table></figure>\n\n<p>暂停</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine stop default</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"docker-machine-常用命令\"><a href=\"#docker-machine-常用命令\" class=\"headerlink\" title=\"docker-machine 常用命令\"></a>docker-machine 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker-machine create</td>\n<td>创建一个 Docker 主机（常用<code>-d virtualbox</code>）</td>\n</tr>\n<tr>\n<td>docker-machine ls</td>\n<td>查看所有的 Docker 主机</td>\n</tr>\n<tr>\n<td>docker-machine ssh</td>\n<td>SSH 到主机上执行命令</td>\n</tr>\n<tr>\n<td>docker-machine env</td>\n<td>显示连接到某个主机需要的环境变量</td>\n</tr>\n<tr>\n<td>docker-machine inspect</td>\n<td>输出主机更多信息</td>\n</tr>\n<tr>\n<td>docker-machine kill</td>\n<td>停止某个主机</td>\n</tr>\n<tr>\n<td>docker-machine restart</td>\n<td>重启某台主机</td>\n</tr>\n<tr>\n<td>docker-machine rm</td>\n<td>删除某台主机</td>\n</tr>\n<tr>\n<td>docker-machine scp</td>\n<td>在主机之间复制文件</td>\n</tr>\n<tr>\n<td>docker-machine start</td>\n<td>启动一个主机</td>\n</tr>\n<tr>\n<td>docker-machine status</td>\n<td>查看主机状态</td>\n</tr>\n<tr>\n<td>docker-machine stop</td>\n<td>停止一个主机</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.cnblogs.com/effortday/p/15026423.html\">docker创建本地主机实例Virtualbox 驱动出错 - JK_night - 博客园 (cnblogs.com)</a></p>\n<p>没有再深化了,创建虚拟机提示virtualbox不存在，不过我也看见有人使用其他的虚拟机驱动是可以的具体没试过。我用自己的电脑开启VTD之后还是不行。服务器也试过了。这一块等有机会吧再补充吧。</p>\n<p>补充：</p>\n<p>这里有很多地方需要修改才能启动vm虚拟化引擎</p>\n<p>1.修改BOIS<br>2.关闭Hyper-V<br>3.关闭Windows沙盒<br>4.关闭Windows虚拟机监控程序平台<br>5.内核隔离关闭</p>\n<p>中间可能需要多次重启。需要停掉虚拟机才能修改，挂起是不行的</p>\n<p><a href=\"https://blog.csdn.net/qq_44777532/article/details/124662130\">win11系统vmware虚拟机报错“不支持嵌套虚拟化”问题解决方案汇总_小へ斌斌丶呀~的博客-CSDN博客_vmware在此主机上不支持嵌套虚拟化</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"docker-machine[官方弃用]","path":"2022/07/25/docker-machine/","eyeCatchImage":null,"excerpt":"好消息，在我写这篇文档得时候，最有一个问题一直没有解决。我就去了github上发现这个项目21年8月已经停更了。微软将docker desktop做为替代品。因为这篇文章记录怎么解决了电脑开启虚拟化cpu问题我选择保留这篇文章。docker系列在这也算短暂的完结。","date":{"_isAMomentObject":true,"_i":"2022-07-25T08:39:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-25T08:39:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["docker-machine","电脑开启虚拟换CPU","VT-x","VT-d","vm","虚拟机"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"docker-momeory","author":"wuxinheng","date":"2022-07-24T15:02:12.000Z","description":"docker容器的内存动态把控","_content":"\n### docker内存控制\n\ndocker容器默认继承主机所有内存这样非常不好。当内存足就会自动kill掉容器\n\n实际使用中发现jenkins容器多次被系统终止，因为是自己的服务器只有2G运存。我决定对服务其上的容器进行内存限制\n\n```shell\ndocker run -d --name jenkins -p 8081:8080 -m 512m --memory-swap 512m  -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts\n```\n\n| 名称、简写             | 默认 | 描述                                                         |\n| ---------------------- | ---- | ------------------------------------------------------------ |\n| `--memory`,`-m`        |      | 内存限制                                                     |\n| `--memory-reservation` |      | 内存软限制，单位和-m一致。当设置了这个参数以后，如果宿主机系统内存不足，有新的内存请求时刻，那么linux会尝试从设置了此参数的容器里回收内存，回收的办法就是swap了。那么如果此容器还在继续使用内存，那么此容器会遇到很大的性能下降。 |\n| `--memory-swap`        |      | 交换限制等于内存加交换：“-1”以启用无限制交换，配置容器可以设置的swap大小。此值为-m值加上能达到的swap区大小 |\n| `--memory-swappiness`  | `-1` | 调整容器内存交换（0 到 100）                                 |\n\n查看容器性能\n\n```shell\ndocker stats\n```","source":"_posts/docker-momeory.md","raw":"---\ntitle: docker-momeory\nauthor: wuxinheng\ndate: 2022-07-24 23:02:12\ndescription: docker容器的内存动态把控\ncategories:\n  - docker\ntags:\n  - momeory\n  - 容器内存控制\n---\n\n### docker内存控制\n\ndocker容器默认继承主机所有内存这样非常不好。当内存足就会自动kill掉容器\n\n实际使用中发现jenkins容器多次被系统终止，因为是自己的服务器只有2G运存。我决定对服务其上的容器进行内存限制\n\n```shell\ndocker run -d --name jenkins -p 8081:8080 -m 512m --memory-swap 512m  -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts\n```\n\n| 名称、简写             | 默认 | 描述                                                         |\n| ---------------------- | ---- | ------------------------------------------------------------ |\n| `--memory`,`-m`        |      | 内存限制                                                     |\n| `--memory-reservation` |      | 内存软限制，单位和-m一致。当设置了这个参数以后，如果宿主机系统内存不足，有新的内存请求时刻，那么linux会尝试从设置了此参数的容器里回收内存，回收的办法就是swap了。那么如果此容器还在继续使用内存，那么此容器会遇到很大的性能下降。 |\n| `--memory-swap`        |      | 交换限制等于内存加交换：“-1”以启用无限制交换，配置容器可以设置的swap大小。此值为-m值加上能达到的swap区大小 |\n| `--memory-swappiness`  | `-1` | 调整容器内存交换（0 到 100）                                 |\n\n查看容器性能\n\n```shell\ndocker stats\n```","slug":"docker-momeory","published":1,"updated":"2023-09-24T07:38:31.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhf000nowtk9crkdkde","content":"<h3 id=\"docker内存控制\"><a href=\"#docker内存控制\" class=\"headerlink\" title=\"docker内存控制\"></a>docker内存控制</h3><p>docker容器默认继承主机所有内存这样非常不好。当内存足就会自动kill掉容器</p>\n<p>实际使用中发现jenkins容器多次被系统终止，因为是自己的服务器只有2G运存。我决定对服务其上的容器进行内存限制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jenkins -p 8081:8080 -m 512m --memory-swap 512m  -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>名称、简写</th>\n<th>默认</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--memory</code>,<code>-m</code></td>\n<td></td>\n<td>内存限制</td>\n</tr>\n<tr>\n<td><code>--memory-reservation</code></td>\n<td></td>\n<td>内存软限制，单位和-m一致。当设置了这个参数以后，如果宿主机系统内存不足，有新的内存请求时刻，那么linux会尝试从设置了此参数的容器里回收内存，回收的办法就是swap了。那么如果此容器还在继续使用内存，那么此容器会遇到很大的性能下降。</td>\n</tr>\n<tr>\n<td><code>--memory-swap</code></td>\n<td></td>\n<td>交换限制等于内存加交换：“-1”以启用无限制交换，配置容器可以设置的swap大小。此值为-m值加上能达到的swap区大小</td>\n</tr>\n<tr>\n<td><code>--memory-swappiness</code></td>\n<td><code>-1</code></td>\n<td>调整容器内存交换（0 到 100）</td>\n</tr>\n</tbody></table>\n<p>查看容器性能</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"docker内存控制\"><a href=\"#docker内存控制\" class=\"headerlink\" title=\"docker内存控制\"></a>docker内存控制</h3><p>docker容器默认继承主机所有内存这样非常不好。当内存足就会自动kill掉容器</p>\n<p>实际使用中发现jenkins容器多次被系统终止，因为是自己的服务器只有2G运存。我决定对服务其上的容器进行内存限制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jenkins -p 8081:8080 -m 512m --memory-swap 512m  -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>名称、简写</th>\n<th>默认</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--memory</code>,<code>-m</code></td>\n<td></td>\n<td>内存限制</td>\n</tr>\n<tr>\n<td><code>--memory-reservation</code></td>\n<td></td>\n<td>内存软限制，单位和-m一致。当设置了这个参数以后，如果宿主机系统内存不足，有新的内存请求时刻，那么linux会尝试从设置了此参数的容器里回收内存，回收的办法就是swap了。那么如果此容器还在继续使用内存，那么此容器会遇到很大的性能下降。</td>\n</tr>\n<tr>\n<td><code>--memory-swap</code></td>\n<td></td>\n<td>交换限制等于内存加交换：“-1”以启用无限制交换，配置容器可以设置的swap大小。此值为-m值加上能达到的swap区大小</td>\n</tr>\n<tr>\n<td><code>--memory-swappiness</code></td>\n<td><code>-1</code></td>\n<td>调整容器内存交换（0 到 100）</td>\n</tr>\n</tbody></table>\n<p>查看容器性能</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"docker-momeory","path":"2022/07/24/docker-momeory/","eyeCatchImage":null,"excerpt":"docker容器的内存动态把控","date":{"_isAMomentObject":true,"_i":"2022-07-24T15:02:12.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-24T15:02:12.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["momeory","容器内存控制"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"docker-pack","author":"wuxinheng","date":"2022-07-24T15:01:47.000Z","description":"docker容器的打包成镜像，以及镜像的上传","_content":"### docker打包\n\n将容器打包到镜像\n\n```shell\n# docker commit [-m=\"提交的描述信息\"] [-a=\"创建者\"] 容器名称|容器ID 生成的镜像名[:标签名]\ndocker commit -m=\"use nginx deploy my-hexo-blog\" -a=\"wuxinheng\" hexo-blog wxh-hexo:1.0\n```\n\n保存镜像到本地\n\n```shell\n# docker save -o 保存的PathName 镜像名:标签\ndocker save -o /wxh-hexo.tar wxh-hexo:1.0\n```\n\n加载镜像文件\n\n```shell\n# docker load -i 镜像备份文件\ndocker load -i /wxh-hexo.tar\n```\n\ndocker登录\n\n```shell\n# 用户名就真是是用户名，不是邮箱\ndocker login\n# 验证\ndocker images ls\n```\n\n提交到镜像仓库\n\n```shell\n# 修改标签，会创建一个新的镜像\ndocker tag wxh-hexo:1.0  wuxinheng/wxh-hexo\n# 提交镜像，网络不好可能会出现408,多请求就好了，需要把镜像提交到 [用户名]/images\ndocker push wuxinheng/wxh-hexo:latest\n```\n\n拉取镜像\n\n```shell\n# 网络不好可能会出现408,多请求就好了\ndocker pull wuxinheng/wxh-hexo:latest\n```\n\n运行镜像\n\n```C#\ndocker run -d --name hexo -p 4000:80 wuxinheng/wxh-hexo:latest\n```\n\n[Docker发布镜像时报错denied: requested access to the resource is denied解决办法_刺客765的博客-CSDN博客](https://blog.csdn.net/Florine113/article/details/121748462)\n\n[解决Error response from daemon: Get https://registry-1.docker.io/v2/library/hello-world/manifests/问题_权权qxj的博客-CSDN博客](https://blog.csdn.net/quanqxj/article/details/79479943)\n\n[Docker 容器创建镜像并提交到Docker hub_xinaml的博客-CSDN博客_docker 镜像提交](https://blog.csdn.net/xinaml/article/details/77573644)","source":"_posts/docker-pack.md","raw":"---\ntitle: docker-pack\nauthor: wuxinheng\ndate: 2022-07-24 23:01:47\ndescription: docker容器的打包成镜像，以及镜像的上传\ncategories:\n  - docker\ntags:\n  - docker-pack\n  - 镜像制作\n---\n### docker打包\n\n将容器打包到镜像\n\n```shell\n# docker commit [-m=\"提交的描述信息\"] [-a=\"创建者\"] 容器名称|容器ID 生成的镜像名[:标签名]\ndocker commit -m=\"use nginx deploy my-hexo-blog\" -a=\"wuxinheng\" hexo-blog wxh-hexo:1.0\n```\n\n保存镜像到本地\n\n```shell\n# docker save -o 保存的PathName 镜像名:标签\ndocker save -o /wxh-hexo.tar wxh-hexo:1.0\n```\n\n加载镜像文件\n\n```shell\n# docker load -i 镜像备份文件\ndocker load -i /wxh-hexo.tar\n```\n\ndocker登录\n\n```shell\n# 用户名就真是是用户名，不是邮箱\ndocker login\n# 验证\ndocker images ls\n```\n\n提交到镜像仓库\n\n```shell\n# 修改标签，会创建一个新的镜像\ndocker tag wxh-hexo:1.0  wuxinheng/wxh-hexo\n# 提交镜像，网络不好可能会出现408,多请求就好了，需要把镜像提交到 [用户名]/images\ndocker push wuxinheng/wxh-hexo:latest\n```\n\n拉取镜像\n\n```shell\n# 网络不好可能会出现408,多请求就好了\ndocker pull wuxinheng/wxh-hexo:latest\n```\n\n运行镜像\n\n```C#\ndocker run -d --name hexo -p 4000:80 wuxinheng/wxh-hexo:latest\n```\n\n[Docker发布镜像时报错denied: requested access to the resource is denied解决办法_刺客765的博客-CSDN博客](https://blog.csdn.net/Florine113/article/details/121748462)\n\n[解决Error response from daemon: Get https://registry-1.docker.io/v2/library/hello-world/manifests/问题_权权qxj的博客-CSDN博客](https://blog.csdn.net/quanqxj/article/details/79479943)\n\n[Docker 容器创建镜像并提交到Docker hub_xinaml的博客-CSDN博客_docker 镜像提交](https://blog.csdn.net/xinaml/article/details/77573644)","slug":"docker-pack","published":1,"updated":"2023-09-24T07:38:31.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhg000rowtk9lrmbxkf","content":"<h3 id=\"docker打包\"><a href=\"#docker打包\" class=\"headerlink\" title=\"docker打包\"></a>docker打包</h3><p>将容器打包到镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker commit [-m=<span class=\"string\">&quot;提交的描述信息&quot;</span>] [-a=<span class=\"string\">&quot;创建者&quot;</span>] 容器名称|容器ID 生成的镜像名[:标签名]</span></span><br><span class=\"line\">docker commit -m=&quot;use nginx deploy my-hexo-blog&quot; -a=&quot;wuxinheng&quot; hexo-blog wxh-hexo:1.0</span><br></pre></td></tr></table></figure>\n\n<p>保存镜像到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker save -o 保存的PathName 镜像名:标签</span></span><br><span class=\"line\">docker save -o /wxh-hexo.tar wxh-hexo:1.0</span><br></pre></td></tr></table></figure>\n\n<p>加载镜像文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker load -i 镜像备份文件</span></span><br><span class=\"line\">docker load -i /wxh-hexo.tar</span><br></pre></td></tr></table></figure>\n\n<p>docker登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用户名就真是是用户名，不是邮箱</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证</span></span><br><span class=\"line\">docker images ls</span><br></pre></td></tr></table></figure>\n\n<p>提交到镜像仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签，会创建一个新的镜像</span></span><br><span class=\"line\">docker tag wxh-hexo:1.0  wuxinheng/wxh-hexo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交镜像，网络不好可能会出现408,多请求就好了，需要把镜像提交到 [用户名]/images</span></span><br><span class=\"line\">docker push wuxinheng/wxh-hexo:latest</span><br></pre></td></tr></table></figure>\n\n<p>拉取镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网络不好可能会出现408,多请求就好了</span></span><br><span class=\"line\">docker pull wuxinheng/wxh-hexo:latest</span><br></pre></td></tr></table></figure>\n\n<p>运行镜像</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name hexo -p <span class=\"number\">4000</span>:<span class=\"number\">80</span> wuxinheng/wxh-hexo:latest</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/Florine113/article/details/121748462\">Docker发布镜像时报错denied: requested access to the resource is denied解决办法_刺客765的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/quanqxj/article/details/79479943\">解决Error response from daemon: Get https://registry-1.docker.io/v2/library/hello-world/manifests/问题_权权qxj的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/xinaml/article/details/77573644\">Docker 容器创建镜像并提交到Docker hub_xinaml的博客-CSDN博客_docker 镜像提交</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"docker打包\"><a href=\"#docker打包\" class=\"headerlink\" title=\"docker打包\"></a>docker打包</h3><p>将容器打包到镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker commit [-m=<span class=\"string\">&quot;提交的描述信息&quot;</span>] [-a=<span class=\"string\">&quot;创建者&quot;</span>] 容器名称|容器ID 生成的镜像名[:标签名]</span></span><br><span class=\"line\">docker commit -m=&quot;use nginx deploy my-hexo-blog&quot; -a=&quot;wuxinheng&quot; hexo-blog wxh-hexo:1.0</span><br></pre></td></tr></table></figure>\n\n<p>保存镜像到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker save -o 保存的PathName 镜像名:标签</span></span><br><span class=\"line\">docker save -o /wxh-hexo.tar wxh-hexo:1.0</span><br></pre></td></tr></table></figure>\n\n<p>加载镜像文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker load -i 镜像备份文件</span></span><br><span class=\"line\">docker load -i /wxh-hexo.tar</span><br></pre></td></tr></table></figure>\n\n<p>docker登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用户名就真是是用户名，不是邮箱</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证</span></span><br><span class=\"line\">docker images ls</span><br></pre></td></tr></table></figure>\n\n<p>提交到镜像仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改标签，会创建一个新的镜像</span></span><br><span class=\"line\">docker tag wxh-hexo:1.0  wuxinheng/wxh-hexo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交镜像，网络不好可能会出现408,多请求就好了，需要把镜像提交到 [用户名]/images</span></span><br><span class=\"line\">docker push wuxinheng/wxh-hexo:latest</span><br></pre></td></tr></table></figure>\n\n<p>拉取镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">网络不好可能会出现408,多请求就好了</span></span><br><span class=\"line\">docker pull wuxinheng/wxh-hexo:latest</span><br></pre></td></tr></table></figure>\n\n<p>运行镜像</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name hexo -p <span class=\"number\">4000</span>:<span class=\"number\">80</span> wuxinheng/wxh-hexo:latest</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/Florine113/article/details/121748462\">Docker发布镜像时报错denied: requested access to the resource is denied解决办法_刺客765的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/quanqxj/article/details/79479943\">解决Error response from daemon: Get https://registry-1.docker.io/v2/library/hello-world/manifests/问题_权权qxj的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/xinaml/article/details/77573644\">Docker 容器创建镜像并提交到Docker hub_xinaml的博客-CSDN博客_docker 镜像提交</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"docker-pack","path":"2022/07/24/docker-pack/","eyeCatchImage":null,"excerpt":"docker容器的打包成镜像，以及镜像的上传","date":{"_isAMomentObject":true,"_i":"2022-07-24T15:01:47.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-24T15:01:47.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["docker-pack","镜像制作"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"docker-swarm","author":"wuxinheng","date":"2022-07-24T15:01:27.000Z","description":"docker编排","_content":"### docker-swarm\n\n准备三台虚拟机，同一个网络环境\n\n192.168.85.131\n\n```shell\nhostnamectl set-hostname manager01\n```\n\n192.168.85.132\n\n```shell\nhostnamectl set-hostname node01\n```\n\n192.168.85.133\n\n```shell\nhostnamectl set-hostname node02\n```\n\n初始化swarm\n\n```shell\ndocker swarm init --advertise-addr 192.168.85.131\n```\n\n加入集群的方式\n\n```shell\ndocker swarm join --token SWMTKN-1-4qqtadhn8y0iwkrnl44bsdarokkw9teofoieyn01vnduj88zje-5trtkf44l8w5uft8dkyb26lf9 192.168.85.131:2377\n```\n\n查看节点信息\n\n```shell\n# 都可以查看\ndocker info\ndocker node ls\n```\n\n修改节点状态\n\n> drain、active两个状态，设置为drain容器自动删除，并运行在其他节点上。\n\n```shell\ndocker node update --availability drain manater01\n# --availability 是否可用\n```\n\n部署服务\n\n```shell\ndocker service create --replicas 1 --network nginx_net --name my_nginx -p 80:80 nginx\n# --replicas 设置服务实例个数。\n```\n\n查看正在运行的服务\n\n```shell\ndocker service ls\n```\n\n查看运行服务的节点\n\n```shell\ndocker service ps my_nginx\n```\n\n删除服务\n\n```shell\ndocker service rm my_nginx\n```\n\n查看服务信息\n\n```shell\ndocker service inspect --pretty my_nginx\n# --pretty 人性化打印信息\n```\n\n动态设置服务实例\n\n```shell\n# 都可以实现\ndocker service scale my_nginx=4\ndocker service update --replicas 3 my_nginx\n```\n\n升级服务镜像\n\n```shell\ndocker service update --image nginx:new my_nginx\n# nginx:new [new]新版本或指定版本\n```\n\n常用命令\n\n### docker swarm 常用命令\n\n| 命令                            | 说明                 |\n| ------------------------------- | -------------------- |\n| docker swarm init               | 初始化集群           |\n| docker swarm join-token worker  | 查看工作节点的 token |\n| docker swarm join-token manager | 查看管理节点的 token |\n| docker swarm join               | 加入集群中           |\n\n### docker node 常用命令\n\n| 命令                | 说明                               |\n| ------------------- | ---------------------------------- |\n| docker node ls      | 查看所有集群节点                   |\n| docker node rm      | 删除某个节点（`-f`强制删除）       |\n| docker node inspect | 查看节点详情                       |\n| docker node demote  | 节点降级，由管理节点降级为工作节点 |\n| docker node promote | 节点升级，由工作节点升级为管理节点 |\n| docker node update  | 更新节点                           |\n| docker node ps      | 查看节点中的 Task 任务             |\n\n### docker service 常用命令\n\n| 命令                   | 说明                         |\n| ---------------------- | ---------------------------- |\n| docker service create  | 部署服务                     |\n| docker service inspect | 查看服务详情                 |\n| docker service logs    | 产看某个服务日志             |\n| docker service ls      | 查看所有服务详情             |\n| docker service rm      | 删除某个服务（`-f`强制删除） |\n| docker service scale   | 设置某个服务个数             |\n| docker service update  | 更新某个服务                 |\n\n### docker stack 常用命令\n\n| 命令                  | 说明                         |\n| --------------------- | ---------------------------- |\n| docker stack deploy   | 部署新的堆栈或更新现有堆栈   |\n| docker stack ls       | 列出现有堆栈                 |\n| docker stack ps       | 列出堆栈中的任务             |\n| docker stack rm       | 删除堆栈                     |\n| docker stack services | 列出堆栈中的服务             |\n| docker stack down     | 移除某个堆栈（不会删除数据） |\n\n参考\n\n[Docker Swarm_程涯的博客-CSDN博客_docker swarm](https://blog.csdn.net/Olivier0611/article/details/123447725)\n\n[Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)](https://www.cnblogs.com/xishuai/p/docker-swarm.html)\n\n","source":"_posts/docker-swarm.md","raw":"---\ntitle: docker-swarm\nauthor: wuxinheng\ndate: 2022-07-24 23:01:27\ndescription: docker编排\ncategories:\n  - docker\ntags:\n  - docker-swarm\n---\n### docker-swarm\n\n准备三台虚拟机，同一个网络环境\n\n192.168.85.131\n\n```shell\nhostnamectl set-hostname manager01\n```\n\n192.168.85.132\n\n```shell\nhostnamectl set-hostname node01\n```\n\n192.168.85.133\n\n```shell\nhostnamectl set-hostname node02\n```\n\n初始化swarm\n\n```shell\ndocker swarm init --advertise-addr 192.168.85.131\n```\n\n加入集群的方式\n\n```shell\ndocker swarm join --token SWMTKN-1-4qqtadhn8y0iwkrnl44bsdarokkw9teofoieyn01vnduj88zje-5trtkf44l8w5uft8dkyb26lf9 192.168.85.131:2377\n```\n\n查看节点信息\n\n```shell\n# 都可以查看\ndocker info\ndocker node ls\n```\n\n修改节点状态\n\n> drain、active两个状态，设置为drain容器自动删除，并运行在其他节点上。\n\n```shell\ndocker node update --availability drain manater01\n# --availability 是否可用\n```\n\n部署服务\n\n```shell\ndocker service create --replicas 1 --network nginx_net --name my_nginx -p 80:80 nginx\n# --replicas 设置服务实例个数。\n```\n\n查看正在运行的服务\n\n```shell\ndocker service ls\n```\n\n查看运行服务的节点\n\n```shell\ndocker service ps my_nginx\n```\n\n删除服务\n\n```shell\ndocker service rm my_nginx\n```\n\n查看服务信息\n\n```shell\ndocker service inspect --pretty my_nginx\n# --pretty 人性化打印信息\n```\n\n动态设置服务实例\n\n```shell\n# 都可以实现\ndocker service scale my_nginx=4\ndocker service update --replicas 3 my_nginx\n```\n\n升级服务镜像\n\n```shell\ndocker service update --image nginx:new my_nginx\n# nginx:new [new]新版本或指定版本\n```\n\n常用命令\n\n### docker swarm 常用命令\n\n| 命令                            | 说明                 |\n| ------------------------------- | -------------------- |\n| docker swarm init               | 初始化集群           |\n| docker swarm join-token worker  | 查看工作节点的 token |\n| docker swarm join-token manager | 查看管理节点的 token |\n| docker swarm join               | 加入集群中           |\n\n### docker node 常用命令\n\n| 命令                | 说明                               |\n| ------------------- | ---------------------------------- |\n| docker node ls      | 查看所有集群节点                   |\n| docker node rm      | 删除某个节点（`-f`强制删除）       |\n| docker node inspect | 查看节点详情                       |\n| docker node demote  | 节点降级，由管理节点降级为工作节点 |\n| docker node promote | 节点升级，由工作节点升级为管理节点 |\n| docker node update  | 更新节点                           |\n| docker node ps      | 查看节点中的 Task 任务             |\n\n### docker service 常用命令\n\n| 命令                   | 说明                         |\n| ---------------------- | ---------------------------- |\n| docker service create  | 部署服务                     |\n| docker service inspect | 查看服务详情                 |\n| docker service logs    | 产看某个服务日志             |\n| docker service ls      | 查看所有服务详情             |\n| docker service rm      | 删除某个服务（`-f`强制删除） |\n| docker service scale   | 设置某个服务个数             |\n| docker service update  | 更新某个服务                 |\n\n### docker stack 常用命令\n\n| 命令                  | 说明                         |\n| --------------------- | ---------------------------- |\n| docker stack deploy   | 部署新的堆栈或更新现有堆栈   |\n| docker stack ls       | 列出现有堆栈                 |\n| docker stack ps       | 列出堆栈中的任务             |\n| docker stack rm       | 删除堆栈                     |\n| docker stack services | 列出堆栈中的服务             |\n| docker stack down     | 移除某个堆栈（不会删除数据） |\n\n参考\n\n[Docker Swarm_程涯的博客-CSDN博客_docker swarm](https://blog.csdn.net/Olivier0611/article/details/123447725)\n\n[Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)](https://www.cnblogs.com/xishuai/p/docker-swarm.html)\n\n","slug":"docker-swarm","published":1,"updated":"2023-09-24T07:38:31.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhh000towtkb0etgixs","content":"<h3 id=\"docker-swarm\"><a href=\"#docker-swarm\" class=\"headerlink\" title=\"docker-swarm\"></a>docker-swarm</h3><p>准备三台虚拟机，同一个网络环境</p>\n<p>192.168.85.131</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname manager01</span><br></pre></td></tr></table></figure>\n\n<p>192.168.85.132</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname node01</span><br></pre></td></tr></table></figure>\n\n<p>192.168.85.133</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname node02</span><br></pre></td></tr></table></figure>\n\n<p>初始化swarm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init --advertise-addr 192.168.85.131</span><br></pre></td></tr></table></figure>\n\n<p>加入集群的方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm join --token SWMTKN-1-4qqtadhn8y0iwkrnl44bsdarokkw9teofoieyn01vnduj88zje-5trtkf44l8w5uft8dkyb26lf9 192.168.85.131:2377</span><br></pre></td></tr></table></figure>\n\n<p>查看节点信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">都可以查看</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\">docker node ls</span><br></pre></td></tr></table></figure>\n\n<p>修改节点状态</p>\n<blockquote>\n<p>drain、active两个状态，设置为drain容器自动删除，并运行在其他节点上。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --availability drain manater01</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--availability 是否可用</span></span><br></pre></td></tr></table></figure>\n\n<p>部署服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service create --replicas 1 --network nginx_net --name my_nginx -p 80:80 nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--replicas 设置服务实例个数。</span></span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service ls</span><br></pre></td></tr></table></figure>\n\n<p>查看运行服务的节点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service ps my_nginx</span><br></pre></td></tr></table></figure>\n\n<p>删除服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service rm my_nginx</span><br></pre></td></tr></table></figure>\n\n<p>查看服务信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service inspect --pretty my_nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--pretty 人性化打印信息</span></span><br></pre></td></tr></table></figure>\n\n<p>动态设置服务实例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">都可以实现</span></span><br><span class=\"line\">docker service scale my_nginx=4</span><br><span class=\"line\">docker service update --replicas 3 my_nginx</span><br></pre></td></tr></table></figure>\n\n<p>升级服务镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service update --image nginx:new my_nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nginx:new [new]新版本或指定版本</span></span><br></pre></td></tr></table></figure>\n\n<p>常用命令</p>\n<h3 id=\"docker-swarm-常用命令\"><a href=\"#docker-swarm-常用命令\" class=\"headerlink\" title=\"docker swarm 常用命令\"></a>docker swarm 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker swarm init</td>\n<td>初始化集群</td>\n</tr>\n<tr>\n<td>docker swarm join-token worker</td>\n<td>查看工作节点的 token</td>\n</tr>\n<tr>\n<td>docker swarm join-token manager</td>\n<td>查看管理节点的 token</td>\n</tr>\n<tr>\n<td>docker swarm join</td>\n<td>加入集群中</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-node-常用命令\"><a href=\"#docker-node-常用命令\" class=\"headerlink\" title=\"docker node 常用命令\"></a>docker node 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker node ls</td>\n<td>查看所有集群节点</td>\n</tr>\n<tr>\n<td>docker node rm</td>\n<td>删除某个节点（<code>-f</code>强制删除）</td>\n</tr>\n<tr>\n<td>docker node inspect</td>\n<td>查看节点详情</td>\n</tr>\n<tr>\n<td>docker node demote</td>\n<td>节点降级，由管理节点降级为工作节点</td>\n</tr>\n<tr>\n<td>docker node promote</td>\n<td>节点升级，由工作节点升级为管理节点</td>\n</tr>\n<tr>\n<td>docker node update</td>\n<td>更新节点</td>\n</tr>\n<tr>\n<td>docker node ps</td>\n<td>查看节点中的 Task 任务</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-service-常用命令\"><a href=\"#docker-service-常用命令\" class=\"headerlink\" title=\"docker service 常用命令\"></a>docker service 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker service create</td>\n<td>部署服务</td>\n</tr>\n<tr>\n<td>docker service inspect</td>\n<td>查看服务详情</td>\n</tr>\n<tr>\n<td>docker service logs</td>\n<td>产看某个服务日志</td>\n</tr>\n<tr>\n<td>docker service ls</td>\n<td>查看所有服务详情</td>\n</tr>\n<tr>\n<td>docker service rm</td>\n<td>删除某个服务（<code>-f</code>强制删除）</td>\n</tr>\n<tr>\n<td>docker service scale</td>\n<td>设置某个服务个数</td>\n</tr>\n<tr>\n<td>docker service update</td>\n<td>更新某个服务</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-stack-常用命令\"><a href=\"#docker-stack-常用命令\" class=\"headerlink\" title=\"docker stack 常用命令\"></a>docker stack 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker stack deploy</td>\n<td>部署新的堆栈或更新现有堆栈</td>\n</tr>\n<tr>\n<td>docker stack ls</td>\n<td>列出现有堆栈</td>\n</tr>\n<tr>\n<td>docker stack ps</td>\n<td>列出堆栈中的任务</td>\n</tr>\n<tr>\n<td>docker stack rm</td>\n<td>删除堆栈</td>\n</tr>\n<tr>\n<td>docker stack services</td>\n<td>列出堆栈中的服务</td>\n</tr>\n<tr>\n<td>docker stack down</td>\n<td>移除某个堆栈（不会删除数据）</td>\n</tr>\n</tbody></table>\n<p>参考</p>\n<p><a href=\"https://blog.csdn.net/Olivier0611/article/details/123447725\">Docker Swarm_程涯的博客-CSDN博客_docker swarm</a></p>\n<p><a href=\"https://www.cnblogs.com/xishuai/p/docker-swarm.html\">Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"docker-swarm\"><a href=\"#docker-swarm\" class=\"headerlink\" title=\"docker-swarm\"></a>docker-swarm</h3><p>准备三台虚拟机，同一个网络环境</p>\n<p>192.168.85.131</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname manager01</span><br></pre></td></tr></table></figure>\n\n<p>192.168.85.132</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname node01</span><br></pre></td></tr></table></figure>\n\n<p>192.168.85.133</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname node02</span><br></pre></td></tr></table></figure>\n\n<p>初始化swarm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm init --advertise-addr 192.168.85.131</span><br></pre></td></tr></table></figure>\n\n<p>加入集群的方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm join --token SWMTKN-1-4qqtadhn8y0iwkrnl44bsdarokkw9teofoieyn01vnduj88zje-5trtkf44l8w5uft8dkyb26lf9 192.168.85.131:2377</span><br></pre></td></tr></table></figure>\n\n<p>查看节点信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">都可以查看</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\">docker node ls</span><br></pre></td></tr></table></figure>\n\n<p>修改节点状态</p>\n<blockquote>\n<p>drain、active两个状态，设置为drain容器自动删除，并运行在其他节点上。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node update --availability drain manater01</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--availability 是否可用</span></span><br></pre></td></tr></table></figure>\n\n<p>部署服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service create --replicas 1 --network nginx_net --name my_nginx -p 80:80 nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--replicas 设置服务实例个数。</span></span><br></pre></td></tr></table></figure>\n\n<p>查看正在运行的服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service ls</span><br></pre></td></tr></table></figure>\n\n<p>查看运行服务的节点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service ps my_nginx</span><br></pre></td></tr></table></figure>\n\n<p>删除服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service rm my_nginx</span><br></pre></td></tr></table></figure>\n\n<p>查看服务信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service inspect --pretty my_nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--pretty 人性化打印信息</span></span><br></pre></td></tr></table></figure>\n\n<p>动态设置服务实例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">都可以实现</span></span><br><span class=\"line\">docker service scale my_nginx=4</span><br><span class=\"line\">docker service update --replicas 3 my_nginx</span><br></pre></td></tr></table></figure>\n\n<p>升级服务镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker service update --image nginx:new my_nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nginx:new [new]新版本或指定版本</span></span><br></pre></td></tr></table></figure>\n\n<p>常用命令</p>\n<h3 id=\"docker-swarm-常用命令\"><a href=\"#docker-swarm-常用命令\" class=\"headerlink\" title=\"docker swarm 常用命令\"></a>docker swarm 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker swarm init</td>\n<td>初始化集群</td>\n</tr>\n<tr>\n<td>docker swarm join-token worker</td>\n<td>查看工作节点的 token</td>\n</tr>\n<tr>\n<td>docker swarm join-token manager</td>\n<td>查看管理节点的 token</td>\n</tr>\n<tr>\n<td>docker swarm join</td>\n<td>加入集群中</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-node-常用命令\"><a href=\"#docker-node-常用命令\" class=\"headerlink\" title=\"docker node 常用命令\"></a>docker node 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker node ls</td>\n<td>查看所有集群节点</td>\n</tr>\n<tr>\n<td>docker node rm</td>\n<td>删除某个节点（<code>-f</code>强制删除）</td>\n</tr>\n<tr>\n<td>docker node inspect</td>\n<td>查看节点详情</td>\n</tr>\n<tr>\n<td>docker node demote</td>\n<td>节点降级，由管理节点降级为工作节点</td>\n</tr>\n<tr>\n<td>docker node promote</td>\n<td>节点升级，由工作节点升级为管理节点</td>\n</tr>\n<tr>\n<td>docker node update</td>\n<td>更新节点</td>\n</tr>\n<tr>\n<td>docker node ps</td>\n<td>查看节点中的 Task 任务</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-service-常用命令\"><a href=\"#docker-service-常用命令\" class=\"headerlink\" title=\"docker service 常用命令\"></a>docker service 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker service create</td>\n<td>部署服务</td>\n</tr>\n<tr>\n<td>docker service inspect</td>\n<td>查看服务详情</td>\n</tr>\n<tr>\n<td>docker service logs</td>\n<td>产看某个服务日志</td>\n</tr>\n<tr>\n<td>docker service ls</td>\n<td>查看所有服务详情</td>\n</tr>\n<tr>\n<td>docker service rm</td>\n<td>删除某个服务（<code>-f</code>强制删除）</td>\n</tr>\n<tr>\n<td>docker service scale</td>\n<td>设置某个服务个数</td>\n</tr>\n<tr>\n<td>docker service update</td>\n<td>更新某个服务</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-stack-常用命令\"><a href=\"#docker-stack-常用命令\" class=\"headerlink\" title=\"docker stack 常用命令\"></a>docker stack 常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker stack deploy</td>\n<td>部署新的堆栈或更新现有堆栈</td>\n</tr>\n<tr>\n<td>docker stack ls</td>\n<td>列出现有堆栈</td>\n</tr>\n<tr>\n<td>docker stack ps</td>\n<td>列出堆栈中的任务</td>\n</tr>\n<tr>\n<td>docker stack rm</td>\n<td>删除堆栈</td>\n</tr>\n<tr>\n<td>docker stack services</td>\n<td>列出堆栈中的服务</td>\n</tr>\n<tr>\n<td>docker stack down</td>\n<td>移除某个堆栈（不会删除数据）</td>\n</tr>\n</tbody></table>\n<p>参考</p>\n<p><a href=\"https://blog.csdn.net/Olivier0611/article/details/123447725\">Docker Swarm_程涯的博客-CSDN博客_docker swarm</a></p>\n<p><a href=\"https://www.cnblogs.com/xishuai/p/docker-swarm.html\">Docker 三剑客之 Docker Swarm - 田园里的蟋蟀 - 博客园 (cnblogs.com)</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"docker-swarm","path":"2022/07/24/docker-swarm/","eyeCatchImage":null,"excerpt":"docker编排","date":{"_isAMomentObject":true,"_i":"2022-07-24T15:01:27.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-24T15:01:27.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["docker-swarm"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"docker 开启远程端口","author":"wuxinheng","date":"2022-08-11T15:09:50.000Z","description":"docker 开启远程端口，引起病毒感染。事件全过程","_content":"### docker 开启远程端口\n\n在不连接服务器的前提下。docker也提供了一种远程api进行操作docker.\n\n> 这里需要注意的是开启docker remote api 安全性大大下降。建议：\n>\n> 采用https、更换默认端口等操作。\n\n我这里只演示最简单的开启\n\n```shell\nsystemctl show --property=FragmentPath docker\n```\n\n```shell\nvi /usr/lib/systemd/system/docker.service\n```\n\n```shell\n# 大概14行左右的位置。我服务器上显示一大串。我在后面补上没有效果。我直接替换了，原代码注释\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n```\n\n```shell\nsystemctl daemon-reload\n```\n\n```shell\nsystemctl restart docker\n```\n\n验证\n\n访问：http:{ip}:2375,会显示json数据则成功。\n\n有坑！会中毒！\n\n","source":"_posts/docker-开启远程端口.md","raw":"---\ntitle: docker 开启远程端口\nauthor: wuxinheng\ndate: 2022-08-11 23:09:50\ndescription: docker 开启远程端口，引起病毒感染。事件全过程\ncategories:\n  - docker\ntags:\n- docker\n- remote api\n---\n### docker 开启远程端口\n\n在不连接服务器的前提下。docker也提供了一种远程api进行操作docker.\n\n> 这里需要注意的是开启docker remote api 安全性大大下降。建议：\n>\n> 采用https、更换默认端口等操作。\n\n我这里只演示最简单的开启\n\n```shell\nsystemctl show --property=FragmentPath docker\n```\n\n```shell\nvi /usr/lib/systemd/system/docker.service\n```\n\n```shell\n# 大概14行左右的位置。我服务器上显示一大串。我在后面补上没有效果。我直接替换了，原代码注释\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n```\n\n```shell\nsystemctl daemon-reload\n```\n\n```shell\nsystemctl restart docker\n```\n\n验证\n\n访问：http:{ip}:2375,会显示json数据则成功。\n\n有坑！会中毒！\n\n","slug":"docker-开启远程端口","published":1,"updated":"2023-09-24T07:38:31.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhi000xowtk2t5j58i8","content":"<h3 id=\"docker-开启远程端口\"><a href=\"#docker-开启远程端口\" class=\"headerlink\" title=\"docker 开启远程端口\"></a>docker 开启远程端口</h3><p>在不连接服务器的前提下。docker也提供了一种远程api进行操作docker.</p>\n<blockquote>\n<p>这里需要注意的是开启docker remote api 安全性大大下降。建议：</p>\n<p>采用https、更换默认端口等操作。</p>\n</blockquote>\n<p>我这里只演示最简单的开启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl show --property=FragmentPath docker</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">大概14行左右的位置。我服务器上显示一大串。我在后面补上没有效果。我直接替换了，原代码注释</span></span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<p>访问：http:{ip}:2375,会显示json数据则成功。</p>\n<p>有坑！会中毒！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"docker-开启远程端口\"><a href=\"#docker-开启远程端口\" class=\"headerlink\" title=\"docker 开启远程端口\"></a>docker 开启远程端口</h3><p>在不连接服务器的前提下。docker也提供了一种远程api进行操作docker.</p>\n<blockquote>\n<p>这里需要注意的是开启docker remote api 安全性大大下降。建议：</p>\n<p>采用https、更换默认端口等操作。</p>\n</blockquote>\n<p>我这里只演示最简单的开启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl show --property=FragmentPath docker</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">大概14行左右的位置。我服务器上显示一大串。我在后面补上没有效果。我直接替换了，原代码注释</span></span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<p>访问：http:{ip}:2375,会显示json数据则成功。</p>\n<p>有坑！会中毒！</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"docker 开启远程端口","path":"2022/08/11/docker-开启远程端口/","eyeCatchImage":null,"excerpt":"docker 开启远程端口，引起病毒感染。事件全过程","date":{"_isAMomentObject":true,"_i":"2022-08-11T15:09:50.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-11T15:09:50.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["docker","remote api"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"docker 开启远程端口，引起病毒感染。","author":"wuxinheng","date":"2022-08-11T15:10:16.000Z","description":"docker 开启远程端口，引起病毒感染。事件全过程","_content":"## docker 开启远程端口，引起病毒感染\n\n8月7号下午：学了java springboot实现的了一个简单的接口。看了idea有docker相关的功能，就产生了部署springboot到docker想法。\n\n8月7号晚上：springboot打包镜像一直报错。经过几番百度加尝试还是不行。\n\n8月8号中午：找到了一个说是需要打开docker 远程端口的博客。之所以觉得这个博客说的比较对是因为。docker-maven-plugin配置并没有配置ssh，而是一个端口。之前使用docker也看过类似的帖子。因为常用工具是vs和docker desktop。没太在意。\n\n8月8号下午：我修改了docker配置。开启了2375端口。其实在开启远程端口的时候我就在想应该需要配置https访问，当时想法想的是通过nginx。但是因为就是想部署一个java的项目上去玩玩，就忽略了。\n\n8月8号晚上：腾讯云给我发来慰问：一个病毒程序正在扫描端口，突然又来一条：一个病毒程序正在删除文件。当时我在地铁上快到家了，下地铁的过程中。还收到了好几条。我当时心情感觉就不太好。虽然是自己的服务器，但是上面有我部署的服务，重新配置的话还挺麻烦的。到家之后。我尝试在linux上安装杀毒软件ClamAV经过几番周折还是不太好装。我就找了个安装脚本进行杀毒。\n\n8月9号下午：本来以为好了问题应该不大。突然又收到腾讯云发来的问候。我又跑到服务器进行病毒查杀。结果是什么都没有发现。\n\n8月11号下午：博客的公安网备通过了。正在打算通过jenkins发布呢。结果jenkins访问不到了。docker ps开始执行卡了一下。我还以为我的网络问题。结果看见的是满屏的容器。这不用猜了jenkins肯定是内存不够被kill了。我就在想这些容器是哪来的。我起初怀疑破解版idea的问题。后面我又以为是shell工具。哪里存在信息泄露？但是感觉中国人不骗中国人。我突然想到服务是近期才不稳定的。近期服务器只做了开放docker远程端口。我开始删除我的这些没用的容器。重新部署服务还好jenkins做了文件挂载。然后我开始处理2375端口不安全问题。最开始我在网上找到了一篇解决安全问题的博客。内容是自己创建ca证书。我并没有立即采用这种办法。应为觉得麻烦。后面我尝试用nginx使用ssl端口代理2375把2375外网访问关闭掉。只允许从127.0.0.1或者localhost的方式进行访问。几经测试能力尚浅没有实现。时间问题，我选择了尝试那个篇博客的上的方法。成功的把http://ip:2375改成了https。下面我在解决问题过程的关键的博客。最后一篇的病毒和我的是一模一样。\n\n### 自建证书\n\n创建存放证书文件夹\n\n```shell\nmkdir /var/lib/docker-ca && cd /var/lib/docker-ca\n```\n\n证书这一块的知识参见第二个文档。\n\n创建CA证书私钥，期间需要输入两次用户名和密码，生成文件为ca-key.pem；\n\n```shell\nopenssl genrsa -aes256 -out ca-key.pem 4096\n```\n\n根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，生成文件为ca.pem；\n\n```shell\nopenssl req -new -x509 -days 365 -key ca-key.pem -sha256 -subj \"/CN=*\" -out ca.pem\n```\n\n创建服务端私钥，生成文件为server-key.pem；\n\n```shell\nopenssl genrsa -out server-key.pem 4096\n```\n\n创建服务端证书签名请求文件，用于CA证书给服务端证书签名，生成文件server.csr；\n\n```shell\nopenssl req -subj \"/CN=*\" -sha256 -new -key server-key.pem -out server.csr\n```\n\n创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert.pem；\n\n```shell\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem\n```\n\n创建客户端私钥，生成文件为key.pem；\n\n```shell\nopenssl genrsa -out key.pem 4096\n```\n\n创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client.csr；\n\n```shell\nopenssl req -subj \"/CN=client\" -new -key key.pem -out client.csr\n```\n\n为了让秘钥适合客户端认证，创建一个扩展配置文件extfile-client.cnf；\n\n```shell\n# 这一块没太明白。执行好像没有效果。我执行了两次然后直接忽略了\necho extendedKeyUsage = clientAuth > extfile-client.cnf\n```\n\n创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert.pem；\n\n```shell\nopenssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf\n```\n\n删除创建过程中多余的文件；\n\n```shell\nrm -rf ca.srl server.csr client.csr extfile-client.cnf\n```\n\n生成得文件如下\n\n```\nca.pem CA证书\nca-key.pem CA证书私钥\nserver-cert.pem 服务端证书\nserver-key.pem 服务端证书私钥\ncert.pem 客户端证书\nkey.pem 客户端证书私钥\n```\n\n修改docker配置文件\n\n```shell\nvi /usr/lib/systemd/system/docker.service\n```\n\n这里的配置使用decker命令会报错：`-H unix://var/run/docker.sock`，那就在下面加入`-H unix://var/run/docker.sock`\n\n```ini\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock --tlsverify --tlscacert=/mydata/docker-ca/ca.pem --tlscert=/mydata/docker-ca/server-cert.pem --tlskey=/mydata/docker-ca/server-key.pem \n```\n\n重新加载docker和启动\n\n```shell\nsystemctl daemon-reload && systemctl restart docker\n```\n\n将生成得证书文件放在java开发电脑我的地址：`C:\\\\docker-ca`\n\n```tex\nca.pem CA证书\ncert.pem 客户端证书\nkey.pem 客户端证书私钥\n```\n\npom.xml docker-maven-plugin 配置\n\n```xml\n<plugin>\n    <groupId>com.spotify</groupId>\n    <artifactId>docker-maven-plugin</artifactId>\n    <version>1.2.2</version>\n    <executions>\n        <execution>\n            <id>build-image</id>\n            <phase>package</phase>\n            <goals>\n                <goal>build</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <imageName>mall-tiny/${project.artifactId}:${project.version}</imageName>\n        <dockerHost>https://ip:2375</dockerHost>\n        <baseImage>java:8</baseImage>\n        <entryPoint>[\"java\", \"-jar\",\"/${project.build.finalName}.jar\"]\n        </entryPoint>\n        <dockerCertPath>C:\\\\docker-ca</dockerCertPath>\n        <resources>\n            <resource>\n                <targetPath>/</targetPath>\n                <directory>${project.build.directory}</directory>\n                <include>${project.build.finalName}.jar</include>\n            </resource>\n        </resources>\n    </configuration>\n</plugin>\n```\n\n[如何保证docker2375端口的安全_LY破晓的博客-CSDN博客_docker2375安全设置](https://blog.csdn.net/qq_40321119/article/details/107951712)\n\n[HTTPS安全证书访问连接知识讲解_weixin_34061482的博客-CSDN博客](https://blog.csdn.net/weixin_34061482/article/details/92717907)\n\n[Cetus：针对 Docker daemons 的加密劫持蠕虫_黑客技术 (hackdig.com)](http://www.hackdig.com/08/hack-124456.htm)","source":"_posts/docker-开启远程端口，引起病毒感染。.md","raw":"---\ntitle: docker 开启远程端口，引起病毒感染。\nauthor: wuxinheng\ndate: 2022-08-11 23:10:16\ndescription: docker 开启远程端口，引起病毒感染。事件全过程\ncategories:\n  - docker\ntags:\n- docker\n- 病毒\n---\n## docker 开启远程端口，引起病毒感染\n\n8月7号下午：学了java springboot实现的了一个简单的接口。看了idea有docker相关的功能，就产生了部署springboot到docker想法。\n\n8月7号晚上：springboot打包镜像一直报错。经过几番百度加尝试还是不行。\n\n8月8号中午：找到了一个说是需要打开docker 远程端口的博客。之所以觉得这个博客说的比较对是因为。docker-maven-plugin配置并没有配置ssh，而是一个端口。之前使用docker也看过类似的帖子。因为常用工具是vs和docker desktop。没太在意。\n\n8月8号下午：我修改了docker配置。开启了2375端口。其实在开启远程端口的时候我就在想应该需要配置https访问，当时想法想的是通过nginx。但是因为就是想部署一个java的项目上去玩玩，就忽略了。\n\n8月8号晚上：腾讯云给我发来慰问：一个病毒程序正在扫描端口，突然又来一条：一个病毒程序正在删除文件。当时我在地铁上快到家了，下地铁的过程中。还收到了好几条。我当时心情感觉就不太好。虽然是自己的服务器，但是上面有我部署的服务，重新配置的话还挺麻烦的。到家之后。我尝试在linux上安装杀毒软件ClamAV经过几番周折还是不太好装。我就找了个安装脚本进行杀毒。\n\n8月9号下午：本来以为好了问题应该不大。突然又收到腾讯云发来的问候。我又跑到服务器进行病毒查杀。结果是什么都没有发现。\n\n8月11号下午：博客的公安网备通过了。正在打算通过jenkins发布呢。结果jenkins访问不到了。docker ps开始执行卡了一下。我还以为我的网络问题。结果看见的是满屏的容器。这不用猜了jenkins肯定是内存不够被kill了。我就在想这些容器是哪来的。我起初怀疑破解版idea的问题。后面我又以为是shell工具。哪里存在信息泄露？但是感觉中国人不骗中国人。我突然想到服务是近期才不稳定的。近期服务器只做了开放docker远程端口。我开始删除我的这些没用的容器。重新部署服务还好jenkins做了文件挂载。然后我开始处理2375端口不安全问题。最开始我在网上找到了一篇解决安全问题的博客。内容是自己创建ca证书。我并没有立即采用这种办法。应为觉得麻烦。后面我尝试用nginx使用ssl端口代理2375把2375外网访问关闭掉。只允许从127.0.0.1或者localhost的方式进行访问。几经测试能力尚浅没有实现。时间问题，我选择了尝试那个篇博客的上的方法。成功的把http://ip:2375改成了https。下面我在解决问题过程的关键的博客。最后一篇的病毒和我的是一模一样。\n\n### 自建证书\n\n创建存放证书文件夹\n\n```shell\nmkdir /var/lib/docker-ca && cd /var/lib/docker-ca\n```\n\n证书这一块的知识参见第二个文档。\n\n创建CA证书私钥，期间需要输入两次用户名和密码，生成文件为ca-key.pem；\n\n```shell\nopenssl genrsa -aes256 -out ca-key.pem 4096\n```\n\n根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，生成文件为ca.pem；\n\n```shell\nopenssl req -new -x509 -days 365 -key ca-key.pem -sha256 -subj \"/CN=*\" -out ca.pem\n```\n\n创建服务端私钥，生成文件为server-key.pem；\n\n```shell\nopenssl genrsa -out server-key.pem 4096\n```\n\n创建服务端证书签名请求文件，用于CA证书给服务端证书签名，生成文件server.csr；\n\n```shell\nopenssl req -subj \"/CN=*\" -sha256 -new -key server-key.pem -out server.csr\n```\n\n创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert.pem；\n\n```shell\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem\n```\n\n创建客户端私钥，生成文件为key.pem；\n\n```shell\nopenssl genrsa -out key.pem 4096\n```\n\n创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client.csr；\n\n```shell\nopenssl req -subj \"/CN=client\" -new -key key.pem -out client.csr\n```\n\n为了让秘钥适合客户端认证，创建一个扩展配置文件extfile-client.cnf；\n\n```shell\n# 这一块没太明白。执行好像没有效果。我执行了两次然后直接忽略了\necho extendedKeyUsage = clientAuth > extfile-client.cnf\n```\n\n创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert.pem；\n\n```shell\nopenssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf\n```\n\n删除创建过程中多余的文件；\n\n```shell\nrm -rf ca.srl server.csr client.csr extfile-client.cnf\n```\n\n生成得文件如下\n\n```\nca.pem CA证书\nca-key.pem CA证书私钥\nserver-cert.pem 服务端证书\nserver-key.pem 服务端证书私钥\ncert.pem 客户端证书\nkey.pem 客户端证书私钥\n```\n\n修改docker配置文件\n\n```shell\nvi /usr/lib/systemd/system/docker.service\n```\n\n这里的配置使用decker命令会报错：`-H unix://var/run/docker.sock`，那就在下面加入`-H unix://var/run/docker.sock`\n\n```ini\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock --tlsverify --tlscacert=/mydata/docker-ca/ca.pem --tlscert=/mydata/docker-ca/server-cert.pem --tlskey=/mydata/docker-ca/server-key.pem \n```\n\n重新加载docker和启动\n\n```shell\nsystemctl daemon-reload && systemctl restart docker\n```\n\n将生成得证书文件放在java开发电脑我的地址：`C:\\\\docker-ca`\n\n```tex\nca.pem CA证书\ncert.pem 客户端证书\nkey.pem 客户端证书私钥\n```\n\npom.xml docker-maven-plugin 配置\n\n```xml\n<plugin>\n    <groupId>com.spotify</groupId>\n    <artifactId>docker-maven-plugin</artifactId>\n    <version>1.2.2</version>\n    <executions>\n        <execution>\n            <id>build-image</id>\n            <phase>package</phase>\n            <goals>\n                <goal>build</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <imageName>mall-tiny/${project.artifactId}:${project.version}</imageName>\n        <dockerHost>https://ip:2375</dockerHost>\n        <baseImage>java:8</baseImage>\n        <entryPoint>[\"java\", \"-jar\",\"/${project.build.finalName}.jar\"]\n        </entryPoint>\n        <dockerCertPath>C:\\\\docker-ca</dockerCertPath>\n        <resources>\n            <resource>\n                <targetPath>/</targetPath>\n                <directory>${project.build.directory}</directory>\n                <include>${project.build.finalName}.jar</include>\n            </resource>\n        </resources>\n    </configuration>\n</plugin>\n```\n\n[如何保证docker2375端口的安全_LY破晓的博客-CSDN博客_docker2375安全设置](https://blog.csdn.net/qq_40321119/article/details/107951712)\n\n[HTTPS安全证书访问连接知识讲解_weixin_34061482的博客-CSDN博客](https://blog.csdn.net/weixin_34061482/article/details/92717907)\n\n[Cetus：针对 Docker daemons 的加密劫持蠕虫_黑客技术 (hackdig.com)](http://www.hackdig.com/08/hack-124456.htm)","slug":"docker-开启远程端口，引起病毒感染。","published":1,"updated":"2023-09-24T07:38:31.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhi000yowtk4ml000qc","content":"<h2 id=\"docker-开启远程端口，引起病毒感染\"><a href=\"#docker-开启远程端口，引起病毒感染\" class=\"headerlink\" title=\"docker 开启远程端口，引起病毒感染\"></a>docker 开启远程端口，引起病毒感染</h2><p>8月7号下午：学了java springboot实现的了一个简单的接口。看了idea有docker相关的功能，就产生了部署springboot到docker想法。</p>\n<p>8月7号晚上：springboot打包镜像一直报错。经过几番百度加尝试还是不行。</p>\n<p>8月8号中午：找到了一个说是需要打开docker 远程端口的博客。之所以觉得这个博客说的比较对是因为。docker-maven-plugin配置并没有配置ssh，而是一个端口。之前使用docker也看过类似的帖子。因为常用工具是vs和docker desktop。没太在意。</p>\n<p>8月8号下午：我修改了docker配置。开启了2375端口。其实在开启远程端口的时候我就在想应该需要配置https访问，当时想法想的是通过nginx。但是因为就是想部署一个java的项目上去玩玩，就忽略了。</p>\n<p>8月8号晚上：腾讯云给我发来慰问：一个病毒程序正在扫描端口，突然又来一条：一个病毒程序正在删除文件。当时我在地铁上快到家了，下地铁的过程中。还收到了好几条。我当时心情感觉就不太好。虽然是自己的服务器，但是上面有我部署的服务，重新配置的话还挺麻烦的。到家之后。我尝试在linux上安装杀毒软件ClamAV经过几番周折还是不太好装。我就找了个安装脚本进行杀毒。</p>\n<p>8月9号下午：本来以为好了问题应该不大。突然又收到腾讯云发来的问候。我又跑到服务器进行病毒查杀。结果是什么都没有发现。</p>\n<p>8月11号下午：博客的公安网备通过了。正在打算通过jenkins发布呢。结果jenkins访问不到了。docker ps开始执行卡了一下。我还以为我的网络问题。结果看见的是满屏的容器。这不用猜了jenkins肯定是内存不够被kill了。我就在想这些容器是哪来的。我起初怀疑破解版idea的问题。后面我又以为是shell工具。哪里存在信息泄露？但是感觉中国人不骗中国人。我突然想到服务是近期才不稳定的。近期服务器只做了开放docker远程端口。我开始删除我的这些没用的容器。重新部署服务还好jenkins做了文件挂载。然后我开始处理2375端口不安全问题。最开始我在网上找到了一篇解决安全问题的博客。内容是自己创建ca证书。我并没有立即采用这种办法。应为觉得麻烦。后面我尝试用nginx使用ssl端口代理2375把2375外网访问关闭掉。只允许从127.0.0.1或者localhost的方式进行访问。几经测试能力尚浅没有实现。时间问题，我选择了尝试那个篇博客的上的方法。成功的把<a href=\"http://ip:2375改成了https。下面我在解决问题过程的关键的博客。最后一篇的病毒和我的是一模一样。\">http://ip:2375改成了https。下面我在解决问题过程的关键的博客。最后一篇的病毒和我的是一模一样。</a></p>\n<h3 id=\"自建证书\"><a href=\"#自建证书\" class=\"headerlink\" title=\"自建证书\"></a>自建证书</h3><p>创建存放证书文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/lib/docker-ca &amp;&amp; cd /var/lib/docker-ca</span><br></pre></td></tr></table></figure>\n\n<p>证书这一块的知识参见第二个文档。</p>\n<p>创建CA证书私钥，期间需要输入两次用户名和密码，生成文件为ca-key.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -aes256 -out ca-key.pem 4096</span><br></pre></td></tr></table></figure>\n\n<p>根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，生成文件为ca.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -subj &quot;/CN=*&quot; -out ca.pem</span><br></pre></td></tr></table></figure>\n\n<p>创建服务端私钥，生成文件为server-key.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out server-key.pem 4096</span><br></pre></td></tr></table></figure>\n\n<p>创建服务端证书签名请求文件，用于CA证书给服务端证书签名，生成文件server.csr；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -subj &quot;/CN=*&quot; -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure>\n\n<p>创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem</span><br></pre></td></tr></table></figure>\n\n<p>创建客户端私钥，生成文件为key.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out key.pem 4096</span><br></pre></td></tr></table></figure>\n\n<p>创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client.csr；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -subj &quot;/CN=client&quot; -new -key key.pem -out client.csr</span><br></pre></td></tr></table></figure>\n\n<p>为了让秘钥适合客户端认证，创建一个扩展配置文件extfile-client.cnf；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这一块没太明白。执行好像没有效果。我执行了两次然后直接忽略了</span></span><br><span class=\"line\">echo extendedKeyUsage = clientAuth &gt; extfile-client.cnf</span><br></pre></td></tr></table></figure>\n\n<p>创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf</span><br></pre></td></tr></table></figure>\n\n<p>删除创建过程中多余的文件；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ca.srl server.csr client.csr extfile-client.cnf</span><br></pre></td></tr></table></figure>\n\n<p>生成得文件如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ca.pem CA证书</span><br><span class=\"line\">ca-key.pem CA证书私钥</span><br><span class=\"line\">server-cert.pem 服务端证书</span><br><span class=\"line\">server-key.pem 服务端证书私钥</span><br><span class=\"line\">cert.pem 客户端证书</span><br><span class=\"line\">key.pem 客户端证书私钥</span><br></pre></td></tr></table></figure>\n\n<p>修改docker配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n\n<p>这里的配置使用decker命令会报错：<code>-H unix://var/run/docker.sock</code>，那就在下面加入<code>-H unix://var/run/docker.sock</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/dockerd -H fd:// -H tcp://<span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">2375</span> -H unix://var/run/docker.sock --tlsverify --tlscacert=/mydata/docker-ca/ca.pem --tlscert=/mydata/docker-ca/server-cert.pem --tlskey=/mydata/docker-ca/server-key.pem </span><br></pre></td></tr></table></figure>\n\n<p>重新加载docker和启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>将生成得证书文件放在java开发电脑我的地址：<code>C:\\\\docker-ca</code></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ca.pem CA证书</span><br><span class=\"line\">cert.pem 客户端证书</span><br><span class=\"line\">key.pem 客户端证书私钥</span><br></pre></td></tr></table></figure>\n\n<p>pom.xml docker-maven-plugin 配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>mall-tiny/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>https://ip:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">baseImage</span>&gt;</span>java:8<span class=\"tag\">&lt;/<span class=\"name\">baseImage</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">entryPoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerCertPath</span>&gt;</span>C:\\\\docker-ca<span class=\"tag\">&lt;/<span class=\"name\">dockerCertPath</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/qq_40321119/article/details/107951712\">如何保证docker2375端口的安全_LY破晓的博客-CSDN博客_docker2375安全设置</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_34061482/article/details/92717907\">HTTPS安全证书访问连接知识讲解_weixin_34061482的博客-CSDN博客</a></p>\n<p><a href=\"http://www.hackdig.com/08/hack-124456.htm\">Cetus：针对 Docker daemons 的加密劫持蠕虫_黑客技术 (hackdig.com)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker-开启远程端口，引起病毒感染\"><a href=\"#docker-开启远程端口，引起病毒感染\" class=\"headerlink\" title=\"docker 开启远程端口，引起病毒感染\"></a>docker 开启远程端口，引起病毒感染</h2><p>8月7号下午：学了java springboot实现的了一个简单的接口。看了idea有docker相关的功能，就产生了部署springboot到docker想法。</p>\n<p>8月7号晚上：springboot打包镜像一直报错。经过几番百度加尝试还是不行。</p>\n<p>8月8号中午：找到了一个说是需要打开docker 远程端口的博客。之所以觉得这个博客说的比较对是因为。docker-maven-plugin配置并没有配置ssh，而是一个端口。之前使用docker也看过类似的帖子。因为常用工具是vs和docker desktop。没太在意。</p>\n<p>8月8号下午：我修改了docker配置。开启了2375端口。其实在开启远程端口的时候我就在想应该需要配置https访问，当时想法想的是通过nginx。但是因为就是想部署一个java的项目上去玩玩，就忽略了。</p>\n<p>8月8号晚上：腾讯云给我发来慰问：一个病毒程序正在扫描端口，突然又来一条：一个病毒程序正在删除文件。当时我在地铁上快到家了，下地铁的过程中。还收到了好几条。我当时心情感觉就不太好。虽然是自己的服务器，但是上面有我部署的服务，重新配置的话还挺麻烦的。到家之后。我尝试在linux上安装杀毒软件ClamAV经过几番周折还是不太好装。我就找了个安装脚本进行杀毒。</p>\n<p>8月9号下午：本来以为好了问题应该不大。突然又收到腾讯云发来的问候。我又跑到服务器进行病毒查杀。结果是什么都没有发现。</p>\n<p>8月11号下午：博客的公安网备通过了。正在打算通过jenkins发布呢。结果jenkins访问不到了。docker ps开始执行卡了一下。我还以为我的网络问题。结果看见的是满屏的容器。这不用猜了jenkins肯定是内存不够被kill了。我就在想这些容器是哪来的。我起初怀疑破解版idea的问题。后面我又以为是shell工具。哪里存在信息泄露？但是感觉中国人不骗中国人。我突然想到服务是近期才不稳定的。近期服务器只做了开放docker远程端口。我开始删除我的这些没用的容器。重新部署服务还好jenkins做了文件挂载。然后我开始处理2375端口不安全问题。最开始我在网上找到了一篇解决安全问题的博客。内容是自己创建ca证书。我并没有立即采用这种办法。应为觉得麻烦。后面我尝试用nginx使用ssl端口代理2375把2375外网访问关闭掉。只允许从127.0.0.1或者localhost的方式进行访问。几经测试能力尚浅没有实现。时间问题，我选择了尝试那个篇博客的上的方法。成功的把<a href=\"http://ip:2375改成了https。下面我在解决问题过程的关键的博客。最后一篇的病毒和我的是一模一样。\">http://ip:2375改成了https。下面我在解决问题过程的关键的博客。最后一篇的病毒和我的是一模一样。</a></p>\n<h3 id=\"自建证书\"><a href=\"#自建证书\" class=\"headerlink\" title=\"自建证书\"></a>自建证书</h3><p>创建存放证书文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/lib/docker-ca &amp;&amp; cd /var/lib/docker-ca</span><br></pre></td></tr></table></figure>\n\n<p>证书这一块的知识参见第二个文档。</p>\n<p>创建CA证书私钥，期间需要输入两次用户名和密码，生成文件为ca-key.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -aes256 -out ca-key.pem 4096</span><br></pre></td></tr></table></figure>\n\n<p>根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，生成文件为ca.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -subj &quot;/CN=*&quot; -out ca.pem</span><br></pre></td></tr></table></figure>\n\n<p>创建服务端私钥，生成文件为server-key.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out server-key.pem 4096</span><br></pre></td></tr></table></figure>\n\n<p>创建服务端证书签名请求文件，用于CA证书给服务端证书签名，生成文件server.csr；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -subj &quot;/CN=*&quot; -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure>\n\n<p>创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem</span><br></pre></td></tr></table></figure>\n\n<p>创建客户端私钥，生成文件为key.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out key.pem 4096</span><br></pre></td></tr></table></figure>\n\n<p>创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client.csr；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -subj &quot;/CN=client&quot; -new -key key.pem -out client.csr</span><br></pre></td></tr></table></figure>\n\n<p>为了让秘钥适合客户端认证，创建一个扩展配置文件extfile-client.cnf；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这一块没太明白。执行好像没有效果。我执行了两次然后直接忽略了</span></span><br><span class=\"line\">echo extendedKeyUsage = clientAuth &gt; extfile-client.cnf</span><br></pre></td></tr></table></figure>\n\n<p>创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert.pem；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile-client.cnf</span><br></pre></td></tr></table></figure>\n\n<p>删除创建过程中多余的文件；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ca.srl server.csr client.csr extfile-client.cnf</span><br></pre></td></tr></table></figure>\n\n<p>生成得文件如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ca.pem CA证书</span><br><span class=\"line\">ca-key.pem CA证书私钥</span><br><span class=\"line\">server-cert.pem 服务端证书</span><br><span class=\"line\">server-key.pem 服务端证书私钥</span><br><span class=\"line\">cert.pem 客户端证书</span><br><span class=\"line\">key.pem 客户端证书私钥</span><br></pre></td></tr></table></figure>\n\n<p>修改docker配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n\n<p>这里的配置使用decker命令会报错：<code>-H unix://var/run/docker.sock</code>，那就在下面加入<code>-H unix://var/run/docker.sock</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ExecStart</span>=/usr/bin/dockerd -H fd:// -H tcp://<span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">2375</span> -H unix://var/run/docker.sock --tlsverify --tlscacert=/mydata/docker-ca/ca.pem --tlscert=/mydata/docker-ca/server-cert.pem --tlskey=/mydata/docker-ca/server-key.pem </span><br></pre></td></tr></table></figure>\n\n<p>重新加载docker和启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>将生成得证书文件放在java开发电脑我的地址：<code>C:\\\\docker-ca</code></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ca.pem CA证书</span><br><span class=\"line\">cert.pem 客户端证书</span><br><span class=\"line\">key.pem 客户端证书私钥</span><br></pre></td></tr></table></figure>\n\n<p>pom.xml docker-maven-plugin 配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>mall-tiny/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>https://ip:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">baseImage</span>&gt;</span>java:8<span class=\"tag\">&lt;/<span class=\"name\">baseImage</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">entryPoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerCertPath</span>&gt;</span>C:\\\\docker-ca<span class=\"tag\">&lt;/<span class=\"name\">dockerCertPath</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/qq_40321119/article/details/107951712\">如何保证docker2375端口的安全_LY破晓的博客-CSDN博客_docker2375安全设置</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_34061482/article/details/92717907\">HTTPS安全证书访问连接知识讲解_weixin_34061482的博客-CSDN博客</a></p>\n<p><a href=\"http://www.hackdig.com/08/hack-124456.htm\">Cetus：针对 Docker daemons 的加密劫持蠕虫_黑客技术 (hackdig.com)</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"docker 开启远程端口，引起病毒感染。","path":"2022/08/11/docker-开启远程端口，引起病毒感染。/","eyeCatchImage":null,"excerpt":"docker 开启远程端口，引起病毒感染。事件全过程","date":{"_isAMomentObject":true,"_i":"2022-08-11T15:10:16.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-11T15:10:16.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["docker","病毒"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"dockercmd","author":"wuxinheng","date":"2022-08-24T14:24:49.000Z","description":"docker 常用命令","_content":"| 命令                                                         | 备注                         |\n| ------------------------------------------------------------ | ---------------------------- |\n| sudo systemctl start docker                                  | 启动docker                   |\n| sudo systemctl stop docker                                   | 停止docker                   |\n| sudo systemctl restart docker                                | 重启docker                   |\n| sudo systemctl daemon-reload;sudo systemctl restart docker   | 重新加载配置文件，启动docker |\n| docker rm 容器名称\\容器ID                                    | 移除容器                     |\n| docker stop 容器名称\\容器ID                                  | 停止容器                     |\n| docker rmi 镜像名称\\镜像ID                                   | 移除镜像                     |\n| docker build  -t 镜像名称 .                                  | 打包镜像                     |\n| docker run  --rm --name 容器名称 -d -p 5555:80  镜像名称     | 构建容器                     |\n| docker search 包名                                           | docker搜索                   |\n| docker pull 包名:版本                                        | docker拉取                   |\n| docker version                                               | docker版本                   |\n| docker ps                                                    | 正在运行的容器               |\n| docker images                                                | docker的镜像                 |\n| docker exec -it -u root 容器名称 /bin/bash                   | 进入容器                     |\n| docker --help                                                | docker帮助                   |\n| docker info                                                  | docker信息                   |\n| docker start 容器名称\\容器ID                                 | 启动容器                     |\n| docker stop 容器名称\\容器ID                                  | 停止容器                     |\n| docker restart 容器名称\\容器ID                               | 重启容器                     |\n| docker kill 容器名称\\容器ID                                  | 强制停止容器                 |\n| docker logs 容器名称\\容器ID                                  | 查看容器日志                 |\n| docker stop $(docker ps -a -q)                               | 停止所有容器                 |\n| docker  rm $(docker ps -a -q)                                | 删除所有容器                 |\n| docker update --restart=always 容器名称\\容器ID               | 修改容器配置                 |\n| docker rmi -f $(docker images -qa) | 删除所有镜像                 |\n| docker network create newnetwork                             | docker创建网络环境           |\n| docker network rm newnetwork                                 | docker删除网络环境           |\n| docker network ls                                            | docker网络环境列表           |\n| docker run -v [本地文件路径]:[容器文件路径]                  | docker 卷的映射，数据持久化  |","source":"_posts/dockercmd.md","raw":"---\ntitle: dockercmd\nauthor: wuxinheng\ndate: 2022-08-24 22:24:49\ndescription: docker 常用命令\ncategories:\n  - docker\ntags:\n- cmd\n---\n| 命令                                                         | 备注                         |\n| ------------------------------------------------------------ | ---------------------------- |\n| sudo systemctl start docker                                  | 启动docker                   |\n| sudo systemctl stop docker                                   | 停止docker                   |\n| sudo systemctl restart docker                                | 重启docker                   |\n| sudo systemctl daemon-reload;sudo systemctl restart docker   | 重新加载配置文件，启动docker |\n| docker rm 容器名称\\容器ID                                    | 移除容器                     |\n| docker stop 容器名称\\容器ID                                  | 停止容器                     |\n| docker rmi 镜像名称\\镜像ID                                   | 移除镜像                     |\n| docker build  -t 镜像名称 .                                  | 打包镜像                     |\n| docker run  --rm --name 容器名称 -d -p 5555:80  镜像名称     | 构建容器                     |\n| docker search 包名                                           | docker搜索                   |\n| docker pull 包名:版本                                        | docker拉取                   |\n| docker version                                               | docker版本                   |\n| docker ps                                                    | 正在运行的容器               |\n| docker images                                                | docker的镜像                 |\n| docker exec -it -u root 容器名称 /bin/bash                   | 进入容器                     |\n| docker --help                                                | docker帮助                   |\n| docker info                                                  | docker信息                   |\n| docker start 容器名称\\容器ID                                 | 启动容器                     |\n| docker stop 容器名称\\容器ID                                  | 停止容器                     |\n| docker restart 容器名称\\容器ID                               | 重启容器                     |\n| docker kill 容器名称\\容器ID                                  | 强制停止容器                 |\n| docker logs 容器名称\\容器ID                                  | 查看容器日志                 |\n| docker stop $(docker ps -a -q)                               | 停止所有容器                 |\n| docker  rm $(docker ps -a -q)                                | 删除所有容器                 |\n| docker update --restart=always 容器名称\\容器ID               | 修改容器配置                 |\n| docker rmi -f $(docker images -qa) | 删除所有镜像                 |\n| docker network create newnetwork                             | docker创建网络环境           |\n| docker network rm newnetwork                                 | docker删除网络环境           |\n| docker network ls                                            | docker网络环境列表           |\n| docker run -v [本地文件路径]:[容器文件路径]                  | docker 卷的映射，数据持久化  |","slug":"dockercmd","published":1,"updated":"2023-09-24T07:38:31.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhj0012owtk5r355wqt","content":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sudo systemctl start docker</td>\n<td>启动docker</td>\n</tr>\n<tr>\n<td>sudo systemctl stop docker</td>\n<td>停止docker</td>\n</tr>\n<tr>\n<td>sudo systemctl restart docker</td>\n<td>重启docker</td>\n</tr>\n<tr>\n<td>sudo systemctl daemon-reload;sudo systemctl restart docker</td>\n<td>重新加载配置文件，启动docker</td>\n</tr>\n<tr>\n<td>docker rm 容器名称\\容器ID</td>\n<td>移除容器</td>\n</tr>\n<tr>\n<td>docker stop 容器名称\\容器ID</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td>docker rmi 镜像名称\\镜像ID</td>\n<td>移除镜像</td>\n</tr>\n<tr>\n<td>docker build  -t 镜像名称 .</td>\n<td>打包镜像</td>\n</tr>\n<tr>\n<td>docker run  –rm –name 容器名称 -d -p 5555:80  镜像名称</td>\n<td>构建容器</td>\n</tr>\n<tr>\n<td>docker search 包名</td>\n<td>docker搜索</td>\n</tr>\n<tr>\n<td>docker pull 包名:版本</td>\n<td>docker拉取</td>\n</tr>\n<tr>\n<td>docker version</td>\n<td>docker版本</td>\n</tr>\n<tr>\n<td>docker ps</td>\n<td>正在运行的容器</td>\n</tr>\n<tr>\n<td>docker images</td>\n<td>docker的镜像</td>\n</tr>\n<tr>\n<td>docker exec -it -u root 容器名称 &#x2F;bin&#x2F;bash</td>\n<td>进入容器</td>\n</tr>\n<tr>\n<td>docker –help</td>\n<td>docker帮助</td>\n</tr>\n<tr>\n<td>docker info</td>\n<td>docker信息</td>\n</tr>\n<tr>\n<td>docker start 容器名称\\容器ID</td>\n<td>启动容器</td>\n</tr>\n<tr>\n<td>docker stop 容器名称\\容器ID</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td>docker restart 容器名称\\容器ID</td>\n<td>重启容器</td>\n</tr>\n<tr>\n<td>docker kill 容器名称\\容器ID</td>\n<td>强制停止容器</td>\n</tr>\n<tr>\n<td>docker logs 容器名称\\容器ID</td>\n<td>查看容器日志</td>\n</tr>\n<tr>\n<td>docker stop $(docker ps -a -q)</td>\n<td>停止所有容器</td>\n</tr>\n<tr>\n<td>docker  rm $(docker ps -a -q)</td>\n<td>删除所有容器</td>\n</tr>\n<tr>\n<td>docker update –restart&#x3D;always 容器名称\\容器ID</td>\n<td>修改容器配置</td>\n</tr>\n<tr>\n<td>docker rmi -f $(docker images -qa)</td>\n<td>删除所有镜像</td>\n</tr>\n<tr>\n<td>docker network create newnetwork</td>\n<td>docker创建网络环境</td>\n</tr>\n<tr>\n<td>docker network rm newnetwork</td>\n<td>docker删除网络环境</td>\n</tr>\n<tr>\n<td>docker network ls</td>\n<td>docker网络环境列表</td>\n</tr>\n<tr>\n<td>docker run -v [本地文件路径]:[容器文件路径]</td>\n<td>docker 卷的映射，数据持久化</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sudo systemctl start docker</td>\n<td>启动docker</td>\n</tr>\n<tr>\n<td>sudo systemctl stop docker</td>\n<td>停止docker</td>\n</tr>\n<tr>\n<td>sudo systemctl restart docker</td>\n<td>重启docker</td>\n</tr>\n<tr>\n<td>sudo systemctl daemon-reload;sudo systemctl restart docker</td>\n<td>重新加载配置文件，启动docker</td>\n</tr>\n<tr>\n<td>docker rm 容器名称\\容器ID</td>\n<td>移除容器</td>\n</tr>\n<tr>\n<td>docker stop 容器名称\\容器ID</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td>docker rmi 镜像名称\\镜像ID</td>\n<td>移除镜像</td>\n</tr>\n<tr>\n<td>docker build  -t 镜像名称 .</td>\n<td>打包镜像</td>\n</tr>\n<tr>\n<td>docker run  –rm –name 容器名称 -d -p 5555:80  镜像名称</td>\n<td>构建容器</td>\n</tr>\n<tr>\n<td>docker search 包名</td>\n<td>docker搜索</td>\n</tr>\n<tr>\n<td>docker pull 包名:版本</td>\n<td>docker拉取</td>\n</tr>\n<tr>\n<td>docker version</td>\n<td>docker版本</td>\n</tr>\n<tr>\n<td>docker ps</td>\n<td>正在运行的容器</td>\n</tr>\n<tr>\n<td>docker images</td>\n<td>docker的镜像</td>\n</tr>\n<tr>\n<td>docker exec -it -u root 容器名称 &#x2F;bin&#x2F;bash</td>\n<td>进入容器</td>\n</tr>\n<tr>\n<td>docker –help</td>\n<td>docker帮助</td>\n</tr>\n<tr>\n<td>docker info</td>\n<td>docker信息</td>\n</tr>\n<tr>\n<td>docker start 容器名称\\容器ID</td>\n<td>启动容器</td>\n</tr>\n<tr>\n<td>docker stop 容器名称\\容器ID</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td>docker restart 容器名称\\容器ID</td>\n<td>重启容器</td>\n</tr>\n<tr>\n<td>docker kill 容器名称\\容器ID</td>\n<td>强制停止容器</td>\n</tr>\n<tr>\n<td>docker logs 容器名称\\容器ID</td>\n<td>查看容器日志</td>\n</tr>\n<tr>\n<td>docker stop $(docker ps -a -q)</td>\n<td>停止所有容器</td>\n</tr>\n<tr>\n<td>docker  rm $(docker ps -a -q)</td>\n<td>删除所有容器</td>\n</tr>\n<tr>\n<td>docker update –restart&#x3D;always 容器名称\\容器ID</td>\n<td>修改容器配置</td>\n</tr>\n<tr>\n<td>docker rmi -f $(docker images -qa)</td>\n<td>删除所有镜像</td>\n</tr>\n<tr>\n<td>docker network create newnetwork</td>\n<td>docker创建网络环境</td>\n</tr>\n<tr>\n<td>docker network rm newnetwork</td>\n<td>docker删除网络环境</td>\n</tr>\n<tr>\n<td>docker network ls</td>\n<td>docker网络环境列表</td>\n</tr>\n<tr>\n<td>docker run -v [本地文件路径]:[容器文件路径]</td>\n<td>docker 卷的映射，数据持久化</td>\n</tr>\n</tbody></table>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"dockercmd","path":"2022/08/24/dockercmd/","eyeCatchImage":null,"excerpt":"docker 常用命令","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:24:49.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:24:49.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["cmd"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"在docker中部署elk","description":"本文怎么在docker中部署elk以及常见问题","author":"wuxinheng","date":"2022-07-15T12:48:00.000Z","_content":"\n### ELK 安装\n\n![](../images/elkinfo.jpeg)\n\n#### Elasticsearch\n\n[下载地址/文档](https://www.elastic.co/cn/downloads/elasticsearch)\n\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:8.0.0\n```\n\n\n\n> 从Elasticsearch 8.0开始，默认启用安全性。启用安全保护后，弹性堆栈安全功能要求对传输网络层进行TLS加密，否则您的群集将无法启动。\n\n1. 为Elasticsearch和Kibana创建一个新的docker网络\n\n   ```\n   docker network create elastic\n   ```\n\n   \n\n2. 在Docker中启动Elasticsearch。为生成一个密码弹性的用户和终端的输出，以及用于注册Kibana的注册令牌。\n\n   ```\n   docker run --restart=always -d --name es01 --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.0.0\n   ```\n\n   \n\n3. 复制生成的密码和注册令牌，并将其保存在安全位置。这些值仅在首次启动Elasticsearch时显示。\n\n   ```\n   -> Elasticsearch security features have been automatically configured!\n   -> Authentication is enabled and cluster connections are encrypted.\n   \n   # 账号：elastic；初始密码：+x96YH3NDGmxG-aQ4M8P；重置密码命令：bin/elasticsearch-reset-password -u elastic\n   ->  Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):\n     +x96YH3NDGmxG-aQ4M8P\n   \n   # ca证书密钥：41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79\n   ->  HTTP CA certificate SHA-256 fingerprint:\n     41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79\n   \n   # kibana初始化注册密钥：\n   eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==\n   ->  Configure Kibana to use this cluster:\n   * Run Kibana and click the configuration link in the terminal when Kibana starts.\n   * Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):\n     eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==\n   \n   -> Configure other nodes to join this cluster:\n   * Copy the following enrollment token and start new Elasticsearch nodes with `bin/elasticsearch --enrollment-token <token>` (valid for the next 30 minutes):\n     eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlFvN3pEWUFCYVlPRkpUUmxpNkhMOlMzYzVYdWExUkkyWFUtdFZ4U0tENlEifQ==\n   \n     If you're running in Docker, copy the enrollment token and run:\n     `docker run -e \"ENROLLMENT_TOKEN=<token>\" docker.elastic.co/elasticsearch/elasticsearch:8.1.2`\n   \n   ```\n\n   1. 如果您需要重置的密码`弹性的`用户或其他内置用户，运行[`弹性搜索-重置-密码`](https://www.elastic.co/guide/en/elasticsearch/reference/current/reset-password.html)工具。该工具在弹性搜索中可用`/bin`Docker容器的目录。例如\n\n      ```\n      docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\n      # Password for the [elastic] user successfully reset.\n      # New value: 4GlsHFPF1kbh8_i4*A3I\n      ```\n\n      \n\n4. 复制`http_ca.crt`从Docker容器到本地机器的安全证书。\n\n   ```\n   docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .\n   ```\n\n   \n\n5. 打开一个新的终端，使用`http_ca.crt`从Docker容器中复制的文件。输入的密码`弹性的`出现提示时的用户。\n\n   ```\n   curl --cacert http_ca.crt -u elastic https://localhost:9200\n   ```\n\n   \n\n6. **生成注册令牌**\n\n   注册令牌的有效期为30分钟。如果需要生成新的注册令牌，请运行[`弹性搜索-创建-注册-令牌`](https://www.elastic.co/guide/en/elasticsearch/reference/current/create-enrollment-token.html)现有节点上的工具。该工具在弹性搜索中可用`容器`docker容器的目录。\n\n   例如，在现有的上运行以下命令`es01`为新的弹性搜索节点生成注册令牌的节点:\n\n   ```\n   docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node\n   \n   # eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklfQzhEb0FCWmlRQnRCNGFiLVRuOnlwMzZET0Y0VHAtNzd1SC1yMUYzbGcifQ==\n   \n   ```\n\n   \n\n7. 在启动第一个节点的终端中，复制generatedenrollment令牌以添加新的Elasticsearch节点。在您的新节点上，启动Elasticsearch并包含生成的注册令牌。\n\n   ```\n   docker run -e ENROLLMENT_TOKEN=\"<token>\" --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2\n   \n   # docker run -e ENROLLMENT_TOKEN=\"eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklmQUpEb0FCWmlRQnRCNGFKdVQ2OlUwODhtejV2U0EtaWowaGlHRVRkOGcifQ==\" --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2\n   # 如果失败可能是内存溢出\n   ```\n\n#### Logstash\n\nhttps://www.cnblogs.com/linjiqin/p/12103645.html\n\n#### Kibana\n\n```\ndocker pull kibana:8.0.0\n```\n\n文档地址\n\nhttps://blog.csdn.net/UbuntuTouch/article/details/122936411?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164959816216781683947810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=164959816216781683947810&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-10-122936411.nonecase&utm_term=%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4450\n\n#### 解决问题\n\nvi/vim：容器内无法使用\n\n```\ndocker exec -it -u 0 容器名称/id /bin/bash\napt-get update\napt-get install vim*\n```\n\n> apt-get 在容器内会提示一个路径错误。是因为权限不足。在进入容器时声明权限`-u 0`使用root权限进入。\n>\n> *apt-get*，是一条linux命令，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。\n>\n> 此处可以理解centos 使用 yum 安装软件。Ubuntu 使用 apt-get。但是Linux环境下的docker是使用apt-get。包管理跟操作系统无关。","source":"_posts/elk.md","raw":"---\ntitle: 在docker中部署elk\ndescription: 本文怎么在docker中部署elk以及常见问题\nauthor: wuxinheng\ndate: 2022-07-15 20:48:00\ntags:\n- elk\n- elasticsearch\n- elastic\n- Kibana\n- deploy\ncategories:\n- docker\n---\n\n### ELK 安装\n\n![](../images/elkinfo.jpeg)\n\n#### Elasticsearch\n\n[下载地址/文档](https://www.elastic.co/cn/downloads/elasticsearch)\n\n```\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:8.0.0\n```\n\n\n\n> 从Elasticsearch 8.0开始，默认启用安全性。启用安全保护后，弹性堆栈安全功能要求对传输网络层进行TLS加密，否则您的群集将无法启动。\n\n1. 为Elasticsearch和Kibana创建一个新的docker网络\n\n   ```\n   docker network create elastic\n   ```\n\n   \n\n2. 在Docker中启动Elasticsearch。为生成一个密码弹性的用户和终端的输出，以及用于注册Kibana的注册令牌。\n\n   ```\n   docker run --restart=always -d --name es01 --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.0.0\n   ```\n\n   \n\n3. 复制生成的密码和注册令牌，并将其保存在安全位置。这些值仅在首次启动Elasticsearch时显示。\n\n   ```\n   -> Elasticsearch security features have been automatically configured!\n   -> Authentication is enabled and cluster connections are encrypted.\n   \n   # 账号：elastic；初始密码：+x96YH3NDGmxG-aQ4M8P；重置密码命令：bin/elasticsearch-reset-password -u elastic\n   ->  Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):\n     +x96YH3NDGmxG-aQ4M8P\n   \n   # ca证书密钥：41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79\n   ->  HTTP CA certificate SHA-256 fingerprint:\n     41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79\n   \n   # kibana初始化注册密钥：\n   eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==\n   ->  Configure Kibana to use this cluster:\n   * Run Kibana and click the configuration link in the terminal when Kibana starts.\n   * Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):\n     eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==\n   \n   -> Configure other nodes to join this cluster:\n   * Copy the following enrollment token and start new Elasticsearch nodes with `bin/elasticsearch --enrollment-token <token>` (valid for the next 30 minutes):\n     eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlFvN3pEWUFCYVlPRkpUUmxpNkhMOlMzYzVYdWExUkkyWFUtdFZ4U0tENlEifQ==\n   \n     If you're running in Docker, copy the enrollment token and run:\n     `docker run -e \"ENROLLMENT_TOKEN=<token>\" docker.elastic.co/elasticsearch/elasticsearch:8.1.2`\n   \n   ```\n\n   1. 如果您需要重置的密码`弹性的`用户或其他内置用户，运行[`弹性搜索-重置-密码`](https://www.elastic.co/guide/en/elasticsearch/reference/current/reset-password.html)工具。该工具在弹性搜索中可用`/bin`Docker容器的目录。例如\n\n      ```\n      docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\n      # Password for the [elastic] user successfully reset.\n      # New value: 4GlsHFPF1kbh8_i4*A3I\n      ```\n\n      \n\n4. 复制`http_ca.crt`从Docker容器到本地机器的安全证书。\n\n   ```\n   docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .\n   ```\n\n   \n\n5. 打开一个新的终端，使用`http_ca.crt`从Docker容器中复制的文件。输入的密码`弹性的`出现提示时的用户。\n\n   ```\n   curl --cacert http_ca.crt -u elastic https://localhost:9200\n   ```\n\n   \n\n6. **生成注册令牌**\n\n   注册令牌的有效期为30分钟。如果需要生成新的注册令牌，请运行[`弹性搜索-创建-注册-令牌`](https://www.elastic.co/guide/en/elasticsearch/reference/current/create-enrollment-token.html)现有节点上的工具。该工具在弹性搜索中可用`容器`docker容器的目录。\n\n   例如，在现有的上运行以下命令`es01`为新的弹性搜索节点生成注册令牌的节点:\n\n   ```\n   docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node\n   \n   # eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklfQzhEb0FCWmlRQnRCNGFiLVRuOnlwMzZET0Y0VHAtNzd1SC1yMUYzbGcifQ==\n   \n   ```\n\n   \n\n7. 在启动第一个节点的终端中，复制generatedenrollment令牌以添加新的Elasticsearch节点。在您的新节点上，启动Elasticsearch并包含生成的注册令牌。\n\n   ```\n   docker run -e ENROLLMENT_TOKEN=\"<token>\" --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2\n   \n   # docker run -e ENROLLMENT_TOKEN=\"eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklmQUpEb0FCWmlRQnRCNGFKdVQ2OlUwODhtejV2U0EtaWowaGlHRVRkOGcifQ==\" --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2\n   # 如果失败可能是内存溢出\n   ```\n\n#### Logstash\n\nhttps://www.cnblogs.com/linjiqin/p/12103645.html\n\n#### Kibana\n\n```\ndocker pull kibana:8.0.0\n```\n\n文档地址\n\nhttps://blog.csdn.net/UbuntuTouch/article/details/122936411?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164959816216781683947810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=164959816216781683947810&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-10-122936411.nonecase&utm_term=%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4450\n\n#### 解决问题\n\nvi/vim：容器内无法使用\n\n```\ndocker exec -it -u 0 容器名称/id /bin/bash\napt-get update\napt-get install vim*\n```\n\n> apt-get 在容器内会提示一个路径错误。是因为权限不足。在进入容器时声明权限`-u 0`使用root权限进入。\n>\n> *apt-get*，是一条linux命令，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。\n>\n> 此处可以理解centos 使用 yum 安装软件。Ubuntu 使用 apt-get。但是Linux环境下的docker是使用apt-get。包管理跟操作系统无关。","slug":"elk","published":1,"updated":"2023-09-24T07:38:31.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhj0014owtkhakr7zwl","content":"<h3 id=\"ELK-安装\"><a href=\"#ELK-安装\" class=\"headerlink\" title=\"ELK 安装\"></a>ELK 安装</h3><p><img src=\"/../images/elkinfo.jpeg\"></p>\n<h4 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h4><p><a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">下载地址&#x2F;文档</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull docker.elastic.co/elasticsearch/elasticsearch:8.0.0</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>从Elasticsearch 8.0开始，默认启用安全性。启用安全保护后，弹性堆栈安全功能要求对传输网络层进行TLS加密，否则您的群集将无法启动。</p>\n</blockquote>\n<ol>\n<li><p>为Elasticsearch和Kibana创建一个新的docker网络</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create elastic</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在Docker中启动Elasticsearch。为生成一个密码弹性的用户和终端的输出，以及用于注册Kibana的注册令牌。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always -d --name es01 --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.0.0</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>复制生成的密码和注册令牌，并将其保存在安全位置。这些值仅在首次启动Elasticsearch时显示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; Elasticsearch security features have been automatically configured!</span><br><span class=\"line\">-&gt; Authentication is enabled and cluster connections are encrypted.</span><br><span class=\"line\"></span><br><span class=\"line\"># 账号：elastic；初始密码：+x96YH3NDGmxG-aQ4M8P；重置密码命令：bin/elasticsearch-reset-password -u elastic</span><br><span class=\"line\">-&gt;  Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):</span><br><span class=\"line\">  +x96YH3NDGmxG-aQ4M8P</span><br><span class=\"line\"></span><br><span class=\"line\"># ca证书密钥：41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79</span><br><span class=\"line\">-&gt;  HTTP CA certificate SHA-256 fingerprint:</span><br><span class=\"line\">  41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79</span><br><span class=\"line\"></span><br><span class=\"line\"># kibana初始化注册密钥：</span><br><span class=\"line\">eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==</span><br><span class=\"line\">-&gt;  Configure Kibana to use this cluster:</span><br><span class=\"line\">* Run Kibana and click the configuration link in the terminal when Kibana starts.</span><br><span class=\"line\">* Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):</span><br><span class=\"line\">  eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; Configure other nodes to join this cluster:</span><br><span class=\"line\">* Copy the following enrollment token and start new Elasticsearch nodes with `bin/elasticsearch --enrollment-token &lt;token&gt;` (valid for the next 30 minutes):</span><br><span class=\"line\">  eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlFvN3pEWUFCYVlPRkpUUmxpNkhMOlMzYzVYdWExUkkyWFUtdFZ4U0tENlEifQ==</span><br><span class=\"line\"></span><br><span class=\"line\">  If you&#x27;re running in Docker, copy the enrollment token and run:</span><br><span class=\"line\">  `docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.1.2`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>如果您需要重置的密码<code>弹性的</code>用户或其他内置用户，运行<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/reset-password.html\"><code>弹性搜索-重置-密码</code></a>工具。该工具在弹性搜索中可用<code>/bin</code>Docker容器的目录。例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic</span><br><span class=\"line\"># Password for the [elastic] user successfully reset.</span><br><span class=\"line\"># New value: 4GlsHFPF1kbh8_i4*A3I</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>复制<code>http_ca.crt</code>从Docker容器到本地机器的安全证书。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>打开一个新的终端，使用<code>http_ca.crt</code>从Docker容器中复制的文件。输入的密码<code>弹性的</code>出现提示时的用户。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --cacert http_ca.crt -u elastic https://localhost:9200</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>生成注册令牌</strong></p>\n<p>注册令牌的有效期为30分钟。如果需要生成新的注册令牌，请运行<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/create-enrollment-token.html\"><code>弹性搜索-创建-注册-令牌</code></a>现有节点上的工具。该工具在弹性搜索中可用<code>容器</code>docker容器的目录。</p>\n<p>例如，在现有的上运行以下命令<code>es01</code>为新的弹性搜索节点生成注册令牌的节点:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node</span><br><span class=\"line\"></span><br><span class=\"line\"># eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklfQzhEb0FCWmlRQnRCNGFiLVRuOnlwMzZET0Y0VHAtNzd1SC1yMUYzbGcifQ==</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在启动第一个节点的终端中，复制generatedenrollment令牌以添加新的Elasticsearch节点。在您的新节点上，启动Elasticsearch并包含生成的注册令牌。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -e ENROLLMENT_TOKEN=&quot;&lt;token&gt;&quot; --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2</span><br><span class=\"line\"></span><br><span class=\"line\"># docker run -e ENROLLMENT_TOKEN=&quot;eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklmQUpEb0FCWmlRQnRCNGFKdVQ2OlUwODhtejV2U0EtaWowaGlHRVRkOGcifQ==&quot; --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2</span><br><span class=\"line\"># 如果失败可能是内存溢出</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h4><p><a href=\"https://www.cnblogs.com/linjiqin/p/12103645.html\">https://www.cnblogs.com/linjiqin/p/12103645.html</a></p>\n<h4 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kibana:8.0.0</span><br></pre></td></tr></table></figure>\n\n<p>文档地址</p>\n<p><a href=\"https://blog.csdn.net/UbuntuTouch/article/details/122936411?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164959816216781683947810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=164959816216781683947810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-10-122936411.nonecase&amp;utm_term=%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4450\">https://blog.csdn.net/UbuntuTouch/article/details/122936411?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164959816216781683947810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=164959816216781683947810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-10-122936411.nonecase&amp;utm_term=%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4450</a></p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>vi&#x2F;vim：容器内无法使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it -u 0 容器名称/id /bin/bash</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install vim*</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>apt-get 在容器内会提示一个路径错误。是因为权限不足。在进入容器时声明权限<code>-u 0</code>使用root权限进入。</p>\n<p><em>apt-get</em>，是一条linux命令，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。</p>\n<p>此处可以理解centos 使用 yum 安装软件。Ubuntu 使用 apt-get。但是Linux环境下的docker是使用apt-get。包管理跟操作系统无关。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ELK-安装\"><a href=\"#ELK-安装\" class=\"headerlink\" title=\"ELK 安装\"></a>ELK 安装</h3><p><img src=\"/../images/elkinfo.jpeg\"></p>\n<h4 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h4><p><a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">下载地址&#x2F;文档</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull docker.elastic.co/elasticsearch/elasticsearch:8.0.0</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>从Elasticsearch 8.0开始，默认启用安全性。启用安全保护后，弹性堆栈安全功能要求对传输网络层进行TLS加密，否则您的群集将无法启动。</p>\n</blockquote>\n<ol>\n<li><p>为Elasticsearch和Kibana创建一个新的docker网络</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create elastic</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在Docker中启动Elasticsearch。为生成一个密码弹性的用户和终端的输出，以及用于注册Kibana的注册令牌。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always -d --name es01 --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.0.0</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>复制生成的密码和注册令牌，并将其保存在安全位置。这些值仅在首次启动Elasticsearch时显示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; Elasticsearch security features have been automatically configured!</span><br><span class=\"line\">-&gt; Authentication is enabled and cluster connections are encrypted.</span><br><span class=\"line\"></span><br><span class=\"line\"># 账号：elastic；初始密码：+x96YH3NDGmxG-aQ4M8P；重置密码命令：bin/elasticsearch-reset-password -u elastic</span><br><span class=\"line\">-&gt;  Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):</span><br><span class=\"line\">  +x96YH3NDGmxG-aQ4M8P</span><br><span class=\"line\"></span><br><span class=\"line\"># ca证书密钥：41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79</span><br><span class=\"line\">-&gt;  HTTP CA certificate SHA-256 fingerprint:</span><br><span class=\"line\">  41696e2dd0dca56e7b74b06bf5b2e002b77bce150d68915a0dbb936124530f79</span><br><span class=\"line\"></span><br><span class=\"line\"># kibana初始化注册密钥：</span><br><span class=\"line\">eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==</span><br><span class=\"line\">-&gt;  Configure Kibana to use this cluster:</span><br><span class=\"line\">* Run Kibana and click the configuration link in the terminal when Kibana starts.</span><br><span class=\"line\">* Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):</span><br><span class=\"line\">  eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlJJN3pEWUFCYVlPRkpUUmxpNkhSOk9yWkJqc0gxU2txRmRmVmVrMFdYd1EifQ==</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; Configure other nodes to join this cluster:</span><br><span class=\"line\">* Copy the following enrollment token and start new Elasticsearch nodes with `bin/elasticsearch --enrollment-token &lt;token&gt;` (valid for the next 30 minutes):</span><br><span class=\"line\">  eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IlFvN3pEWUFCYVlPRkpUUmxpNkhMOlMzYzVYdWExUkkyWFUtdFZ4U0tENlEifQ==</span><br><span class=\"line\"></span><br><span class=\"line\">  If you&#x27;re running in Docker, copy the enrollment token and run:</span><br><span class=\"line\">  `docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.1.2`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>如果您需要重置的密码<code>弹性的</code>用户或其他内置用户，运行<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/reset-password.html\"><code>弹性搜索-重置-密码</code></a>工具。该工具在弹性搜索中可用<code>/bin</code>Docker容器的目录。例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic</span><br><span class=\"line\"># Password for the [elastic] user successfully reset.</span><br><span class=\"line\"># New value: 4GlsHFPF1kbh8_i4*A3I</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>复制<code>http_ca.crt</code>从Docker容器到本地机器的安全证书。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>打开一个新的终端，使用<code>http_ca.crt</code>从Docker容器中复制的文件。输入的密码<code>弹性的</code>出现提示时的用户。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --cacert http_ca.crt -u elastic https://localhost:9200</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>生成注册令牌</strong></p>\n<p>注册令牌的有效期为30分钟。如果需要生成新的注册令牌，请运行<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/create-enrollment-token.html\"><code>弹性搜索-创建-注册-令牌</code></a>现有节点上的工具。该工具在弹性搜索中可用<code>容器</code>docker容器的目录。</p>\n<p>例如，在现有的上运行以下命令<code>es01</code>为新的弹性搜索节点生成注册令牌的节点:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node</span><br><span class=\"line\"></span><br><span class=\"line\"># eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklfQzhEb0FCWmlRQnRCNGFiLVRuOnlwMzZET0Y0VHAtNzd1SC1yMUYzbGcifQ==</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在启动第一个节点的终端中，复制generatedenrollment令牌以添加新的Elasticsearch节点。在您的新节点上，启动Elasticsearch并包含生成的注册令牌。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -e ENROLLMENT_TOKEN=&quot;&lt;token&gt;&quot; --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2</span><br><span class=\"line\"></span><br><span class=\"line\"># docker run -e ENROLLMENT_TOKEN=&quot;eyJ2ZXIiOiI4LjEuMiIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNDE2OTZlMmRkMGRjYTU2ZTdiNzRiMDZiZjViMmUwMDJiNzdiY2UxNTBkNjg5MTVhMGRiYjkzNjEyNDUzMGY3OSIsImtleSI6IklmQUpEb0FCWmlRQnRCNGFKdVQ2OlUwODhtejV2U0EtaWowaGlHRVRkOGcifQ==&quot; --name es02 --net elastic -it docker.elastic.co/elasticsearch/elasticsearch:8.1.2</span><br><span class=\"line\"># 如果失败可能是内存溢出</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h4><p><a href=\"https://www.cnblogs.com/linjiqin/p/12103645.html\">https://www.cnblogs.com/linjiqin/p/12103645.html</a></p>\n<h4 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kibana:8.0.0</span><br></pre></td></tr></table></figure>\n\n<p>文档地址</p>\n<p><a href=\"https://blog.csdn.net/UbuntuTouch/article/details/122936411?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164959816216781683947810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=164959816216781683947810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-10-122936411.nonecase&amp;utm_term=%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4450\">https://blog.csdn.net/UbuntuTouch/article/details/122936411?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164959816216781683947810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=164959816216781683947810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-10-122936411.nonecase&amp;utm_term=%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4450</a></p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>vi&#x2F;vim：容器内无法使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it -u 0 容器名称/id /bin/bash</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install vim*</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>apt-get 在容器内会提示一个路径错误。是因为权限不足。在进入容器时声明权限<code>-u 0</code>使用root权限进入。</p>\n<p><em>apt-get</em>，是一条linux命令，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。</p>\n<p>此处可以理解centos 使用 yum 安装软件。Ubuntu 使用 apt-get。但是Linux环境下的docker是使用apt-get。包管理跟操作系统无关。</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/../images/elkinfo.jpeg","popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"在docker中部署elk","path":"2022/07/15/elk/","eyeCatchImage":"/../images/elkinfo.jpeg","excerpt":"本文怎么在docker中部署elk以及常见问题","date":{"_isAMomentObject":true,"_i":"2022-07-15T12:48:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-15T12:48:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["deploy","elk","elasticsearch","elastic","Kibana"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"go小试牛刀","author":"wuxinheng","description":"go小试牛刀","date":"2022-09-05T14:14:22.000Z","_content":"#### 下载安装[GoLand](https://www.jetbrains.com.cn/go/)\n\ngoland 会自动安装golang，但是不会设置全局环境变量。需要手动设置，在goland中找到sdk地址。\n\n#### 安装beego\n\n```bash\n# 设置网络环境\ngo env -w GOPROXY=https://goproxy.io,direct\ngo env -w GO111MODULE=on\n\n# 安装bee\ngo get -u github.com/astaxie/beego\ngo get -u github.com/beego/bee\n\n# 检查bee \nbee version\n\n# bee如果失败，需要手动打包bee\n# 查看环境变量\ngo env  \nGOPATH=C:\\Users\\Administrator\\go\n# 找到bee地址\nC:\\Users\\Administrator\\go\\src\\github.com\\beego\\bee\n# 三种任意一种都行，都试一下吧，不太确定是哪个。我记得是前两个，第三个是我网上看见的。不一定生成bee.exe,也有可能是main.exe,名字改一下bee.exe,配置一下环境变量就好了，\ngo build \ngo build main.go\ngo install\n```\n\n#### 新建api\n\n```bash\n# 最开始我是这样的，发现不对\nbee new bee-api\n# 正确命令\nbee api bee-api\n# 需要修改swagger/index.html, \n#SwaggerUIBundle url值:https://petstore.swagger.io/v2/swagger.json》swagger.json,不然不会显示正确的文档\n# 访问：http://localhost:8080/swagger\n# 程序配置信息修改在conf/app.conf文件\n```\n\n#### 运行项目\n\n```bash\nbee run -gendoc=true -downdoc=true\n```\n\n#### 照葫芦画瓢写接口\n\n> 还好提供了参照\n\n##### controllers\\demo.go\n\n```go\npackage controllers\n\nimport (\n\t\"demo-go-api/models\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/astaxie/beego/orm\"\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// demo控制器\ntype DemoController struct {\n\tbeego.Controller\n}\n\n// @Title GetAll\n// @Description 接口介绍\n// @Failure 403 uid is empty\n// @router /GetAll [get]\nfunc (s *DemoController) GetAll() {}\n\n// @Title GetStr\n// @Description GetStrInfo\n// @Success 200 {string} delete success!\n// @Failure 403 uid is empty\n// @router /GetStr [Post]\nfunc (s *DemoController) GetStr() {\n\tvar o orm.Ormer\n\to = orm.NewOrm() // 创建一个 Ormer\n\n\tlog := new(models.Log)\n\tlog.Id = 1\n\tlog.Title = \"测试\"\n\tfmt.Println(o.Insert(log)) // 插入对象\n\n\tlog1 := models.Log{Id: 1}\n\n\terr := o.Read(&log1) // 查询\n\n\tif err == orm.ErrNoRows {\n\t\tfmt.Println(\"查询不到\")\n\t} else if err == orm.ErrMissPK {\n\t\tfmt.Println(\"找不到主键\")\n\t} else {\n\t\tfmt.Println(log1.Id, log1.Title)\n\t}\n\n\tif o.Read(&log1) == nil {\n\t\tlog1.Title = \"MyName\"\n        // 修改\n\t\tif num, err := o.Update(&log1); err == nil {\n\t\t\tfmt.Println(num)\n\t\t}\n\t}\n\t// 删除\n\tif num, err := o.Delete(&models.Log{Id: 1}); err == nil {\n\t\tfmt.Println(num)\n\t}\n\n\tusers := models.GetAllUsers()\n\ts.Data[\"json\"] = users\n\ts.ServeJSON()\n\n}\n\n// @Title GetStr1\n// @Description \n// @Param\tbody\t\tbody \tmodels.Log\ttrue\t\t\"The object content\"\n// @Success 200 {string} delete success!\n// @Failure 403 uid is empty\n// @router /GetStr1 [Post]\nfunc (s *DemoController) GetStr1() {\n\tvar ob models.Log\n    // 获取body\n\tjson.Unmarshal(s.Ctx.Input.RequestBody, &ob)\n\tusers := models.GetAllUsers()\n\ts.Data[\"json\"] = users\n\ts.ServeJSON()\n\n}\n\n```\n\n##### controllers\\user.go\n\n```go\npackage controllers\n\nimport (\n\t\"demo-go-api/models\"\n\t\"encoding/json\"\n\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// Operations about Users\ntype UserController struct {\n\tbeego.Controller\n}\n\n// @Title CreateUser\n// @Description create users\n// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t\"body for user content\"\n// @Success 200 {int} models.User.Id\n// @Failure 403 body is empty\n// @router / [post]\nfunc (u *UserController) Post() {\n\tvar user models.User\n\tjson.Unmarshal(u.Ctx.Input.RequestBody, &user)\n\tuid := models.AddUser(user)\n\tu.Data[\"json\"] = map[string]string{\"uid\": uid}\n\tu.ServeJSON()\n}\n\n// @Title GetAll\n// @Description get all Users\n// @Success 200 {object} models.User\n// @router / [get]\nfunc (u *UserController) GetAll() {\n\tusers := models.GetAllUsers()\n\tu.Data[\"json\"] = users\n\tu.ServeJSON()\n}\n\n// @Title Get\n// @Description get user by uid\n// @Param\tuid\t\tpath \tstring\ttrue\t\t\"The key for staticblock\"\n// @Success 200 {object} models.User\n// @Failure 403 :uid is empty\n// @router /:uid [get]\nfunc (u *UserController) Get() {\n\tuid := u.GetString(\":uid\")\n\tif uid != \"\" {\n\t\tuser, err := models.GetUser(uid)\n\t\tif err != nil {\n\t\t\tu.Data[\"json\"] = err.Error()\n\t\t} else {\n\t\t\tu.Data[\"json\"] = user\n\t\t}\n\t}\n\tu.ServeJSON()\n}\n\n// @Title Update\n// @Description update the user\n// @Param\tuid\t\tpath \tstring\ttrue\t\t\"The uid you want to update\"\n// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t\"body for user content\"\n// @Success 200 {object} models.User\n// @Failure 403 :uid is not int\n// @router /:uid [put]\nfunc (u *UserController) Put() {\n\tuid := u.GetString(\":uid\")\n\tif uid != \"\" {\n\t\tvar user models.User\n\t\tjson.Unmarshal(u.Ctx.Input.RequestBody, &user)\n\t\tuu, err := models.UpdateUser(uid, &user)\n\t\tif err != nil {\n\t\t\tu.Data[\"json\"] = err.Error()\n\t\t} else {\n\t\t\tu.Data[\"json\"] = uu\n\t\t}\n\t}\n\tu.ServeJSON()\n}\n\n// @Title Delete\n// @Description delete the user\n// @Param\tuid\t\tpath \tstring\ttrue\t\t\"The uid you want to delete\"\n// @Success 200 {string} delete success!\n// @Failure 403 uid is empty\n// @router /:uid [delete]\nfunc (u *UserController) Delete() {\n\tuid := u.GetString(\":uid\")\n\tmodels.DeleteUser(uid)\n\tu.Data[\"json\"] = \"delete success!\"\n\tu.ServeJSON()\n}\n\n// @Title Login\n// @Description Logs user into the system\n// @Param\tusername\t\tquery \tstring\ttrue\t\t\"The username for login\"\n// @Param\tpassword\t\tquery \tstring\ttrue\t\t\"The password for login\"\n// @Success 200 {string} login success\n// @Failure 403 user not exist\n// @router /login [get]\nfunc (u *UserController) Login() {\n    // 获取单个参数\n\tusername := u.GetString(\"username\")\n\tpassword := u.GetString(\"password\")\n\tif models.Login(username, password) {\n\t\tu.Data[\"json\"] = \"login success\"\n\t} else {\n\t\tu.Data[\"json\"] = \"user not exist\"\n\t}\n\tu.ServeJSON()\n}\n\n// @Title logout\n// @Description Logs out current logged in user session\n// @Success 200 {string} logout success\n// @router /logout [get]\nfunc (u *UserController) Logout() {\n\tu.Data[\"json\"] = \"logout success\"\n\tu.ServeJSON()\n}\n\n\n```\n\n##### router\\router.go\n\n```go\n// Package routers @APIVersion 1.0.0\n// @Title beego Test API\n// @Description beego has a very cool tools to autogenerate documents for your API\n// @Contact astaxie@gmail.com\n// @TermsOfServiceUrl http://beego.me/\n// @License Apache 2.0\n// @LicenseUrl http://www.apache.org/licenses/LICENSE-2.0.html\npackage routers\n\nimport (\n\t\"demo-go-api/controllers\"\n\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\nfunc init() {\n\tns := beego.NewNamespace(\"/v1\",\n\t\tbeego.NSNamespace(\"/object\",\n\t\t\tbeego.NSInclude(\n\t\t\t\t&controllers.ObjectController{},\n\t\t\t),\n\t\t),\n\t\tbeego.NSNamespace(\"/user\",\n\t\t\tbeego.NSInclude(\n\t\t\t\t&controllers.UserController{},\n\t\t\t),\n\t\t),\n\t\tbeego.NSNamespace(\"/demo\",\n\t\t\tbeego.NSInclude(\n\t\t\t\t&controllers.DemoController{},\n\t\t\t),\n\t\t),\n\t)\n\tbeego.AddNamespace(ns)\n}\n```\n\n##### models\\models.go\n\n```go\npackage models\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/astaxie/beego\"\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype Store struct {\n\tId              int64\n\tTitle           string\n\tCreated         time.Time `orm:\"index\"`\n\tViews           int64     `orm:\"index\"`\n\tTopicTime       time.Time `orm:\"index\"`\n\tTopicCount      int64\n\tTopicLastUserId int64\n}\n\ntype Log struct {\n\tId    int64\n\tTitle string\n}\n\ntype Customer struct {\n\tId              int64\n\tUid             int64\n\tTitle           string\n\tContent         string `orm:\"size(5000)\"`\n\tAttachment      string\n\tCreated         time.Time `orm:\"index\"`\n\tUpdated         time.Time `orm:\"index\"`\n\tViews           int64     `orm:\"index\"`\n\tAuthor          string\n\tReplyTime       time.Time `orm:\"index\"`\n\tReplyCount      int64\n\tReplyLastUserId int64\n}\n\n//这个是个模版方法，搭配 app.conf 使用\n\nfunc RegisterDB() {\n\t//注册 model\n\torm.RegisterModel(new(Store), new(Customer), new(Log))\n\t//注册驱动\n\torm.RegisterDriver(\"mysql\", orm.DRMySQL)\n\t//注册默认数据库\n\thost := beego.AppConfig.String(\"db::host\")\n\tport := beego.AppConfig.String(\"db::port\")\n\tdbname := beego.AppConfig.String(\"db::databaseName\")\n\tuser := beego.AppConfig.String(\"db::userName\")\n\tpwd := beego.AppConfig.String(\"db::password\")\n\n\tdbcon := user + \":\" + pwd + \"@tcp(\" + host + \":\" + port + \")/\" + dbname + \"?charset=utf8\"\n\tfmt.Print(dbcon)\n\torm.RegisterDataBase(\"default\", \"mysql\", dbcon) //密码为空格式\n\t//自动创建表 参数二为是否开启创建表   参数三是否更新表\n\torm.RunSyncdb(\"default\", true, true)\n\t/*\"root:root@tcp(localhost:3306)/test\"*/\n}\n\n```\n\n##### main.go\n\n```go\npackage main\n\nimport (\n\t\"demo-go-api/models\"\n\t_ \"demo-go-api/routers\"\n\t\"github.com/astaxie/beego/orm\"\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// 引入数据模型\nfunc init() {\n\t// 注册数据库\n\tmodels.RegisterDB()\n\n}\n\nfunc main() {\n\tif beego.BConfig.RunMode == \"dev\" {\n\t\tbeego.BConfig.WebConfig.DirectoryIndex = true\n\t\tbeego.BConfig.WebConfig.StaticDir[\"/swagger\"] = \"swagger\"\n\t}\n\t//// 开启 ORM 调试模式\n\torm.Debug = true\n\t// 自动建表\n\n\torm.RunSyncdb(\"default\", false, true)\n\n\tbeego.Run()\n}\n```\n\n##### orm可能需要获取\n\n```bash\ngo get github.com/astaxie/beego/orm\n```\n\n#### 部署到docker\n\n```dockerfile\nFROM golang:latest\n\n\nENV GOPROXY https://goproxy.cn,direct\nWORKDIR $GOPATH/src/github.com/test/demo-go-api\nCOPY . $GOPATH/src/github.com/test/demo-go-api\nRUN go build .\n\n\nEXPOSE 8000\nENTRYPOINT [\"./demo-go-api\"]\n```\n\n```shell\ndocker build -t go-api .\ndocker run -d --name go-api go-api:latest\n```\n\n#### goland调试\n\n新增运行调试配置如下\n\n![](..\\images\\goland调试配置.png)\n\n#### 问题及文档\n\n[beego框架出现的问题-----panic: ./ippanichandle.exe flag redefined: graceful_Studying！！！的博客-CSDN博客](https://blog.csdn.net/qwerty1372431588/article/details/119244413)\n\n[前景 · Go语言中文文档 (topgoer.com)](https://www.topgoer.com/)\n\n[Beego 连接mysql 数据库 - 灰信网（软件开发博客聚合） (freesion.com)](https://www.freesion.com/article/59991204179/)\n\n[如何使用GoLand调试beego项目 - 简书 (jianshu.com)](https://www.jianshu.com/p/fe89dbde6a99)","source":"_posts/go小试牛刀.md","raw":"---\ntitle: go小试牛刀\nauthor: wuxinheng\ndescription: go小试牛刀\ndate: 2022-09-05 22:14:22\ntags:\ncategories:\n- go\n---\n#### 下载安装[GoLand](https://www.jetbrains.com.cn/go/)\n\ngoland 会自动安装golang，但是不会设置全局环境变量。需要手动设置，在goland中找到sdk地址。\n\n#### 安装beego\n\n```bash\n# 设置网络环境\ngo env -w GOPROXY=https://goproxy.io,direct\ngo env -w GO111MODULE=on\n\n# 安装bee\ngo get -u github.com/astaxie/beego\ngo get -u github.com/beego/bee\n\n# 检查bee \nbee version\n\n# bee如果失败，需要手动打包bee\n# 查看环境变量\ngo env  \nGOPATH=C:\\Users\\Administrator\\go\n# 找到bee地址\nC:\\Users\\Administrator\\go\\src\\github.com\\beego\\bee\n# 三种任意一种都行，都试一下吧，不太确定是哪个。我记得是前两个，第三个是我网上看见的。不一定生成bee.exe,也有可能是main.exe,名字改一下bee.exe,配置一下环境变量就好了，\ngo build \ngo build main.go\ngo install\n```\n\n#### 新建api\n\n```bash\n# 最开始我是这样的，发现不对\nbee new bee-api\n# 正确命令\nbee api bee-api\n# 需要修改swagger/index.html, \n#SwaggerUIBundle url值:https://petstore.swagger.io/v2/swagger.json》swagger.json,不然不会显示正确的文档\n# 访问：http://localhost:8080/swagger\n# 程序配置信息修改在conf/app.conf文件\n```\n\n#### 运行项目\n\n```bash\nbee run -gendoc=true -downdoc=true\n```\n\n#### 照葫芦画瓢写接口\n\n> 还好提供了参照\n\n##### controllers\\demo.go\n\n```go\npackage controllers\n\nimport (\n\t\"demo-go-api/models\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/astaxie/beego/orm\"\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// demo控制器\ntype DemoController struct {\n\tbeego.Controller\n}\n\n// @Title GetAll\n// @Description 接口介绍\n// @Failure 403 uid is empty\n// @router /GetAll [get]\nfunc (s *DemoController) GetAll() {}\n\n// @Title GetStr\n// @Description GetStrInfo\n// @Success 200 {string} delete success!\n// @Failure 403 uid is empty\n// @router /GetStr [Post]\nfunc (s *DemoController) GetStr() {\n\tvar o orm.Ormer\n\to = orm.NewOrm() // 创建一个 Ormer\n\n\tlog := new(models.Log)\n\tlog.Id = 1\n\tlog.Title = \"测试\"\n\tfmt.Println(o.Insert(log)) // 插入对象\n\n\tlog1 := models.Log{Id: 1}\n\n\terr := o.Read(&log1) // 查询\n\n\tif err == orm.ErrNoRows {\n\t\tfmt.Println(\"查询不到\")\n\t} else if err == orm.ErrMissPK {\n\t\tfmt.Println(\"找不到主键\")\n\t} else {\n\t\tfmt.Println(log1.Id, log1.Title)\n\t}\n\n\tif o.Read(&log1) == nil {\n\t\tlog1.Title = \"MyName\"\n        // 修改\n\t\tif num, err := o.Update(&log1); err == nil {\n\t\t\tfmt.Println(num)\n\t\t}\n\t}\n\t// 删除\n\tif num, err := o.Delete(&models.Log{Id: 1}); err == nil {\n\t\tfmt.Println(num)\n\t}\n\n\tusers := models.GetAllUsers()\n\ts.Data[\"json\"] = users\n\ts.ServeJSON()\n\n}\n\n// @Title GetStr1\n// @Description \n// @Param\tbody\t\tbody \tmodels.Log\ttrue\t\t\"The object content\"\n// @Success 200 {string} delete success!\n// @Failure 403 uid is empty\n// @router /GetStr1 [Post]\nfunc (s *DemoController) GetStr1() {\n\tvar ob models.Log\n    // 获取body\n\tjson.Unmarshal(s.Ctx.Input.RequestBody, &ob)\n\tusers := models.GetAllUsers()\n\ts.Data[\"json\"] = users\n\ts.ServeJSON()\n\n}\n\n```\n\n##### controllers\\user.go\n\n```go\npackage controllers\n\nimport (\n\t\"demo-go-api/models\"\n\t\"encoding/json\"\n\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// Operations about Users\ntype UserController struct {\n\tbeego.Controller\n}\n\n// @Title CreateUser\n// @Description create users\n// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t\"body for user content\"\n// @Success 200 {int} models.User.Id\n// @Failure 403 body is empty\n// @router / [post]\nfunc (u *UserController) Post() {\n\tvar user models.User\n\tjson.Unmarshal(u.Ctx.Input.RequestBody, &user)\n\tuid := models.AddUser(user)\n\tu.Data[\"json\"] = map[string]string{\"uid\": uid}\n\tu.ServeJSON()\n}\n\n// @Title GetAll\n// @Description get all Users\n// @Success 200 {object} models.User\n// @router / [get]\nfunc (u *UserController) GetAll() {\n\tusers := models.GetAllUsers()\n\tu.Data[\"json\"] = users\n\tu.ServeJSON()\n}\n\n// @Title Get\n// @Description get user by uid\n// @Param\tuid\t\tpath \tstring\ttrue\t\t\"The key for staticblock\"\n// @Success 200 {object} models.User\n// @Failure 403 :uid is empty\n// @router /:uid [get]\nfunc (u *UserController) Get() {\n\tuid := u.GetString(\":uid\")\n\tif uid != \"\" {\n\t\tuser, err := models.GetUser(uid)\n\t\tif err != nil {\n\t\t\tu.Data[\"json\"] = err.Error()\n\t\t} else {\n\t\t\tu.Data[\"json\"] = user\n\t\t}\n\t}\n\tu.ServeJSON()\n}\n\n// @Title Update\n// @Description update the user\n// @Param\tuid\t\tpath \tstring\ttrue\t\t\"The uid you want to update\"\n// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t\"body for user content\"\n// @Success 200 {object} models.User\n// @Failure 403 :uid is not int\n// @router /:uid [put]\nfunc (u *UserController) Put() {\n\tuid := u.GetString(\":uid\")\n\tif uid != \"\" {\n\t\tvar user models.User\n\t\tjson.Unmarshal(u.Ctx.Input.RequestBody, &user)\n\t\tuu, err := models.UpdateUser(uid, &user)\n\t\tif err != nil {\n\t\t\tu.Data[\"json\"] = err.Error()\n\t\t} else {\n\t\t\tu.Data[\"json\"] = uu\n\t\t}\n\t}\n\tu.ServeJSON()\n}\n\n// @Title Delete\n// @Description delete the user\n// @Param\tuid\t\tpath \tstring\ttrue\t\t\"The uid you want to delete\"\n// @Success 200 {string} delete success!\n// @Failure 403 uid is empty\n// @router /:uid [delete]\nfunc (u *UserController) Delete() {\n\tuid := u.GetString(\":uid\")\n\tmodels.DeleteUser(uid)\n\tu.Data[\"json\"] = \"delete success!\"\n\tu.ServeJSON()\n}\n\n// @Title Login\n// @Description Logs user into the system\n// @Param\tusername\t\tquery \tstring\ttrue\t\t\"The username for login\"\n// @Param\tpassword\t\tquery \tstring\ttrue\t\t\"The password for login\"\n// @Success 200 {string} login success\n// @Failure 403 user not exist\n// @router /login [get]\nfunc (u *UserController) Login() {\n    // 获取单个参数\n\tusername := u.GetString(\"username\")\n\tpassword := u.GetString(\"password\")\n\tif models.Login(username, password) {\n\t\tu.Data[\"json\"] = \"login success\"\n\t} else {\n\t\tu.Data[\"json\"] = \"user not exist\"\n\t}\n\tu.ServeJSON()\n}\n\n// @Title logout\n// @Description Logs out current logged in user session\n// @Success 200 {string} logout success\n// @router /logout [get]\nfunc (u *UserController) Logout() {\n\tu.Data[\"json\"] = \"logout success\"\n\tu.ServeJSON()\n}\n\n\n```\n\n##### router\\router.go\n\n```go\n// Package routers @APIVersion 1.0.0\n// @Title beego Test API\n// @Description beego has a very cool tools to autogenerate documents for your API\n// @Contact astaxie@gmail.com\n// @TermsOfServiceUrl http://beego.me/\n// @License Apache 2.0\n// @LicenseUrl http://www.apache.org/licenses/LICENSE-2.0.html\npackage routers\n\nimport (\n\t\"demo-go-api/controllers\"\n\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\nfunc init() {\n\tns := beego.NewNamespace(\"/v1\",\n\t\tbeego.NSNamespace(\"/object\",\n\t\t\tbeego.NSInclude(\n\t\t\t\t&controllers.ObjectController{},\n\t\t\t),\n\t\t),\n\t\tbeego.NSNamespace(\"/user\",\n\t\t\tbeego.NSInclude(\n\t\t\t\t&controllers.UserController{},\n\t\t\t),\n\t\t),\n\t\tbeego.NSNamespace(\"/demo\",\n\t\t\tbeego.NSInclude(\n\t\t\t\t&controllers.DemoController{},\n\t\t\t),\n\t\t),\n\t)\n\tbeego.AddNamespace(ns)\n}\n```\n\n##### models\\models.go\n\n```go\npackage models\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/astaxie/beego\"\n\t\"github.com/astaxie/beego/orm\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype Store struct {\n\tId              int64\n\tTitle           string\n\tCreated         time.Time `orm:\"index\"`\n\tViews           int64     `orm:\"index\"`\n\tTopicTime       time.Time `orm:\"index\"`\n\tTopicCount      int64\n\tTopicLastUserId int64\n}\n\ntype Log struct {\n\tId    int64\n\tTitle string\n}\n\ntype Customer struct {\n\tId              int64\n\tUid             int64\n\tTitle           string\n\tContent         string `orm:\"size(5000)\"`\n\tAttachment      string\n\tCreated         time.Time `orm:\"index\"`\n\tUpdated         time.Time `orm:\"index\"`\n\tViews           int64     `orm:\"index\"`\n\tAuthor          string\n\tReplyTime       time.Time `orm:\"index\"`\n\tReplyCount      int64\n\tReplyLastUserId int64\n}\n\n//这个是个模版方法，搭配 app.conf 使用\n\nfunc RegisterDB() {\n\t//注册 model\n\torm.RegisterModel(new(Store), new(Customer), new(Log))\n\t//注册驱动\n\torm.RegisterDriver(\"mysql\", orm.DRMySQL)\n\t//注册默认数据库\n\thost := beego.AppConfig.String(\"db::host\")\n\tport := beego.AppConfig.String(\"db::port\")\n\tdbname := beego.AppConfig.String(\"db::databaseName\")\n\tuser := beego.AppConfig.String(\"db::userName\")\n\tpwd := beego.AppConfig.String(\"db::password\")\n\n\tdbcon := user + \":\" + pwd + \"@tcp(\" + host + \":\" + port + \")/\" + dbname + \"?charset=utf8\"\n\tfmt.Print(dbcon)\n\torm.RegisterDataBase(\"default\", \"mysql\", dbcon) //密码为空格式\n\t//自动创建表 参数二为是否开启创建表   参数三是否更新表\n\torm.RunSyncdb(\"default\", true, true)\n\t/*\"root:root@tcp(localhost:3306)/test\"*/\n}\n\n```\n\n##### main.go\n\n```go\npackage main\n\nimport (\n\t\"demo-go-api/models\"\n\t_ \"demo-go-api/routers\"\n\t\"github.com/astaxie/beego/orm\"\n\tbeego \"github.com/beego/beego/v2/server/web\"\n)\n\n// 引入数据模型\nfunc init() {\n\t// 注册数据库\n\tmodels.RegisterDB()\n\n}\n\nfunc main() {\n\tif beego.BConfig.RunMode == \"dev\" {\n\t\tbeego.BConfig.WebConfig.DirectoryIndex = true\n\t\tbeego.BConfig.WebConfig.StaticDir[\"/swagger\"] = \"swagger\"\n\t}\n\t//// 开启 ORM 调试模式\n\torm.Debug = true\n\t// 自动建表\n\n\torm.RunSyncdb(\"default\", false, true)\n\n\tbeego.Run()\n}\n```\n\n##### orm可能需要获取\n\n```bash\ngo get github.com/astaxie/beego/orm\n```\n\n#### 部署到docker\n\n```dockerfile\nFROM golang:latest\n\n\nENV GOPROXY https://goproxy.cn,direct\nWORKDIR $GOPATH/src/github.com/test/demo-go-api\nCOPY . $GOPATH/src/github.com/test/demo-go-api\nRUN go build .\n\n\nEXPOSE 8000\nENTRYPOINT [\"./demo-go-api\"]\n```\n\n```shell\ndocker build -t go-api .\ndocker run -d --name go-api go-api:latest\n```\n\n#### goland调试\n\n新增运行调试配置如下\n\n![](..\\images\\goland调试配置.png)\n\n#### 问题及文档\n\n[beego框架出现的问题-----panic: ./ippanichandle.exe flag redefined: graceful_Studying！！！的博客-CSDN博客](https://blog.csdn.net/qwerty1372431588/article/details/119244413)\n\n[前景 · Go语言中文文档 (topgoer.com)](https://www.topgoer.com/)\n\n[Beego 连接mysql 数据库 - 灰信网（软件开发博客聚合） (freesion.com)](https://www.freesion.com/article/59991204179/)\n\n[如何使用GoLand调试beego项目 - 简书 (jianshu.com)](https://www.jianshu.com/p/fe89dbde6a99)","slug":"go小试牛刀","published":1,"updated":"2023-09-24T07:38:31.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhk0018owtk5ox39c9f","content":"<h4 id=\"下载安装GoLand\"><a href=\"#下载安装GoLand\" class=\"headerlink\" title=\"下载安装GoLand\"></a>下载安装<a href=\"https://www.jetbrains.com.cn/go/\">GoLand</a></h4><p>goland 会自动安装golang，但是不会设置全局环境变量。需要手动设置，在goland中找到sdk地址。</p>\n<h4 id=\"安装beego\"><a href=\"#安装beego\" class=\"headerlink\" title=\"安装beego\"></a>安装beego</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置网络环境</span></span><br><span class=\"line\">go <span class=\"built_in\">env</span> -w GOPROXY=https://goproxy.io,direct</span><br><span class=\"line\">go <span class=\"built_in\">env</span> -w GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装bee</span></span><br><span class=\"line\">go get -u github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/beego/bee</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查bee </span></span><br><span class=\"line\">bee version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bee如果失败，需要手动打包bee</span></span><br><span class=\"line\"><span class=\"comment\"># 查看环境变量</span></span><br><span class=\"line\">go <span class=\"built_in\">env</span>  </span><br><span class=\"line\">GOPATH=C:\\Users\\Administrator\\go</span><br><span class=\"line\"><span class=\"comment\"># 找到bee地址</span></span><br><span class=\"line\">C:\\Users\\Administrator\\go\\src\\github.com\\beego\\bee</span><br><span class=\"line\"><span class=\"comment\"># 三种任意一种都行，都试一下吧，不太确定是哪个。我记得是前两个，第三个是我网上看见的。不一定生成bee.exe,也有可能是main.exe,名字改一下bee.exe,配置一下环境变量就好了，</span></span><br><span class=\"line\">go build </span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">go install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建api\"><a href=\"#新建api\" class=\"headerlink\" title=\"新建api\"></a>新建api</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最开始我是这样的，发现不对</span></span><br><span class=\"line\">bee new bee-api</span><br><span class=\"line\"><span class=\"comment\"># 正确命令</span></span><br><span class=\"line\">bee api bee-api</span><br><span class=\"line\"><span class=\"comment\"># 需要修改swagger/index.html, </span></span><br><span class=\"line\"><span class=\"comment\">#SwaggerUIBundle url值:https://petstore.swagger.io/v2/swagger.json》swagger.json,不然不会显示正确的文档</span></span><br><span class=\"line\"><span class=\"comment\"># 访问：http://localhost:8080/swagger</span></span><br><span class=\"line\"><span class=\"comment\"># 程序配置信息修改在conf/app.conf文件</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee run -gendoc=<span class=\"literal\">true</span> -downdoc=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"照葫芦画瓢写接口\"><a href=\"#照葫芦画瓢写接口\" class=\"headerlink\" title=\"照葫芦画瓢写接口\"></a>照葫芦画瓢写接口</h4><blockquote>\n<p>还好提供了参照</p>\n</blockquote>\n<h5 id=\"controllers-demo-go\"><a href=\"#controllers-demo-go\" class=\"headerlink\" title=\"controllers\\demo.go\"></a>controllers\\demo.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/models&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo控制器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DemoController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetAll</span></span><br><span class=\"line\"><span class=\"comment\">// @Description 接口介绍</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /GetAll [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DemoController)</span></span> GetAll() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetStr</span></span><br><span class=\"line\"><span class=\"comment\">// @Description GetStrInfo</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; delete success!</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /GetStr [Post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DemoController)</span></span> GetStr() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> o orm.Ormer</span><br><span class=\"line\">\to = orm.NewOrm() <span class=\"comment\">// 创建一个 Ormer</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlog := <span class=\"built_in\">new</span>(models.Log)</span><br><span class=\"line\">\tlog.Id = <span class=\"number\">1</span></span><br><span class=\"line\">\tlog.Title = <span class=\"string\">&quot;测试&quot;</span></span><br><span class=\"line\">\tfmt.Println(o.Insert(log)) <span class=\"comment\">// 插入对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlog1 := models.Log&#123;Id: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := o.Read(&amp;log1) <span class=\"comment\">// 查询</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == orm.ErrNoRows &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;查询不到&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err == orm.ErrMissPK &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;找不到主键&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(log1.Id, log1.Title)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> o.Read(&amp;log1) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog1.Title = <span class=\"string\">&quot;MyName&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// 修改</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num, err := o.Update(&amp;log1); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(num)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num, err := o.Delete(&amp;models.Log&#123;Id: <span class=\"number\">1</span>&#125;); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(num)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tusers := models.GetAllUsers()</span><br><span class=\"line\">\ts.Data[<span class=\"string\">&quot;json&quot;</span>] = users</span><br><span class=\"line\">\ts.ServeJSON()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetStr1</span></span><br><span class=\"line\"><span class=\"comment\">// @Description </span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tbody\t\tbody \tmodels.Log\ttrue\t\t&quot;The object content&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; delete success!</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /GetStr1 [Post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DemoController)</span></span> GetStr1() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ob models.Log</span><br><span class=\"line\">    <span class=\"comment\">// 获取body</span></span><br><span class=\"line\">\tjson.Unmarshal(s.Ctx.Input.RequestBody, &amp;ob)</span><br><span class=\"line\">\tusers := models.GetAllUsers()</span><br><span class=\"line\">\ts.Data[<span class=\"string\">&quot;json&quot;</span>] = users</span><br><span class=\"line\">\ts.ServeJSON()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"controllers-user-go\"><a href=\"#controllers-user-go\" class=\"headerlink\" title=\"controllers\\user.go\"></a>controllers\\user.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/models&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Operations about Users</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title CreateUser</span></span><br><span class=\"line\"><span class=\"comment\">// @Description create users</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t&quot;body for user content&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;int&#125; models.User.Id</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 body is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router / [post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Post() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user models.User</span><br><span class=\"line\">\tjson.Unmarshal(u.Ctx.Input.RequestBody, &amp;user)</span><br><span class=\"line\">\tuid := models.AddUser(user)</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;uid&quot;</span>: uid&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetAll</span></span><br><span class=\"line\"><span class=\"comment\">// @Description get all Users</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;object&#125; models.User</span></span><br><span class=\"line\"><span class=\"comment\">// @router / [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> GetAll() &#123;</span><br><span class=\"line\">\tusers := models.GetAllUsers()</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = users</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Get</span></span><br><span class=\"line\"><span class=\"comment\">// @Description get user by uid</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tuid\t\tpath \tstring\ttrue\t\t&quot;The key for staticblock&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;object&#125; models.User</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 :uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /:uid [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Get() &#123;</span><br><span class=\"line\">\tuid := u.GetString(<span class=\"string\">&quot;:uid&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> uid != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\tuser, err := models.GetUser(uid)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = err.Error()</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = user</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Update</span></span><br><span class=\"line\"><span class=\"comment\">// @Description update the user</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tuid\t\tpath \tstring\ttrue\t\t&quot;The uid you want to update&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t&quot;body for user content&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;object&#125; models.User</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 :uid is not int</span></span><br><span class=\"line\"><span class=\"comment\">// @router /:uid [put]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Put() &#123;</span><br><span class=\"line\">\tuid := u.GetString(<span class=\"string\">&quot;:uid&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> uid != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> user models.User</span><br><span class=\"line\">\t\tjson.Unmarshal(u.Ctx.Input.RequestBody, &amp;user)</span><br><span class=\"line\">\t\tuu, err := models.UpdateUser(uid, &amp;user)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = err.Error()</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = uu</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Delete</span></span><br><span class=\"line\"><span class=\"comment\">// @Description delete the user</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tuid\t\tpath \tstring\ttrue\t\t&quot;The uid you want to delete&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; delete success!</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /:uid [delete]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Delete() &#123;</span><br><span class=\"line\">\tuid := u.GetString(<span class=\"string\">&quot;:uid&quot;</span>)</span><br><span class=\"line\">\tmodels.DeleteUser(uid)</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;delete success!&quot;</span></span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Login</span></span><br><span class=\"line\"><span class=\"comment\">// @Description Logs user into the system</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tusername\t\tquery \tstring\ttrue\t\t&quot;The username for login&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tpassword\t\tquery \tstring\ttrue\t\t&quot;The password for login&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; login success</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 user not exist</span></span><br><span class=\"line\"><span class=\"comment\">// @router /login [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Login() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取单个参数</span></span><br><span class=\"line\">\tusername := u.GetString(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">\tpassword := u.GetString(<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> models.Login(username, password) &#123;</span><br><span class=\"line\">\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;login success&quot;</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;user not exist&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title logout</span></span><br><span class=\"line\"><span class=\"comment\">// @Description Logs out current logged in user session</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; logout success</span></span><br><span class=\"line\"><span class=\"comment\">// @router /logout [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Logout() &#123;</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;logout success&quot;</span></span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"router-router-go\"><a href=\"#router-router-go\" class=\"headerlink\" title=\"router\\router.go\"></a>router\\router.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Package routers @APIVersion 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">// @Title beego Test API</span></span><br><span class=\"line\"><span class=\"comment\">// @Description beego has a very cool tools to autogenerate documents for your API</span></span><br><span class=\"line\"><span class=\"comment\">// @Contact astaxie@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\">// @TermsOfServiceUrl http://beego.me/</span></span><br><span class=\"line\"><span class=\"comment\">// @License Apache 2.0</span></span><br><span class=\"line\"><span class=\"comment\">// @LicenseUrl http://www.apache.org/licenses/LICENSE-2.0.html</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/controllers&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tns := beego.NewNamespace(<span class=\"string\">&quot;/v1&quot;</span>,</span><br><span class=\"line\">\t\tbeego.NSNamespace(<span class=\"string\">&quot;/object&quot;</span>,</span><br><span class=\"line\">\t\t\tbeego.NSInclude(</span><br><span class=\"line\">\t\t\t\t&amp;controllers.ObjectController&#123;&#125;,</span><br><span class=\"line\">\t\t\t),</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t\tbeego.NSNamespace(<span class=\"string\">&quot;/user&quot;</span>,</span><br><span class=\"line\">\t\t\tbeego.NSInclude(</span><br><span class=\"line\">\t\t\t\t&amp;controllers.UserController&#123;&#125;,</span><br><span class=\"line\">\t\t\t),</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t\tbeego.NSNamespace(<span class=\"string\">&quot;/demo&quot;</span>,</span><br><span class=\"line\">\t\t\tbeego.NSInclude(</span><br><span class=\"line\">\t\t\t\t&amp;controllers.DemoController&#123;&#125;,</span><br><span class=\"line\">\t\t\t),</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tbeego.AddNamespace(ns)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"models-models-go\"><a href=\"#models-models-go\" class=\"headerlink\" title=\"models\\models.go\"></a>models\\models.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Store <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId              <span class=\"type\">int64</span></span><br><span class=\"line\">\tTitle           <span class=\"type\">string</span></span><br><span class=\"line\">\tCreated         time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tViews           <span class=\"type\">int64</span>     <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tTopicTime       time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tTopicCount      <span class=\"type\">int64</span></span><br><span class=\"line\">\tTopicLastUserId <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Log <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId    <span class=\"type\">int64</span></span><br><span class=\"line\">\tTitle <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Customer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId              <span class=\"type\">int64</span></span><br><span class=\"line\">\tUid             <span class=\"type\">int64</span></span><br><span class=\"line\">\tTitle           <span class=\"type\">string</span></span><br><span class=\"line\">\tContent         <span class=\"type\">string</span> <span class=\"string\">`orm:&quot;size(5000)&quot;`</span></span><br><span class=\"line\">\tAttachment      <span class=\"type\">string</span></span><br><span class=\"line\">\tCreated         time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tUpdated         time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tViews           <span class=\"type\">int64</span>     <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tAuthor          <span class=\"type\">string</span></span><br><span class=\"line\">\tReplyTime       time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tReplyCount      <span class=\"type\">int64</span></span><br><span class=\"line\">\tReplyLastUserId <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个是个模版方法，搭配 app.conf 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//注册 model</span></span><br><span class=\"line\">\torm.RegisterModel(<span class=\"built_in\">new</span>(Store), <span class=\"built_in\">new</span>(Customer), <span class=\"built_in\">new</span>(Log))</span><br><span class=\"line\">\t<span class=\"comment\">//注册驱动</span></span><br><span class=\"line\">\torm.RegisterDriver(<span class=\"string\">&quot;mysql&quot;</span>, orm.DRMySQL)</span><br><span class=\"line\">\t<span class=\"comment\">//注册默认数据库</span></span><br><span class=\"line\">\thost := beego.AppConfig.String(<span class=\"string\">&quot;db::host&quot;</span>)</span><br><span class=\"line\">\tport := beego.AppConfig.String(<span class=\"string\">&quot;db::port&quot;</span>)</span><br><span class=\"line\">\tdbname := beego.AppConfig.String(<span class=\"string\">&quot;db::databaseName&quot;</span>)</span><br><span class=\"line\">\tuser := beego.AppConfig.String(<span class=\"string\">&quot;db::userName&quot;</span>)</span><br><span class=\"line\">\tpwd := beego.AppConfig.String(<span class=\"string\">&quot;db::password&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdbcon := user + <span class=\"string\">&quot;:&quot;</span> + pwd + <span class=\"string\">&quot;@tcp(&quot;</span> + host + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot;)/&quot;</span> + dbname + <span class=\"string\">&quot;?charset=utf8&quot;</span></span><br><span class=\"line\">\tfmt.Print(dbcon)</span><br><span class=\"line\">\torm.RegisterDataBase(<span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;mysql&quot;</span>, dbcon) <span class=\"comment\">//密码为空格式</span></span><br><span class=\"line\">\t<span class=\"comment\">//自动创建表 参数二为是否开启创建表   参数三是否更新表</span></span><br><span class=\"line\">\torm.RunSyncdb(<span class=\"string\">&quot;default&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">\t<span class=\"comment\">/*&quot;root:root@tcp(localhost:3306)/test&quot;*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"main-go\"><a href=\"#main-go\" class=\"headerlink\" title=\"main.go\"></a>main.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/models&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;demo-go-api/routers&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入数据模型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 注册数据库</span></span><br><span class=\"line\">\tmodels.RegisterDB()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> beego.BConfig.RunMode == <span class=\"string\">&quot;dev&quot;</span> &#123;</span><br><span class=\"line\">\t\tbeego.BConfig.WebConfig.DirectoryIndex = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\tbeego.BConfig.WebConfig.StaticDir[<span class=\"string\">&quot;/swagger&quot;</span>] = <span class=\"string\">&quot;swagger&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//// 开启 ORM 调试模式</span></span><br><span class=\"line\">\torm.Debug = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">// 自动建表</span></span><br><span class=\"line\"></span><br><span class=\"line\">\torm.RunSyncdb(<span class=\"string\">&quot;default&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tbeego.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"orm可能需要获取\"><a href=\"#orm可能需要获取\" class=\"headerlink\" title=\"orm可能需要获取\"></a>orm可能需要获取</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署到docker\"><a href=\"#部署到docker\" class=\"headerlink\" title=\"部署到docker\"></a>部署到docker</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:latest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> GOPROXY https://goproxy.cn,direct</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$GOPATH</span>/src/github.com/test/demo-go-api</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . <span class=\"variable\">$GOPATH</span>/src/github.com/test/demo-go-api</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> go build .</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;./demo-go-api&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t go-api .</span><br><span class=\"line\">docker run -d --name go-api go-api:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"goland调试\"><a href=\"#goland调试\" class=\"headerlink\" title=\"goland调试\"></a>goland调试</h4><p>新增运行调试配置如下</p>\n<p><img src=\"/..%5Cimages%5Cgoland%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE.png\"></p>\n<h4 id=\"问题及文档\"><a href=\"#问题及文档\" class=\"headerlink\" title=\"问题及文档\"></a>问题及文档</h4><p><a href=\"https://blog.csdn.net/qwerty1372431588/article/details/119244413\">beego框架出现的问题—–panic: .&#x2F;ippanichandle.exe flag redefined: graceful_Studying！！！的博客-CSDN博客</a></p>\n<p><a href=\"https://www.topgoer.com/\">前景 · Go语言中文文档 (topgoer.com)</a></p>\n<p><a href=\"https://www.freesion.com/article/59991204179/\">Beego 连接mysql 数据库 - 灰信网（软件开发博客聚合） (freesion.com)</a></p>\n<p><a href=\"https://www.jianshu.com/p/fe89dbde6a99\">如何使用GoLand调试beego项目 - 简书 (jianshu.com)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"下载安装GoLand\"><a href=\"#下载安装GoLand\" class=\"headerlink\" title=\"下载安装GoLand\"></a>下载安装<a href=\"https://www.jetbrains.com.cn/go/\">GoLand</a></h4><p>goland 会自动安装golang，但是不会设置全局环境变量。需要手动设置，在goland中找到sdk地址。</p>\n<h4 id=\"安装beego\"><a href=\"#安装beego\" class=\"headerlink\" title=\"安装beego\"></a>安装beego</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置网络环境</span></span><br><span class=\"line\">go <span class=\"built_in\">env</span> -w GOPROXY=https://goproxy.io,direct</span><br><span class=\"line\">go <span class=\"built_in\">env</span> -w GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装bee</span></span><br><span class=\"line\">go get -u github.com/astaxie/beego</span><br><span class=\"line\">go get -u github.com/beego/bee</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查bee </span></span><br><span class=\"line\">bee version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bee如果失败，需要手动打包bee</span></span><br><span class=\"line\"><span class=\"comment\"># 查看环境变量</span></span><br><span class=\"line\">go <span class=\"built_in\">env</span>  </span><br><span class=\"line\">GOPATH=C:\\Users\\Administrator\\go</span><br><span class=\"line\"><span class=\"comment\"># 找到bee地址</span></span><br><span class=\"line\">C:\\Users\\Administrator\\go\\src\\github.com\\beego\\bee</span><br><span class=\"line\"><span class=\"comment\"># 三种任意一种都行，都试一下吧，不太确定是哪个。我记得是前两个，第三个是我网上看见的。不一定生成bee.exe,也有可能是main.exe,名字改一下bee.exe,配置一下环境变量就好了，</span></span><br><span class=\"line\">go build </span><br><span class=\"line\">go build main.go</span><br><span class=\"line\">go install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建api\"><a href=\"#新建api\" class=\"headerlink\" title=\"新建api\"></a>新建api</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最开始我是这样的，发现不对</span></span><br><span class=\"line\">bee new bee-api</span><br><span class=\"line\"><span class=\"comment\"># 正确命令</span></span><br><span class=\"line\">bee api bee-api</span><br><span class=\"line\"><span class=\"comment\"># 需要修改swagger/index.html, </span></span><br><span class=\"line\"><span class=\"comment\">#SwaggerUIBundle url值:https://petstore.swagger.io/v2/swagger.json》swagger.json,不然不会显示正确的文档</span></span><br><span class=\"line\"><span class=\"comment\"># 访问：http://localhost:8080/swagger</span></span><br><span class=\"line\"><span class=\"comment\"># 程序配置信息修改在conf/app.conf文件</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bee run -gendoc=<span class=\"literal\">true</span> -downdoc=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"照葫芦画瓢写接口\"><a href=\"#照葫芦画瓢写接口\" class=\"headerlink\" title=\"照葫芦画瓢写接口\"></a>照葫芦画瓢写接口</h4><blockquote>\n<p>还好提供了参照</p>\n</blockquote>\n<h5 id=\"controllers-demo-go\"><a href=\"#controllers-demo-go\" class=\"headerlink\" title=\"controllers\\demo.go\"></a>controllers\\demo.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/models&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo控制器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DemoController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetAll</span></span><br><span class=\"line\"><span class=\"comment\">// @Description 接口介绍</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /GetAll [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DemoController)</span></span> GetAll() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetStr</span></span><br><span class=\"line\"><span class=\"comment\">// @Description GetStrInfo</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; delete success!</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /GetStr [Post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DemoController)</span></span> GetStr() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> o orm.Ormer</span><br><span class=\"line\">\to = orm.NewOrm() <span class=\"comment\">// 创建一个 Ormer</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlog := <span class=\"built_in\">new</span>(models.Log)</span><br><span class=\"line\">\tlog.Id = <span class=\"number\">1</span></span><br><span class=\"line\">\tlog.Title = <span class=\"string\">&quot;测试&quot;</span></span><br><span class=\"line\">\tfmt.Println(o.Insert(log)) <span class=\"comment\">// 插入对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlog1 := models.Log&#123;Id: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := o.Read(&amp;log1) <span class=\"comment\">// 查询</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == orm.ErrNoRows &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;查询不到&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err == orm.ErrMissPK &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;找不到主键&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(log1.Id, log1.Title)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> o.Read(&amp;log1) == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog1.Title = <span class=\"string\">&quot;MyName&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// 修改</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num, err := o.Update(&amp;log1); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(num)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num, err := o.Delete(&amp;models.Log&#123;Id: <span class=\"number\">1</span>&#125;); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(num)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tusers := models.GetAllUsers()</span><br><span class=\"line\">\ts.Data[<span class=\"string\">&quot;json&quot;</span>] = users</span><br><span class=\"line\">\ts.ServeJSON()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetStr1</span></span><br><span class=\"line\"><span class=\"comment\">// @Description </span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tbody\t\tbody \tmodels.Log\ttrue\t\t&quot;The object content&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; delete success!</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /GetStr1 [Post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *DemoController)</span></span> GetStr1() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ob models.Log</span><br><span class=\"line\">    <span class=\"comment\">// 获取body</span></span><br><span class=\"line\">\tjson.Unmarshal(s.Ctx.Input.RequestBody, &amp;ob)</span><br><span class=\"line\">\tusers := models.GetAllUsers()</span><br><span class=\"line\">\ts.Data[<span class=\"string\">&quot;json&quot;</span>] = users</span><br><span class=\"line\">\ts.ServeJSON()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"controllers-user-go\"><a href=\"#controllers-user-go\" class=\"headerlink\" title=\"controllers\\user.go\"></a>controllers\\user.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/models&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Operations about Users</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserController <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbeego.Controller</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title CreateUser</span></span><br><span class=\"line\"><span class=\"comment\">// @Description create users</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t&quot;body for user content&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;int&#125; models.User.Id</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 body is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router / [post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Post() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user models.User</span><br><span class=\"line\">\tjson.Unmarshal(u.Ctx.Input.RequestBody, &amp;user)</span><br><span class=\"line\">\tuid := models.AddUser(user)</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;uid&quot;</span>: uid&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title GetAll</span></span><br><span class=\"line\"><span class=\"comment\">// @Description get all Users</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;object&#125; models.User</span></span><br><span class=\"line\"><span class=\"comment\">// @router / [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> GetAll() &#123;</span><br><span class=\"line\">\tusers := models.GetAllUsers()</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = users</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Get</span></span><br><span class=\"line\"><span class=\"comment\">// @Description get user by uid</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tuid\t\tpath \tstring\ttrue\t\t&quot;The key for staticblock&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;object&#125; models.User</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 :uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /:uid [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Get() &#123;</span><br><span class=\"line\">\tuid := u.GetString(<span class=\"string\">&quot;:uid&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> uid != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\tuser, err := models.GetUser(uid)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = err.Error()</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = user</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Update</span></span><br><span class=\"line\"><span class=\"comment\">// @Description update the user</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tuid\t\tpath \tstring\ttrue\t\t&quot;The uid you want to update&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tbody\t\tbody \tmodels.User\ttrue\t\t&quot;body for user content&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;object&#125; models.User</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 :uid is not int</span></span><br><span class=\"line\"><span class=\"comment\">// @router /:uid [put]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Put() &#123;</span><br><span class=\"line\">\tuid := u.GetString(<span class=\"string\">&quot;:uid&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> uid != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> user models.User</span><br><span class=\"line\">\t\tjson.Unmarshal(u.Ctx.Input.RequestBody, &amp;user)</span><br><span class=\"line\">\t\tuu, err := models.UpdateUser(uid, &amp;user)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = err.Error()</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = uu</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Delete</span></span><br><span class=\"line\"><span class=\"comment\">// @Description delete the user</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tuid\t\tpath \tstring\ttrue\t\t&quot;The uid you want to delete&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; delete success!</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 uid is empty</span></span><br><span class=\"line\"><span class=\"comment\">// @router /:uid [delete]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Delete() &#123;</span><br><span class=\"line\">\tuid := u.GetString(<span class=\"string\">&quot;:uid&quot;</span>)</span><br><span class=\"line\">\tmodels.DeleteUser(uid)</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;delete success!&quot;</span></span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title Login</span></span><br><span class=\"line\"><span class=\"comment\">// @Description Logs user into the system</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tusername\t\tquery \tstring\ttrue\t\t&quot;The username for login&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Param\tpassword\t\tquery \tstring\ttrue\t\t&quot;The password for login&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; login success</span></span><br><span class=\"line\"><span class=\"comment\">// @Failure 403 user not exist</span></span><br><span class=\"line\"><span class=\"comment\">// @router /login [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Login() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取单个参数</span></span><br><span class=\"line\">\tusername := u.GetString(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">\tpassword := u.GetString(<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> models.Login(username, password) &#123;</span><br><span class=\"line\">\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;login success&quot;</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;user not exist&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @Title logout</span></span><br><span class=\"line\"><span class=\"comment\">// @Description Logs out current logged in user session</span></span><br><span class=\"line\"><span class=\"comment\">// @Success 200 &#123;string&#125; logout success</span></span><br><span class=\"line\"><span class=\"comment\">// @router /logout [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserController)</span></span> Logout() &#123;</span><br><span class=\"line\">\tu.Data[<span class=\"string\">&quot;json&quot;</span>] = <span class=\"string\">&quot;logout success&quot;</span></span><br><span class=\"line\">\tu.ServeJSON()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"router-router-go\"><a href=\"#router-router-go\" class=\"headerlink\" title=\"router\\router.go\"></a>router\\router.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Package routers @APIVersion 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">// @Title beego Test API</span></span><br><span class=\"line\"><span class=\"comment\">// @Description beego has a very cool tools to autogenerate documents for your API</span></span><br><span class=\"line\"><span class=\"comment\">// @Contact astaxie@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\">// @TermsOfServiceUrl http://beego.me/</span></span><br><span class=\"line\"><span class=\"comment\">// @License Apache 2.0</span></span><br><span class=\"line\"><span class=\"comment\">// @LicenseUrl http://www.apache.org/licenses/LICENSE-2.0.html</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/controllers&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tns := beego.NewNamespace(<span class=\"string\">&quot;/v1&quot;</span>,</span><br><span class=\"line\">\t\tbeego.NSNamespace(<span class=\"string\">&quot;/object&quot;</span>,</span><br><span class=\"line\">\t\t\tbeego.NSInclude(</span><br><span class=\"line\">\t\t\t\t&amp;controllers.ObjectController&#123;&#125;,</span><br><span class=\"line\">\t\t\t),</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t\tbeego.NSNamespace(<span class=\"string\">&quot;/user&quot;</span>,</span><br><span class=\"line\">\t\t\tbeego.NSInclude(</span><br><span class=\"line\">\t\t\t\t&amp;controllers.UserController&#123;&#125;,</span><br><span class=\"line\">\t\t\t),</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t\tbeego.NSNamespace(<span class=\"string\">&quot;/demo&quot;</span>,</span><br><span class=\"line\">\t\t\tbeego.NSInclude(</span><br><span class=\"line\">\t\t\t\t&amp;controllers.DemoController&#123;&#125;,</span><br><span class=\"line\">\t\t\t),</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tbeego.AddNamespace(ns)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"models-models-go\"><a href=\"#models-models-go\" class=\"headerlink\" title=\"models\\models.go\"></a>models\\models.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Store <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId              <span class=\"type\">int64</span></span><br><span class=\"line\">\tTitle           <span class=\"type\">string</span></span><br><span class=\"line\">\tCreated         time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tViews           <span class=\"type\">int64</span>     <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tTopicTime       time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tTopicCount      <span class=\"type\">int64</span></span><br><span class=\"line\">\tTopicLastUserId <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Log <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId    <span class=\"type\">int64</span></span><br><span class=\"line\">\tTitle <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Customer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId              <span class=\"type\">int64</span></span><br><span class=\"line\">\tUid             <span class=\"type\">int64</span></span><br><span class=\"line\">\tTitle           <span class=\"type\">string</span></span><br><span class=\"line\">\tContent         <span class=\"type\">string</span> <span class=\"string\">`orm:&quot;size(5000)&quot;`</span></span><br><span class=\"line\">\tAttachment      <span class=\"type\">string</span></span><br><span class=\"line\">\tCreated         time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tUpdated         time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tViews           <span class=\"type\">int64</span>     <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tAuthor          <span class=\"type\">string</span></span><br><span class=\"line\">\tReplyTime       time.Time <span class=\"string\">`orm:&quot;index&quot;`</span></span><br><span class=\"line\">\tReplyCount      <span class=\"type\">int64</span></span><br><span class=\"line\">\tReplyLastUserId <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个是个模版方法，搭配 app.conf 使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//注册 model</span></span><br><span class=\"line\">\torm.RegisterModel(<span class=\"built_in\">new</span>(Store), <span class=\"built_in\">new</span>(Customer), <span class=\"built_in\">new</span>(Log))</span><br><span class=\"line\">\t<span class=\"comment\">//注册驱动</span></span><br><span class=\"line\">\torm.RegisterDriver(<span class=\"string\">&quot;mysql&quot;</span>, orm.DRMySQL)</span><br><span class=\"line\">\t<span class=\"comment\">//注册默认数据库</span></span><br><span class=\"line\">\thost := beego.AppConfig.String(<span class=\"string\">&quot;db::host&quot;</span>)</span><br><span class=\"line\">\tport := beego.AppConfig.String(<span class=\"string\">&quot;db::port&quot;</span>)</span><br><span class=\"line\">\tdbname := beego.AppConfig.String(<span class=\"string\">&quot;db::databaseName&quot;</span>)</span><br><span class=\"line\">\tuser := beego.AppConfig.String(<span class=\"string\">&quot;db::userName&quot;</span>)</span><br><span class=\"line\">\tpwd := beego.AppConfig.String(<span class=\"string\">&quot;db::password&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tdbcon := user + <span class=\"string\">&quot;:&quot;</span> + pwd + <span class=\"string\">&quot;@tcp(&quot;</span> + host + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot;)/&quot;</span> + dbname + <span class=\"string\">&quot;?charset=utf8&quot;</span></span><br><span class=\"line\">\tfmt.Print(dbcon)</span><br><span class=\"line\">\torm.RegisterDataBase(<span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;mysql&quot;</span>, dbcon) <span class=\"comment\">//密码为空格式</span></span><br><span class=\"line\">\t<span class=\"comment\">//自动创建表 参数二为是否开启创建表   参数三是否更新表</span></span><br><span class=\"line\">\torm.RunSyncdb(<span class=\"string\">&quot;default&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">\t<span class=\"comment\">/*&quot;root:root@tcp(localhost:3306)/test&quot;*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"main-go\"><a href=\"#main-go\" class=\"headerlink\" title=\"main.go\"></a>main.go</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo-go-api/models&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;demo-go-api/routers&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class=\"line\">\tbeego <span class=\"string\">&quot;github.com/beego/beego/v2/server/web&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入数据模型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 注册数据库</span></span><br><span class=\"line\">\tmodels.RegisterDB()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> beego.BConfig.RunMode == <span class=\"string\">&quot;dev&quot;</span> &#123;</span><br><span class=\"line\">\t\tbeego.BConfig.WebConfig.DirectoryIndex = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\tbeego.BConfig.WebConfig.StaticDir[<span class=\"string\">&quot;/swagger&quot;</span>] = <span class=\"string\">&quot;swagger&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//// 开启 ORM 调试模式</span></span><br><span class=\"line\">\torm.Debug = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">// 自动建表</span></span><br><span class=\"line\"></span><br><span class=\"line\">\torm.RunSyncdb(<span class=\"string\">&quot;default&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tbeego.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"orm可能需要获取\"><a href=\"#orm可能需要获取\" class=\"headerlink\" title=\"orm可能需要获取\"></a>orm可能需要获取</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署到docker\"><a href=\"#部署到docker\" class=\"headerlink\" title=\"部署到docker\"></a>部署到docker</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:latest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> GOPROXY https://goproxy.cn,direct</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$GOPATH</span>/src/github.com/test/demo-go-api</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . <span class=\"variable\">$GOPATH</span>/src/github.com/test/demo-go-api</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> go build .</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8000</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;./demo-go-api&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t go-api .</span><br><span class=\"line\">docker run -d --name go-api go-api:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"goland调试\"><a href=\"#goland调试\" class=\"headerlink\" title=\"goland调试\"></a>goland调试</h4><p>新增运行调试配置如下</p>\n<p><img src=\"/..%5Cimages%5Cgoland%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE.png\"></p>\n<h4 id=\"问题及文档\"><a href=\"#问题及文档\" class=\"headerlink\" title=\"问题及文档\"></a>问题及文档</h4><p><a href=\"https://blog.csdn.net/qwerty1372431588/article/details/119244413\">beego框架出现的问题—–panic: .&#x2F;ippanichandle.exe flag redefined: graceful_Studying！！！的博客-CSDN博客</a></p>\n<p><a href=\"https://www.topgoer.com/\">前景 · Go语言中文文档 (topgoer.com)</a></p>\n<p><a href=\"https://www.freesion.com/article/59991204179/\">Beego 连接mysql 数据库 - 灰信网（软件开发博客聚合） (freesion.com)</a></p>\n<p><a href=\"https://www.jianshu.com/p/fe89dbde6a99\">如何使用GoLand调试beego项目 - 简书 (jianshu.com)</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/..%5Cimages%5Cgoland%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE.png","popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"go小试牛刀","path":"2022/09/05/go小试牛刀/","eyeCatchImage":"/..%5Cimages%5Cgoland%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE.png","excerpt":"go小试牛刀","date":{"_isAMomentObject":true,"_i":"2022-09-05T14:14:22.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-09-05T14:14:22.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"go","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"grpc","author":"wuxinheng","date":"2022-08-02T06:37:01.000Z","description":"我个人在使用上而言，grpc、webapi、webservice、wcf这几个的区别。grpc可能更倾向内网，采用http2更安全。唯一不方便的地方是.proto文件共享的问题。webapi，遵循http规范。get、post、delete、put,然而这些是webservice缺少的。wcf跟grpc很相似。多语言之间的共同性都是通过协议来实现相关类。","_content":"grpc\n\n> 我个人在使用上而言，grpc、webapi、webservice、wcf这几个的区别。\n> grpc可能更倾向内网，采用http2更安全。唯一不方便的地方是.proto文件共享的问题\n> webapi，遵循http规范。get、post、delete、put,然而这些是webservice缺少的。\n> wcf跟grpc很相似。多语言之间的共同性都是通过协议来实现相关类。\n\n1.新建 `ASP.NET Core gRPC 服务`\n\n2.项目文件中默认有个`Protos`文件夹，文件夹中默认有一个`.proto`文件\n\n3.`.proto`可以理解问接口文件或者定义文件。其他语言也是通过`.proto`文件来使用`grpc`\n\n4.`.proto`在项目中默认会生成一个类里面是当前语言的定义。也是我们要使用的基类\n\n5.如果需要自己重新实现代码。就需要自己重新这个方法。\n\n服务端 .proto示例\n\n```protobuf\nsyntax = \"proto3\"; //版本\n\nimport \"google/protobuf/empty.proto\";  // google.protobuf.Empty 定义文件\n\noption csharp_namespace = \"Demo_GrpcService\";  // 命名空间\n\npackage tmessage; // 类\n\n// 服务定义\nservice MessageService {\n  // 方法定义\n  rpc Add (MessageRequest) returns (MessageResult);\n  rpc Update (MessageRequest) returns (MessageResult);\n  rpc Delete (MessageRequest) returns (MessageResult);\n  rpc Query(MessageRequest) returns (MessageResult);\n  rpc Test (google.protobuf.Empty) returns (google.protobuf.Empty); // 无参，无返\n}\n\n// 请求体\nmessage MessageRequest\n{\n\t\tstring Content =1;\n}\n// 返回体\nmessage MessageResult\n{\n\tstring Msg =1;\n\tstring Code =2;\n}\n```\n\n客户端也是一样的，但是不同的地方是项目文件中的配置\n\n```xml\n  <ItemGroup>\n    <!--.proto文件路径，当前grpc的声明Server、Client-->\n    <Protobuf Include=\"Protos\\message.proto\" GrpcServices=\"Server\" />  \n    <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Server\" />\n  </ItemGroup>\n```\n\n控制台使用grpc服务\n\n```C#\nstatic void Main(string[] args)\n        {\n            AppContext.SetSwitch(\"System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport\", true); // 允许https未加密的支持\n            string url = \"http://localhost:5054\";\n\n            //string url = \"https://localhost:7054\";\n\n            using (var channel = GrpcChannel.ForAddress(url))\n            {\n                var client = new MessageService.MessageServiceClient(channel);\n                var reply = client.Add(new MessageRequest()\n                {\n                    Content = \"ceshi\"\n                });\n\n                Console.WriteLine($\"结果:{reply.Code},message:{reply.Msg}\");\n            }\n            \n            Console.ReadKey();\n        }\n```\n\nwebapi使用grpc\n\n```C#\npublic void ConfigureServices(IServiceCollection services)\n{\n\n    services.AddControllers();\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"WebApplication\", Version = \"v1\" });\n    });\n    services.AddGrpcClient<MessageService.MessageServiceClient>(options =>\n    {\n        options.Address = new Uri(\"https://localhost:7054\");\n    });\n}\n```\n\n控制器\n\n```C#\n[ApiController]\n[Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n    private static readonly string[] Summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n    private readonly ILogger<WeatherForecastController> _logger;\n    private readonly MessageService.MessageServiceClient _messageService;\n\n    public WeatherForecastController(ILogger<WeatherForecastController> logger, \n                                     MessageService.MessageServiceClient messageService = null)\n    {\n        _logger = logger;\n        _messageService = messageService;\n    }\n\n    [HttpGet]\n    public IEnumerable<WeatherForecast> Get()\n    {\n      var s=   _messageService.Add(new MessageRequest() { Content=\"api调用grpc\"});\n        var rng = new Random();\n        return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = rng.Next(-20, 55),\n            Summary = Summaries[rng.Next(Summaries.Length)]\n        })\n        .ToArray();\n    }\n}\n```\n\n文档：[.NET 中的 gRPC 客户端工厂集成 | Microsoft Docs](https://docs.microsoft.com/zh-cn/aspnet/core/grpc/clientfactory?view=aspnetcore-6.0)\n","source":"_posts/grpc.md","raw":"---\ntitle: grpc\nauthor: wuxinheng\ndate: 2022-08-02 14:37:01\ndescription: 我个人在使用上而言，grpc、webapi、webservice、wcf这几个的区别。grpc可能更倾向内网，采用http2更安全。唯一不方便的地方是.proto文件共享的问题。webapi，遵循http规范。get、post、delete、put,然而这些是webservice缺少的。wcf跟grpc很相似。多语言之间的共同性都是通过协议来实现相关类。\ncategories:\n  - grpc\ntags:\n  - dotnet\n---\ngrpc\n\n> 我个人在使用上而言，grpc、webapi、webservice、wcf这几个的区别。\n> grpc可能更倾向内网，采用http2更安全。唯一不方便的地方是.proto文件共享的问题\n> webapi，遵循http规范。get、post、delete、put,然而这些是webservice缺少的。\n> wcf跟grpc很相似。多语言之间的共同性都是通过协议来实现相关类。\n\n1.新建 `ASP.NET Core gRPC 服务`\n\n2.项目文件中默认有个`Protos`文件夹，文件夹中默认有一个`.proto`文件\n\n3.`.proto`可以理解问接口文件或者定义文件。其他语言也是通过`.proto`文件来使用`grpc`\n\n4.`.proto`在项目中默认会生成一个类里面是当前语言的定义。也是我们要使用的基类\n\n5.如果需要自己重新实现代码。就需要自己重新这个方法。\n\n服务端 .proto示例\n\n```protobuf\nsyntax = \"proto3\"; //版本\n\nimport \"google/protobuf/empty.proto\";  // google.protobuf.Empty 定义文件\n\noption csharp_namespace = \"Demo_GrpcService\";  // 命名空间\n\npackage tmessage; // 类\n\n// 服务定义\nservice MessageService {\n  // 方法定义\n  rpc Add (MessageRequest) returns (MessageResult);\n  rpc Update (MessageRequest) returns (MessageResult);\n  rpc Delete (MessageRequest) returns (MessageResult);\n  rpc Query(MessageRequest) returns (MessageResult);\n  rpc Test (google.protobuf.Empty) returns (google.protobuf.Empty); // 无参，无返\n}\n\n// 请求体\nmessage MessageRequest\n{\n\t\tstring Content =1;\n}\n// 返回体\nmessage MessageResult\n{\n\tstring Msg =1;\n\tstring Code =2;\n}\n```\n\n客户端也是一样的，但是不同的地方是项目文件中的配置\n\n```xml\n  <ItemGroup>\n    <!--.proto文件路径，当前grpc的声明Server、Client-->\n    <Protobuf Include=\"Protos\\message.proto\" GrpcServices=\"Server\" />  \n    <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Server\" />\n  </ItemGroup>\n```\n\n控制台使用grpc服务\n\n```C#\nstatic void Main(string[] args)\n        {\n            AppContext.SetSwitch(\"System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport\", true); // 允许https未加密的支持\n            string url = \"http://localhost:5054\";\n\n            //string url = \"https://localhost:7054\";\n\n            using (var channel = GrpcChannel.ForAddress(url))\n            {\n                var client = new MessageService.MessageServiceClient(channel);\n                var reply = client.Add(new MessageRequest()\n                {\n                    Content = \"ceshi\"\n                });\n\n                Console.WriteLine($\"结果:{reply.Code},message:{reply.Msg}\");\n            }\n            \n            Console.ReadKey();\n        }\n```\n\nwebapi使用grpc\n\n```C#\npublic void ConfigureServices(IServiceCollection services)\n{\n\n    services.AddControllers();\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"WebApplication\", Version = \"v1\" });\n    });\n    services.AddGrpcClient<MessageService.MessageServiceClient>(options =>\n    {\n        options.Address = new Uri(\"https://localhost:7054\");\n    });\n}\n```\n\n控制器\n\n```C#\n[ApiController]\n[Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n    private static readonly string[] Summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n    private readonly ILogger<WeatherForecastController> _logger;\n    private readonly MessageService.MessageServiceClient _messageService;\n\n    public WeatherForecastController(ILogger<WeatherForecastController> logger, \n                                     MessageService.MessageServiceClient messageService = null)\n    {\n        _logger = logger;\n        _messageService = messageService;\n    }\n\n    [HttpGet]\n    public IEnumerable<WeatherForecast> Get()\n    {\n      var s=   _messageService.Add(new MessageRequest() { Content=\"api调用grpc\"});\n        var rng = new Random();\n        return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = rng.Next(-20, 55),\n            Summary = Summaries[rng.Next(Summaries.Length)]\n        })\n        .ToArray();\n    }\n}\n```\n\n文档：[.NET 中的 gRPC 客户端工厂集成 | Microsoft Docs](https://docs.microsoft.com/zh-cn/aspnet/core/grpc/clientfactory?view=aspnetcore-6.0)\n","slug":"grpc","published":1,"updated":"2023-09-24T07:38:31.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhk001bowtk5fpzcgbm","content":"<p>grpc</p>\n<blockquote>\n<p>我个人在使用上而言，grpc、webapi、webservice、wcf这几个的区别。<br>grpc可能更倾向内网，采用http2更安全。唯一不方便的地方是.proto文件共享的问题<br>webapi，遵循http规范。get、post、delete、put,然而这些是webservice缺少的。<br>wcf跟grpc很相似。多语言之间的共同性都是通过协议来实现相关类。</p>\n</blockquote>\n<p>1.新建 <code>ASP.NET Core gRPC 服务</code></p>\n<p>2.项目文件中默认有个<code>Protos</code>文件夹，文件夹中默认有一个<code>.proto</code>文件</p>\n<p>3.<code>.proto</code>可以理解问接口文件或者定义文件。其他语言也是通过<code>.proto</code>文件来使用<code>grpc</code></p>\n<p>4.<code>.proto</code>在项目中默认会生成一个类里面是当前语言的定义。也是我们要使用的基类</p>\n<p>5.如果需要自己重新实现代码。就需要自己重新这个方法。</p>\n<p>服务端 .proto示例</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>; <span class=\"comment\">//版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/empty.proto&quot;</span>;  <span class=\"comment\">// google.protobuf.Empty 定义文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> csharp_namespace = <span class=\"string\">&quot;Demo_GrpcService&quot;</span>;  <span class=\"comment\">// 命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> tmessage; <span class=\"comment\">// 类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务定义</span></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">MessageService</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 方法定义</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Add (MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Update (MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Delete (MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Query(MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Test (google.protobuf.Empty) <span class=\"keyword\">returns</span> (google.protobuf.Empty)</span>; <span class=\"comment\">// 无参，无返</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求体</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">MessageRequest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">string</span> Content =<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回体</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">MessageResult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span> Msg =<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">string</span> Code =<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端也是一样的，但是不同的地方是项目文件中的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--.proto文件路径，当前grpc的声明Server、Client--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Protobuf</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Protos\\message.proto&quot;</span> <span class=\"attr\">GrpcServices</span>=<span class=\"string\">&quot;Server&quot;</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Protobuf</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Protos\\greet.proto&quot;</span> <span class=\"attr\">GrpcServices</span>=<span class=\"string\">&quot;Server&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>控制台使用grpc服务</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AppContext.SetSwitch(<span class=\"string\">&quot;System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport&quot;</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 允许https未加密的支持</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> url = <span class=\"string\">&quot;http://localhost:5054&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//string url = &quot;https://localhost:7054&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = GrpcChannel.ForAddress(url))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> MessageService.MessageServiceClient(channel);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> reply = client.Add(<span class=\"keyword\">new</span> MessageRequest()</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Content = <span class=\"string\">&quot;ceshi&quot;</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">$&quot;结果:<span class=\"subst\">&#123;reply.Code&#125;</span>,message:<span class=\"subst\">&#123;reply.Msg&#125;</span>&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>webapi使用grpc</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddControllers();</span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">&quot;v1&quot;</span>, <span class=\"keyword\">new</span> OpenApiInfo &#123; Title = <span class=\"string\">&quot;WebApplication&quot;</span>, Version = <span class=\"string\">&quot;v1&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    services.AddGrpcClient&lt;MessageService.MessageServiceClient&gt;(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Address = <span class=\"keyword\">new</span> Uri(<span class=\"string\">&quot;https://localhost:7054&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制器</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;[controller]&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeatherForecastController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span>[] Summaries = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Freezing&quot;</span>, <span class=\"string\">&quot;Bracing&quot;</span>, <span class=\"string\">&quot;Chilly&quot;</span>, <span class=\"string\">&quot;Cool&quot;</span>, <span class=\"string\">&quot;Mild&quot;</span>, <span class=\"string\">&quot;Warm&quot;</span>, <span class=\"string\">&quot;Balmy&quot;</span>, <span class=\"string\">&quot;Hot&quot;</span>, <span class=\"string\">&quot;Sweltering&quot;</span>, <span class=\"string\">&quot;Scorching&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> MessageService.MessageServiceClient _messageService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeatherForecastController</span>(<span class=\"params\">ILogger&lt;WeatherForecastController&gt; logger, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     MessageService.MessageServiceClient messageService = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _messageService = messageService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> s=   _messageService.Add(<span class=\"keyword\">new</span> MessageRequest() &#123; Content=<span class=\"string\">&quot;api调用grpc&quot;</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rng = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">5</span>).Select(index =&gt; <span class=\"keyword\">new</span> WeatherForecast</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Date = DateTime.Now.AddDays(index),</span><br><span class=\"line\">            TemperatureC = rng.Next(<span class=\"number\">-20</span>, <span class=\"number\">55</span>),</span><br><span class=\"line\">            Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文档：<a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/grpc/clientfactory?view=aspnetcore-6.0\">.NET 中的 gRPC 客户端工厂集成 | Microsoft Docs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>grpc</p>\n<blockquote>\n<p>我个人在使用上而言，grpc、webapi、webservice、wcf这几个的区别。<br>grpc可能更倾向内网，采用http2更安全。唯一不方便的地方是.proto文件共享的问题<br>webapi，遵循http规范。get、post、delete、put,然而这些是webservice缺少的。<br>wcf跟grpc很相似。多语言之间的共同性都是通过协议来实现相关类。</p>\n</blockquote>\n<p>1.新建 <code>ASP.NET Core gRPC 服务</code></p>\n<p>2.项目文件中默认有个<code>Protos</code>文件夹，文件夹中默认有一个<code>.proto</code>文件</p>\n<p>3.<code>.proto</code>可以理解问接口文件或者定义文件。其他语言也是通过<code>.proto</code>文件来使用<code>grpc</code></p>\n<p>4.<code>.proto</code>在项目中默认会生成一个类里面是当前语言的定义。也是我们要使用的基类</p>\n<p>5.如果需要自己重新实现代码。就需要自己重新这个方法。</p>\n<p>服务端 .proto示例</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>; <span class=\"comment\">//版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/empty.proto&quot;</span>;  <span class=\"comment\">// google.protobuf.Empty 定义文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> csharp_namespace = <span class=\"string\">&quot;Demo_GrpcService&quot;</span>;  <span class=\"comment\">// 命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> tmessage; <span class=\"comment\">// 类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务定义</span></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">MessageService</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 方法定义</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Add (MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Update (MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Delete (MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Query(MessageRequest) <span class=\"keyword\">returns</span> (MessageResult)</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> Test (google.protobuf.Empty) <span class=\"keyword\">returns</span> (google.protobuf.Empty)</span>; <span class=\"comment\">// 无参，无返</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求体</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">MessageRequest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">string</span> Content =<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回体</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">MessageResult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">string</span> Msg =<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">string</span> Code =<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端也是一样的，但是不同的地方是项目文件中的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--.proto文件路径，当前grpc的声明Server、Client--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Protobuf</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Protos\\message.proto&quot;</span> <span class=\"attr\">GrpcServices</span>=<span class=\"string\">&quot;Server&quot;</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Protobuf</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Protos\\greet.proto&quot;</span> <span class=\"attr\">GrpcServices</span>=<span class=\"string\">&quot;Server&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>控制台使用grpc服务</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AppContext.SetSwitch(<span class=\"string\">&quot;System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport&quot;</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 允许https未加密的支持</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> url = <span class=\"string\">&quot;http://localhost:5054&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//string url = &quot;https://localhost:7054&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> channel = GrpcChannel.ForAddress(url))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> MessageService.MessageServiceClient(channel);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> reply = client.Add(<span class=\"keyword\">new</span> MessageRequest()</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Content = <span class=\"string\">&quot;ceshi&quot;</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">$&quot;结果:<span class=\"subst\">&#123;reply.Code&#125;</span>,message:<span class=\"subst\">&#123;reply.Msg&#125;</span>&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Console.ReadKey();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>webapi使用grpc</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddControllers();</span><br><span class=\"line\">    services.AddSwaggerGen(c =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.SwaggerDoc(<span class=\"string\">&quot;v1&quot;</span>, <span class=\"keyword\">new</span> OpenApiInfo &#123; Title = <span class=\"string\">&quot;WebApplication&quot;</span>, Version = <span class=\"string\">&quot;v1&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    services.AddGrpcClient&lt;MessageService.MessageServiceClient&gt;(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Address = <span class=\"keyword\">new</span> Uri(<span class=\"string\">&quot;https://localhost:7054&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制器</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;[controller]&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeatherForecastController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span>[] Summaries = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Freezing&quot;</span>, <span class=\"string\">&quot;Bracing&quot;</span>, <span class=\"string\">&quot;Chilly&quot;</span>, <span class=\"string\">&quot;Cool&quot;</span>, <span class=\"string\">&quot;Mild&quot;</span>, <span class=\"string\">&quot;Warm&quot;</span>, <span class=\"string\">&quot;Balmy&quot;</span>, <span class=\"string\">&quot;Hot&quot;</span>, <span class=\"string\">&quot;Sweltering&quot;</span>, <span class=\"string\">&quot;Scorching&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> MessageService.MessageServiceClient _messageService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeatherForecastController</span>(<span class=\"params\">ILogger&lt;WeatherForecastController&gt; logger, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                     MessageService.MessageServiceClient messageService = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _messageService = messageService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> s=   _messageService.Add(<span class=\"keyword\">new</span> MessageRequest() &#123; Content=<span class=\"string\">&quot;api调用grpc&quot;</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rng = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">5</span>).Select(index =&gt; <span class=\"keyword\">new</span> WeatherForecast</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Date = DateTime.Now.AddDays(index),</span><br><span class=\"line\">            TemperatureC = rng.Next(<span class=\"number\">-20</span>, <span class=\"number\">55</span>),</span><br><span class=\"line\">            Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文档：<a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/grpc/clientfactory?view=aspnetcore-6.0\">.NET 中的 gRPC 客户端工厂集成 | Microsoft Docs</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"grpc","path":"2022/08/02/grpc/","eyeCatchImage":null,"excerpt":"我个人在使用上而言，grpc、webapi、webservice、wcf这几个的区别。grpc可能更倾向内网，采用http2更安全。唯一不方便的地方是.proto文件共享的问题。webapi，遵循http规范。get、post、delete、put,然而这些是webservice缺少的。wcf跟grpc很相似。多语言之间的共同性都是通过协议来实现相关类。","date":{"_isAMomentObject":true,"_i":"2022-08-02T06:37:01.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-02T06:37:01.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"grpc","tags":["dotnet"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"centos一键安装jenkins","description":"在centos中通过执行shell脚本自动化在docker部署jenkins","author":"wuxinheng","date":"2022-07-15T14:59:00.000Z","_content":"\n## jenkins\n\n```shell\n\n# 前提：服务器docker已经运行，当前服务器是centos\n#!/bin/bash\n\necho \"开始拉取镜像\"\ndocker pull jenkins/jenkins:lts\necho \"拉取镜像完毕\"\n\necho \"创建本地文件夹\"\nif [ ! -d \"/data/jenkins_home\" ];then\n  mkdir /data/jenkins_home\n  echo \"本地文件夹创建完成\"\n  else\n  echo \"本地文件夹已存在\"\nfi\n\necho \"本地文件夹赋权\"\nchmod 777 /data/jenkins_home\necho \"赋权完成\"\n\nif [[ \"$(docker inspect [jenkins] 2> /dev/null | grep '\"Name\": \"/[jenkins]\"')\" == \"\" ]]; then\n  echo \"已存在名为jenkins的容器\"\n  echo \"准备停止删除\"\n  docker stop jenkins\n  echo \"停止成功\"\n  docker rm jenkins\n  echo \"删除成功\"\nfi\n\n\necho \"运行jenkins\"\ndocker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts\necho \"运行完成\"\n\njenkins_pwd1=\"#!/bin/bash\" \njenkins_pwd2=\"echo 'jenkins 初始密码:'\" \njenkins_pwd3=\"cat /var/jenkins_home/secrets/initialAdminPassword\"  \njenkins_pwd4=\"exit\"\n\necho ${jenkins_pwd1}>jenkins.sh\necho ${jenkins_pwd2}>>jenkins.sh\necho ${jenkins_pwd3}>>jenkins.sh\necho ${jenkins_pwd4}>>jenkins.sh\n\necho \"复制文件\"\ndocker cp  jenkins.sh jenkins:/jenkins.sh\nrm -f  jenkins.sh\n\necho \"进入容器\"\ndocker exec -u 0 -it jenkins /bin/bash /jenkins.sh\n\necho \"添加用户组\"\ngroupadd docker\necho \"添加用户到用户组(root:根据实际场景)\"\nsudo usermod -a -G docker root\necho \"修改文件权限\"\ncd /var/run\necho \"允许读写和执行\"\nchmod 777 docker.sock\ntimedatectl set-timezone Asia/Shanghai\necho \"修复jenkins时区\"\n\njenkins_time1=\"#!/bin/bash\" \njenkins_time2=\"echo '替换时区文件'\" \njenkins_time3=\"cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\"  \njenkins_time4=\"exit\"\n\necho ${jenkins_time1}>jenkins.sh\necho ${jenkins_time2}>>jenkins.sh\necho ${jenkins_time3}>>jenkins.sh\necho ${jenkins_time4}>>jenkins.sh\n\necho \"复制文件\"\ndocker cp  jenkins.sh jenkins:/jenkins.sh\nrm -f  jenkins.sh\necho \"进入容器\"\ndocker exec -u 0 -it jenkins /bin/bash /jenkins.sh\n\n\necho \"安装完毕\"\necho \"请执行下面站点操作！对时间没有强制要求可以不执行\"\necho \"站点操作：\"\necho \"[站点地址]/restart\"\necho \"jenkins上[系统管理》脚本命令行]运行:\"\necho \"System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')\"\n\n```\n\n","source":"_posts/install_jenkins.md","raw":"---\ntitle: centos一键安装jenkins\ndescription: 在centos中通过执行shell脚本自动化在docker部署jenkins\nauthor: wuxinheng\ntags:\n  - docker\n  - jenkins\n  - shell\n  - 脚本\n  - sh\n  - deploy\ncategories:\n  - jenkins\ndate: 2022-07-15 22:59:00\n---\n\n## jenkins\n\n```shell\n\n# 前提：服务器docker已经运行，当前服务器是centos\n#!/bin/bash\n\necho \"开始拉取镜像\"\ndocker pull jenkins/jenkins:lts\necho \"拉取镜像完毕\"\n\necho \"创建本地文件夹\"\nif [ ! -d \"/data/jenkins_home\" ];then\n  mkdir /data/jenkins_home\n  echo \"本地文件夹创建完成\"\n  else\n  echo \"本地文件夹已存在\"\nfi\n\necho \"本地文件夹赋权\"\nchmod 777 /data/jenkins_home\necho \"赋权完成\"\n\nif [[ \"$(docker inspect [jenkins] 2> /dev/null | grep '\"Name\": \"/[jenkins]\"')\" == \"\" ]]; then\n  echo \"已存在名为jenkins的容器\"\n  echo \"准备停止删除\"\n  docker stop jenkins\n  echo \"停止成功\"\n  docker rm jenkins\n  echo \"删除成功\"\nfi\n\n\necho \"运行jenkins\"\ndocker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts\necho \"运行完成\"\n\njenkins_pwd1=\"#!/bin/bash\" \njenkins_pwd2=\"echo 'jenkins 初始密码:'\" \njenkins_pwd3=\"cat /var/jenkins_home/secrets/initialAdminPassword\"  \njenkins_pwd4=\"exit\"\n\necho ${jenkins_pwd1}>jenkins.sh\necho ${jenkins_pwd2}>>jenkins.sh\necho ${jenkins_pwd3}>>jenkins.sh\necho ${jenkins_pwd4}>>jenkins.sh\n\necho \"复制文件\"\ndocker cp  jenkins.sh jenkins:/jenkins.sh\nrm -f  jenkins.sh\n\necho \"进入容器\"\ndocker exec -u 0 -it jenkins /bin/bash /jenkins.sh\n\necho \"添加用户组\"\ngroupadd docker\necho \"添加用户到用户组(root:根据实际场景)\"\nsudo usermod -a -G docker root\necho \"修改文件权限\"\ncd /var/run\necho \"允许读写和执行\"\nchmod 777 docker.sock\ntimedatectl set-timezone Asia/Shanghai\necho \"修复jenkins时区\"\n\njenkins_time1=\"#!/bin/bash\" \njenkins_time2=\"echo '替换时区文件'\" \njenkins_time3=\"cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\"  \njenkins_time4=\"exit\"\n\necho ${jenkins_time1}>jenkins.sh\necho ${jenkins_time2}>>jenkins.sh\necho ${jenkins_time3}>>jenkins.sh\necho ${jenkins_time4}>>jenkins.sh\n\necho \"复制文件\"\ndocker cp  jenkins.sh jenkins:/jenkins.sh\nrm -f  jenkins.sh\necho \"进入容器\"\ndocker exec -u 0 -it jenkins /bin/bash /jenkins.sh\n\n\necho \"安装完毕\"\necho \"请执行下面站点操作！对时间没有强制要求可以不执行\"\necho \"站点操作：\"\necho \"[站点地址]/restart\"\necho \"jenkins上[系统管理》脚本命令行]运行:\"\necho \"System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')\"\n\n```\n\n","slug":"install_jenkins","published":1,"updated":"2023-09-24T07:38:31.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhl001cowtkfby62pqu","content":"<h2 id=\"jenkins\"><a href=\"#jenkins\" class=\"headerlink\" title=\"jenkins\"></a>jenkins</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">前提：服务器docker已经运行，当前服务器是centos</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;开始拉取镜像&quot;</span><br><span class=\"line\">docker pull jenkins/jenkins:lts</span><br><span class=\"line\">echo &quot;拉取镜像完毕&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;创建本地文件夹&quot;</span><br><span class=\"line\">if [ ! -d &quot;/data/jenkins_home&quot; ];then</span><br><span class=\"line\">  mkdir /data/jenkins_home</span><br><span class=\"line\">  echo &quot;本地文件夹创建完成&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">  echo &quot;本地文件夹已存在&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;本地文件夹赋权&quot;</span><br><span class=\"line\">chmod 777 /data/jenkins_home</span><br><span class=\"line\">echo &quot;赋权完成&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ &quot;$(docker inspect [jenkins] 2&gt; /dev/null | grep &#x27;&quot;Name&quot;: &quot;/[jenkins]&quot;&#x27;)&quot; == &quot;&quot; ]]; then</span><br><span class=\"line\">  echo &quot;已存在名为jenkins的容器&quot;</span><br><span class=\"line\">  echo &quot;准备停止删除&quot;</span><br><span class=\"line\">  docker stop jenkins</span><br><span class=\"line\">  echo &quot;停止成功&quot;</span><br><span class=\"line\">  docker rm jenkins</span><br><span class=\"line\">  echo &quot;删除成功&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;运行jenkins&quot;</span><br><span class=\"line\">docker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts</span><br><span class=\"line\">echo &quot;运行完成&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">jenkins_pwd1=&quot;#!/bin/bash&quot; </span><br><span class=\"line\">jenkins_pwd2=&quot;echo &#x27;jenkins 初始密码:&#x27;&quot; </span><br><span class=\"line\">jenkins_pwd3=&quot;cat /var/jenkins_home/secrets/initialAdminPassword&quot;  </span><br><span class=\"line\">jenkins_pwd4=&quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;jenkins_pwd1&#125;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_pwd2&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_pwd3&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_pwd4&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;复制文件&quot;</span><br><span class=\"line\">docker cp  jenkins.sh jenkins:/jenkins.sh</span><br><span class=\"line\">rm -f  jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;进入容器&quot;</span><br><span class=\"line\">docker exec -u 0 -it jenkins /bin/bash /jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;添加用户组&quot;</span><br><span class=\"line\">groupadd docker</span><br><span class=\"line\">echo &quot;添加用户到用户组(root:根据实际场景)&quot;</span><br><span class=\"line\">sudo usermod -a -G docker root</span><br><span class=\"line\">echo &quot;修改文件权限&quot;</span><br><span class=\"line\">cd /var/run</span><br><span class=\"line\">echo &quot;允许读写和执行&quot;</span><br><span class=\"line\">chmod 777 docker.sock</span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\">echo &quot;修复jenkins时区&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">jenkins_time1=&quot;#!/bin/bash&quot; </span><br><span class=\"line\">jenkins_time2=&quot;echo &#x27;替换时区文件&#x27;&quot; </span><br><span class=\"line\">jenkins_time3=&quot;cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&quot;  </span><br><span class=\"line\">jenkins_time4=&quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;jenkins_time1&#125;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_time2&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_time3&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_time4&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;复制文件&quot;</span><br><span class=\"line\">docker cp  jenkins.sh jenkins:/jenkins.sh</span><br><span class=\"line\">rm -f  jenkins.sh</span><br><span class=\"line\">echo &quot;进入容器&quot;</span><br><span class=\"line\">docker exec -u 0 -it jenkins /bin/bash /jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;安装完毕&quot;</span><br><span class=\"line\">echo &quot;请执行下面站点操作！对时间没有强制要求可以不执行&quot;</span><br><span class=\"line\">echo &quot;站点操作：&quot;</span><br><span class=\"line\">echo &quot;[站点地址]/restart&quot;</span><br><span class=\"line\">echo &quot;jenkins上[系统管理》脚本命令行]运行:&quot;</span><br><span class=\"line\">echo &quot;System.setProperty(&#x27;org.apache.commons.jelly.tags.fmt.timeZone&#x27;, &#x27;Asia/Shanghai&#x27;)&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"jenkins\"><a href=\"#jenkins\" class=\"headerlink\" title=\"jenkins\"></a>jenkins</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">前提：服务器docker已经运行，当前服务器是centos</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;开始拉取镜像&quot;</span><br><span class=\"line\">docker pull jenkins/jenkins:lts</span><br><span class=\"line\">echo &quot;拉取镜像完毕&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;创建本地文件夹&quot;</span><br><span class=\"line\">if [ ! -d &quot;/data/jenkins_home&quot; ];then</span><br><span class=\"line\">  mkdir /data/jenkins_home</span><br><span class=\"line\">  echo &quot;本地文件夹创建完成&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">  echo &quot;本地文件夹已存在&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;本地文件夹赋权&quot;</span><br><span class=\"line\">chmod 777 /data/jenkins_home</span><br><span class=\"line\">echo &quot;赋权完成&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ &quot;$(docker inspect [jenkins] 2&gt; /dev/null | grep &#x27;&quot;Name&quot;: &quot;/[jenkins]&quot;&#x27;)&quot; == &quot;&quot; ]]; then</span><br><span class=\"line\">  echo &quot;已存在名为jenkins的容器&quot;</span><br><span class=\"line\">  echo &quot;准备停止删除&quot;</span><br><span class=\"line\">  docker stop jenkins</span><br><span class=\"line\">  echo &quot;停止成功&quot;</span><br><span class=\"line\">  docker rm jenkins</span><br><span class=\"line\">  echo &quot;删除成功&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;运行jenkins&quot;</span><br><span class=\"line\">docker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts</span><br><span class=\"line\">echo &quot;运行完成&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">jenkins_pwd1=&quot;#!/bin/bash&quot; </span><br><span class=\"line\">jenkins_pwd2=&quot;echo &#x27;jenkins 初始密码:&#x27;&quot; </span><br><span class=\"line\">jenkins_pwd3=&quot;cat /var/jenkins_home/secrets/initialAdminPassword&quot;  </span><br><span class=\"line\">jenkins_pwd4=&quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;jenkins_pwd1&#125;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_pwd2&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_pwd3&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_pwd4&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;复制文件&quot;</span><br><span class=\"line\">docker cp  jenkins.sh jenkins:/jenkins.sh</span><br><span class=\"line\">rm -f  jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;进入容器&quot;</span><br><span class=\"line\">docker exec -u 0 -it jenkins /bin/bash /jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;添加用户组&quot;</span><br><span class=\"line\">groupadd docker</span><br><span class=\"line\">echo &quot;添加用户到用户组(root:根据实际场景)&quot;</span><br><span class=\"line\">sudo usermod -a -G docker root</span><br><span class=\"line\">echo &quot;修改文件权限&quot;</span><br><span class=\"line\">cd /var/run</span><br><span class=\"line\">echo &quot;允许读写和执行&quot;</span><br><span class=\"line\">chmod 777 docker.sock</span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\">echo &quot;修复jenkins时区&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">jenkins_time1=&quot;#!/bin/bash&quot; </span><br><span class=\"line\">jenkins_time2=&quot;echo &#x27;替换时区文件&#x27;&quot; </span><br><span class=\"line\">jenkins_time3=&quot;cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&quot;  </span><br><span class=\"line\">jenkins_time4=&quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;jenkins_time1&#125;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_time2&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_time3&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\">echo $&#123;jenkins_time4&#125;&gt;&gt;jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;复制文件&quot;</span><br><span class=\"line\">docker cp  jenkins.sh jenkins:/jenkins.sh</span><br><span class=\"line\">rm -f  jenkins.sh</span><br><span class=\"line\">echo &quot;进入容器&quot;</span><br><span class=\"line\">docker exec -u 0 -it jenkins /bin/bash /jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;安装完毕&quot;</span><br><span class=\"line\">echo &quot;请执行下面站点操作！对时间没有强制要求可以不执行&quot;</span><br><span class=\"line\">echo &quot;站点操作：&quot;</span><br><span class=\"line\">echo &quot;[站点地址]/restart&quot;</span><br><span class=\"line\">echo &quot;jenkins上[系统管理》脚本命令行]运行:&quot;</span><br><span class=\"line\">echo &quot;System.setProperty(&#x27;org.apache.commons.jelly.tags.fmt.timeZone&#x27;, &#x27;Asia/Shanghai&#x27;)&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"centos一键安装jenkins","path":"2022/07/15/install_jenkins/","eyeCatchImage":null,"excerpt":"在centos中通过执行shell脚本自动化在docker部署jenkins","date":{"_isAMomentObject":true,"_i":"2022-07-15T14:59:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-15T14:59:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"jenkins","tags":["deploy","docker","jenkins","shell","脚本","sh"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"java小试牛刀","author":"wuxinheng","date":"2022-08-11T15:09:26.000Z","description":"idea 让我感受到java开发的轻松,不过中间也有遇到一些其他小白问题","_content":"### 安装环境\n\nIDEA  2022.2：下载最新版，密钥百度上有。\nmySql：准备好自己测试用的数据库\n\n### 新建项目\n\n必须设置服务器地址。不然很慢其他的不用管太多。我这直接用java11开发。\n\n![](../images/新建项目.png)\n\n最开始我还不知道从哪找Spring版本。不能说上面用Spring。我具体用的什么都不知道吧。Spring Wrb是我随机的。看着像就他了。\n\n![](../images/项目类型.png)\n\n\n\n### 配置maven\n\n使用一些依赖之后，Maven会很卡。必须更换。下面是怎么配置Maven链接。\n\n![](../images/项目初始化.png)\n\n\n\n[Maven的下载安装配置教程（详细图文）_new 杨海波的博客-CSDN博客_maven下载](https://blog.csdn.net/bakelFF/article/details/123049992)\n\n### 项目目录\n\n![](../images/项目目录.png)\n\n### 配置swagger\n\nDemoApplication.java\n\n```java\npackage com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n// 程序主文件 @SpringBootApplication好像.net 特性\n@SpringBootApplication(scanBasePackages=\"com.example.demo.controller\") // 程序文件的命名空间\\包地址\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n\n        SpringApplication.run(DemoApplication.class, args);\n        System.out.println(\"http://localhost:6001/swagger-ui/index.html#/\"); //访问地址\n    }\n\n}\n```\n\nSwaggerConfig.java\n\n```java\npackage com.example.demo.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n}\n```\n\ndbHerper.java\n\n```java\npackage com.example.demo.common;\n\nimport com.mysql.jdbc.Connection;\n\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class dbHerper {\n    private Connection conn = null;\n\n    private void Init() {\n        try {\n            if (conn == null) {\n                conn = (Connection) DriverManager.getConnection(\"jdbc:mysql://localhost/Demo?\" +\n                        \"user=root&password=123456&characterEncoding=utf-8\");\n            } else {\n                conn = (Connection) DriverManager.getConnection(\"jdbc:mysql://localhost/Demo?\" +\n                        \"user=root&password=123456&characterEncoding=utf-8\");\n            }\n\n        } catch (SQLException ex) {\n\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        }\n    }\n\n    public ResultSet Serach(String sql) {\n        Init();\n        ResultSet result = null;\n        try {\n            Statement statement = conn.createStatement();\n            result = statement.executeQuery(sql);\n        } catch (SQLException ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        } catch (Exception ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n        }\n        return result;\n    }\n\n    public boolean Execute(String sql) {\n        Init();\n        boolean result=false;\n        try {\n            Statement statement = conn.createStatement();\n            result = statement.execute(sql);\n        } catch (SQLException ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        } catch (Exception ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n        }\n        return result;\n    }\n\n    public int Update(String sql) {\n        Init();\n        int result = 0;\n        try {\n            Statement statement = conn.createStatement();\n            result = statement.executeUpdate(sql);\n            System.out.println(result);\n        } catch (SQLException ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        } catch (Exception ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n        }\n        return result;\n    }\n\n}\n```\n\nUserController.java\n\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.common.dbHerper;\nimport com.example.demo.entity.User;\nimport com.example.demo.interfaces.ICRUD;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.sql.ResultSet;\n\n@CrossOrigin//跨域中间件\n@Validated\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController implements ICRUD<User> {\n    @GetMapping(value = \"/Search\")\n    public <User> void Search() {\n        dbHerper db = new dbHerper();\n        ResultSet set = db.Serach(\"select * from FrameworkUsers \");\n    }\n\n    @PostMapping(value = \"/Add\")\n    public <User> void Add(User user) {\n        dbHerper db = new dbHerper();\n        ResultSet set = db.Serach(\"select * from FrameworkUsers \");\n    }\n\n    @PostMapping(value = \"/Update\")\n    public <User> int Update(User user) {\n        dbHerper db = new dbHerper();\n        int result = db.Update(\"update FrameworkUsers set Name='www1' where id='08da6e38-23ce-4170-8d0a-07807fd0cbfc' \");\n        return result;\n    }\n\n    @PostMapping(value = \"/Delete\")\n    public <User> void Delete(User user) {\n\n    }\n}\n```\n\napplication.properties\n\n```properties\nserver.port=6001\nspring.application.name=demo\n```\n\nDockerfile\n\n```dockerfile\n#项目所依赖的jdk镜像\nFROM java:8\n#将maven构建好的jar添加到镜像中，第二个为别名\nADD target/*.jar app.jar\n#暴露的端口号(和项目端口号等同)\nEXPOSE 6000\n#镜像所执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n```\n\npom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <!--  公司名称  -->\n    <groupId>com.example</groupId>\n    <!--  项目\\软件 名称  -->\n    <artifactId>demo</artifactId>\n    <!--  版本  -->\n    <version>release</version>\n    <!--  名称  -->\n    <name>demo</name>\n    <!--  介绍  -->\n    <description>demo</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>2.3.7.RELEASE</spring-boot.version>\n    </properties>\n\n    <!--  依赖  -->\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <!--  springfox-swagger2  -->\n            <artifactId>springfox-swagger2</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <!--  springfox-swagger-ui  -->\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-boot-starter</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <!--  mysql  -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-Java</artifactId>\n            <version>5.1.36</version>\n        </dependency>\n\n    </dependencies>\n    <!-- 依赖管理 -->\n    <!--  依赖管理需要的框架  -->\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring-boot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <!-- 打包 -->\n    <!--  应该是打包需要依赖的框架  -->\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>2.3.7.RELEASE</version>\n                <configuration>\n                    <mainClass>com.example.demo.DemoApplication</mainClass>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>repackage</id>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <!-- 构建docker镜像 -->\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>1.2.2</version>\n                <executions>\n                    <execution>\n                        <id>build-image</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>build</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <!-- image 的名字(一定得是小写) -->\n                    <imageName>${project.build.finalName}</imageName>\n                    <!-- image 的tag, 可以是多个 -->\n                    <imageTags>\n                        <imageTag>latest</imageTag>\n                    </imageTags>\n                    <!-- Dockerfile所在的目录 -->\n                    <dockerDirectory>${project.basedir}</dockerDirectory>\n                    <!-- 复制jar到docker的位置 -->\n                    <resources>\n                        <resource>\n                            <targetPath>/</targetPath>\n                            <!--jar 包所在的路径，对应target目录-->\n                            <directory>${project.build.directory}</directory>\n                            <!-- 包含的jar　-->\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                    <!-- docker远程地址 -->\n                    <dockerHost>http://localhost:2375</dockerHost>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n这里可能需要重新执行clean。通过package打包。服务器docker 就会有项目的镜像\n\n如果打包提示http 400可能是远程端口不对需要开启。 \n\ndocker 运行\n\n```shell\ndocker run -d --name demo -p 6001:6001 demo-release:latest\n```\n\n","source":"_posts/java小试牛刀.md","raw":"---\ntitle: java小试牛刀\nauthor: wuxinheng\ndate: 2022-08-11 23:09:26\ndescription: idea 让我感受到java开发的轻松,不过中间也有遇到一些其他小白问题\ncategories:\n  - java\ntags:\n- SpringBoot\n- Maven\n- swagger\n---\n### 安装环境\n\nIDEA  2022.2：下载最新版，密钥百度上有。\nmySql：准备好自己测试用的数据库\n\n### 新建项目\n\n必须设置服务器地址。不然很慢其他的不用管太多。我这直接用java11开发。\n\n![](../images/新建项目.png)\n\n最开始我还不知道从哪找Spring版本。不能说上面用Spring。我具体用的什么都不知道吧。Spring Wrb是我随机的。看着像就他了。\n\n![](../images/项目类型.png)\n\n\n\n### 配置maven\n\n使用一些依赖之后，Maven会很卡。必须更换。下面是怎么配置Maven链接。\n\n![](../images/项目初始化.png)\n\n\n\n[Maven的下载安装配置教程（详细图文）_new 杨海波的博客-CSDN博客_maven下载](https://blog.csdn.net/bakelFF/article/details/123049992)\n\n### 项目目录\n\n![](../images/项目目录.png)\n\n### 配置swagger\n\nDemoApplication.java\n\n```java\npackage com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n// 程序主文件 @SpringBootApplication好像.net 特性\n@SpringBootApplication(scanBasePackages=\"com.example.demo.controller\") // 程序文件的命名空间\\包地址\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n\n        SpringApplication.run(DemoApplication.class, args);\n        System.out.println(\"http://localhost:6001/swagger-ui/index.html#/\"); //访问地址\n    }\n\n}\n```\n\nSwaggerConfig.java\n\n```java\npackage com.example.demo.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n\n}\n```\n\ndbHerper.java\n\n```java\npackage com.example.demo.common;\n\nimport com.mysql.jdbc.Connection;\n\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class dbHerper {\n    private Connection conn = null;\n\n    private void Init() {\n        try {\n            if (conn == null) {\n                conn = (Connection) DriverManager.getConnection(\"jdbc:mysql://localhost/Demo?\" +\n                        \"user=root&password=123456&characterEncoding=utf-8\");\n            } else {\n                conn = (Connection) DriverManager.getConnection(\"jdbc:mysql://localhost/Demo?\" +\n                        \"user=root&password=123456&characterEncoding=utf-8\");\n            }\n\n        } catch (SQLException ex) {\n\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        }\n    }\n\n    public ResultSet Serach(String sql) {\n        Init();\n        ResultSet result = null;\n        try {\n            Statement statement = conn.createStatement();\n            result = statement.executeQuery(sql);\n        } catch (SQLException ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        } catch (Exception ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n        }\n        return result;\n    }\n\n    public boolean Execute(String sql) {\n        Init();\n        boolean result=false;\n        try {\n            Statement statement = conn.createStatement();\n            result = statement.execute(sql);\n        } catch (SQLException ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        } catch (Exception ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n        }\n        return result;\n    }\n\n    public int Update(String sql) {\n        Init();\n        int result = 0;\n        try {\n            Statement statement = conn.createStatement();\n            result = statement.executeUpdate(sql);\n            System.out.println(result);\n        } catch (SQLException ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n            System.out.println(\"SQLState: \" + ex.getSQLState());\n            System.out.println(\"VendorError: \" + ex.getErrorCode());\n        } catch (Exception ex) {\n            System.out.println(\"SQLException: \" + ex.getMessage());\n        }\n        return result;\n    }\n\n}\n```\n\nUserController.java\n\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.common.dbHerper;\nimport com.example.demo.entity.User;\nimport com.example.demo.interfaces.ICRUD;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.sql.ResultSet;\n\n@CrossOrigin//跨域中间件\n@Validated\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController implements ICRUD<User> {\n    @GetMapping(value = \"/Search\")\n    public <User> void Search() {\n        dbHerper db = new dbHerper();\n        ResultSet set = db.Serach(\"select * from FrameworkUsers \");\n    }\n\n    @PostMapping(value = \"/Add\")\n    public <User> void Add(User user) {\n        dbHerper db = new dbHerper();\n        ResultSet set = db.Serach(\"select * from FrameworkUsers \");\n    }\n\n    @PostMapping(value = \"/Update\")\n    public <User> int Update(User user) {\n        dbHerper db = new dbHerper();\n        int result = db.Update(\"update FrameworkUsers set Name='www1' where id='08da6e38-23ce-4170-8d0a-07807fd0cbfc' \");\n        return result;\n    }\n\n    @PostMapping(value = \"/Delete\")\n    public <User> void Delete(User user) {\n\n    }\n}\n```\n\napplication.properties\n\n```properties\nserver.port=6001\nspring.application.name=demo\n```\n\nDockerfile\n\n```dockerfile\n#项目所依赖的jdk镜像\nFROM java:8\n#将maven构建好的jar添加到镜像中，第二个为别名\nADD target/*.jar app.jar\n#暴露的端口号(和项目端口号等同)\nEXPOSE 6000\n#镜像所执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n```\n\npom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <!--  公司名称  -->\n    <groupId>com.example</groupId>\n    <!--  项目\\软件 名称  -->\n    <artifactId>demo</artifactId>\n    <!--  版本  -->\n    <version>release</version>\n    <!--  名称  -->\n    <name>demo</name>\n    <!--  介绍  -->\n    <description>demo</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>2.3.7.RELEASE</spring-boot.version>\n    </properties>\n\n    <!--  依赖  -->\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <!--  springfox-swagger2  -->\n            <artifactId>springfox-swagger2</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <!--  springfox-swagger-ui  -->\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-boot-starter</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <!--  mysql  -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-Java</artifactId>\n            <version>5.1.36</version>\n        </dependency>\n\n    </dependencies>\n    <!-- 依赖管理 -->\n    <!--  依赖管理需要的框架  -->\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring-boot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <!-- 打包 -->\n    <!--  应该是打包需要依赖的框架  -->\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>2.3.7.RELEASE</version>\n                <configuration>\n                    <mainClass>com.example.demo.DemoApplication</mainClass>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>repackage</id>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <!-- 构建docker镜像 -->\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>1.2.2</version>\n                <executions>\n                    <execution>\n                        <id>build-image</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>build</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <!-- image 的名字(一定得是小写) -->\n                    <imageName>${project.build.finalName}</imageName>\n                    <!-- image 的tag, 可以是多个 -->\n                    <imageTags>\n                        <imageTag>latest</imageTag>\n                    </imageTags>\n                    <!-- Dockerfile所在的目录 -->\n                    <dockerDirectory>${project.basedir}</dockerDirectory>\n                    <!-- 复制jar到docker的位置 -->\n                    <resources>\n                        <resource>\n                            <targetPath>/</targetPath>\n                            <!--jar 包所在的路径，对应target目录-->\n                            <directory>${project.build.directory}</directory>\n                            <!-- 包含的jar　-->\n                            <include>${project.build.finalName}.jar</include>\n                        </resource>\n                    </resources>\n                    <!-- docker远程地址 -->\n                    <dockerHost>http://localhost:2375</dockerHost>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n这里可能需要重新执行clean。通过package打包。服务器docker 就会有项目的镜像\n\n如果打包提示http 400可能是远程端口不对需要开启。 \n\ndocker 运行\n\n```shell\ndocker run -d --name demo -p 6001:6001 demo-release:latest\n```\n\n","slug":"java小试牛刀","published":1,"updated":"2023-09-24T07:38:31.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhl001howtkfvujax67","content":"<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p>IDEA  2022.2：下载最新版，密钥百度上有。<br>mySql：准备好自己测试用的数据库</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>必须设置服务器地址。不然很慢其他的不用管太多。我这直接用java11开发。</p>\n<p><img src=\"/../images/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png\"></p>\n<p>最开始我还不知道从哪找Spring版本。不能说上面用Spring。我具体用的什么都不知道吧。Spring Wrb是我随机的。看着像就他了。</p>\n<p><img src=\"/../images/%E9%A1%B9%E7%9B%AE%E7%B1%BB%E5%9E%8B.png\"></p>\n<h3 id=\"配置maven\"><a href=\"#配置maven\" class=\"headerlink\" title=\"配置maven\"></a>配置maven</h3><p>使用一些依赖之后，Maven会很卡。必须更换。下面是怎么配置Maven链接。</p>\n<p><img src=\"/../images/%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96.png\"></p>\n<p><a href=\"https://blog.csdn.net/bakelFF/article/details/123049992\">Maven的下载安装配置教程（详细图文）_new 杨海波的博客-CSDN博客_maven下载</a></p>\n<h3 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h3><p><img src=\"/../images/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png\"></p>\n<h3 id=\"配置swagger\"><a href=\"#配置swagger\" class=\"headerlink\" title=\"配置swagger\"></a>配置swagger</h3><p>DemoApplication.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 程序主文件 @SpringBootApplication好像.net 特性</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(scanBasePackages=&quot;com.example.demo.controller&quot;)</span> <span class=\"comment\">// 程序文件的命名空间\\包地址</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;http://localhost:6001/swagger-ui/index.html#/&quot;</span>); <span class=\"comment\">//访问地址</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SwaggerConfig.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dbHerper.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mysql.jdbc.Connection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">dbHerper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (conn == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                conn = (Connection) DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost/Demo?&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;user=root&amp;password=123456&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                conn = (Connection) DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost/Demo?&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;user=root&amp;password=123456&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultSet <span class=\"title function_\">Serach</span><span class=\"params\">(String sql)</span> &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">            result = statement.executeQuery(sql);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Execute</span><span class=\"params\">(String sql)</span> &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> result=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">            result = statement.execute(sql);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">Update</span><span class=\"params\">(String sql)</span> &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">            result = statement.executeUpdate(sql);</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UserController.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.common.dbHerper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.interfaces.ICRUD;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.annotation.Validated;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@CrossOrigin</span><span class=\"comment\">//跨域中间件</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ICRUD</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/Search&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">Search</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">dbHerper</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">dbHerper</span>();</span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> db.Serach(<span class=\"string\">&quot;select * from FrameworkUsers &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/Add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">Add</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">dbHerper</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">dbHerper</span>();</span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> db.Serach(<span class=\"string\">&quot;select * from FrameworkUsers &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/Update&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"type\">int</span> <span class=\"title function_\">Update</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">dbHerper</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">dbHerper</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> db.Update(<span class=\"string\">&quot;update FrameworkUsers set Name=&#x27;www1&#x27; where id=&#x27;08da6e38-23ce-4170-8d0a-07807fd0cbfc&#x27; &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/Delete&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">6001</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">demo</span></span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#项目所依赖的jdk镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">#将maven构建好的jar添加到镜像中，第二个为别名</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> target/*.jar app.jar</span></span><br><span class=\"line\"><span class=\"comment\">#暴露的端口号(和项目端口号等同)</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">6000</span></span><br><span class=\"line\"><span class=\"comment\">#镜像所执行的命令</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  公司名称  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  项目\\软件 名称  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>release<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  名称  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  介绍  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  依赖  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--  springfox-swagger2  --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--  springfox-swagger-ui  --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  mysql  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-Java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 依赖管理 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  依赖管理需要的框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 打包 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  应该是打包需要依赖的框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.example.demo.DemoApplication<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 构建docker镜像 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- image 的名字(一定得是小写) --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.build.finalName&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- image 的tag, 可以是多个 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- Dockerfile所在的目录 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 复制jar到docker的位置 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--jar 包所在的路径，对应target目录--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!-- 包含的jar　--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- docker远程地址 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://localhost:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里可能需要重新执行clean。通过package打包。服务器docker 就会有项目的镜像</p>\n<p>如果打包提示http 400可能是远程端口不对需要开启。 </p>\n<p>docker 运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name demo -p 6001:6001 demo-release:latest</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p>IDEA  2022.2：下载最新版，密钥百度上有。<br>mySql：准备好自己测试用的数据库</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>必须设置服务器地址。不然很慢其他的不用管太多。我这直接用java11开发。</p>\n<p><img src=\"/../images/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png\"></p>\n<p>最开始我还不知道从哪找Spring版本。不能说上面用Spring。我具体用的什么都不知道吧。Spring Wrb是我随机的。看着像就他了。</p>\n<p><img src=\"/../images/%E9%A1%B9%E7%9B%AE%E7%B1%BB%E5%9E%8B.png\"></p>\n<h3 id=\"配置maven\"><a href=\"#配置maven\" class=\"headerlink\" title=\"配置maven\"></a>配置maven</h3><p>使用一些依赖之后，Maven会很卡。必须更换。下面是怎么配置Maven链接。</p>\n<p><img src=\"/../images/%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96.png\"></p>\n<p><a href=\"https://blog.csdn.net/bakelFF/article/details/123049992\">Maven的下载安装配置教程（详细图文）_new 杨海波的博客-CSDN博客_maven下载</a></p>\n<h3 id=\"项目目录\"><a href=\"#项目目录\" class=\"headerlink\" title=\"项目目录\"></a>项目目录</h3><p><img src=\"/../images/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png\"></p>\n<h3 id=\"配置swagger\"><a href=\"#配置swagger\" class=\"headerlink\" title=\"配置swagger\"></a>配置swagger</h3><p>DemoApplication.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 程序主文件 @SpringBootApplication好像.net 特性</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(scanBasePackages=&quot;com.example.demo.controller&quot;)</span> <span class=\"comment\">// 程序文件的命名空间\\包地址</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;http://localhost:6001/swagger-ui/index.html#/&quot;</span>); <span class=\"comment\">//访问地址</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SwaggerConfig.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dbHerper.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mysql.jdbc.Connection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">dbHerper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (conn == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                conn = (Connection) DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost/Demo?&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;user=root&amp;password=123456&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                conn = (Connection) DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://localhost/Demo?&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;user=root&amp;password=123456&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultSet <span class=\"title function_\">Serach</span><span class=\"params\">(String sql)</span> &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">            result = statement.executeQuery(sql);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Execute</span><span class=\"params\">(String sql)</span> &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> result=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">            result = statement.execute(sql);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">Update</span><span class=\"params\">(String sql)</span> &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> conn.createStatement();</span><br><span class=\"line\">            result = statement.executeUpdate(sql);</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLState: &quot;</span> + ex.getSQLState());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;VendorError: &quot;</span> + ex.getErrorCode());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UserController.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.common.dbHerper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.interfaces.ICRUD;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.annotation.Validated;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@CrossOrigin</span><span class=\"comment\">//跨域中间件</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ICRUD</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/Search&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">Search</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">dbHerper</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">dbHerper</span>();</span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> db.Serach(<span class=\"string\">&quot;select * from FrameworkUsers &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/Add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">Add</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">dbHerper</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">dbHerper</span>();</span><br><span class=\"line\">        <span class=\"type\">ResultSet</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> db.Serach(<span class=\"string\">&quot;select * from FrameworkUsers &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/Update&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"type\">int</span> <span class=\"title function_\">Update</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">dbHerper</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">dbHerper</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> db.Update(<span class=\"string\">&quot;update FrameworkUsers set Name=&#x27;www1&#x27; where id=&#x27;08da6e38-23ce-4170-8d0a-07807fd0cbfc&#x27; &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/Delete&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;User&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">6001</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">demo</span></span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#项目所依赖的jdk镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> java:<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">#将maven构建好的jar添加到镜像中，第二个为别名</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> target/*.jar app.jar</span></span><br><span class=\"line\"><span class=\"comment\">#暴露的端口号(和项目端口号等同)</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">6000</span></span><br><span class=\"line\"><span class=\"comment\">#镜像所执行的命令</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  公司名称  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  项目\\软件 名称  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  版本  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>release<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  名称  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  介绍  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  依赖  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--  springfox-swagger2  --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--  springfox-swagger-ui  --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  mysql  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-Java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 依赖管理 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  依赖管理需要的框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 打包 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  应该是打包需要依赖的框架  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.example.demo.DemoApplication<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 构建docker镜像 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- image 的名字(一定得是小写) --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.build.finalName&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- image 的tag, 可以是多个 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- Dockerfile所在的目录 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 复制jar到docker的位置 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--jar 包所在的路径，对应target目录--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!-- 包含的jar　--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- docker远程地址 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://localhost:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里可能需要重新执行clean。通过package打包。服务器docker 就会有项目的镜像</p>\n<p>如果打包提示http 400可能是远程端口不对需要开启。 </p>\n<p>docker 运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name demo -p 6001:6001 demo-release:latest</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/../images/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png","popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"java小试牛刀","path":"2022/08/11/java小试牛刀/","eyeCatchImage":"/../images/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png","excerpt":"idea 让我感受到java开发的轻松,不过中间也有遇到一些其他小白问题","date":{"_isAMomentObject":true,"_i":"2022-08-11T15:09:26.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-11T15:09:26.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"java","tags":["SpringBoot","Maven","swagger"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"doker使用","author":"wuxinheng","description":"本文从具体使用角度简单介绍了如何去使用docker","date":"2022-07-14T14:45:00.000Z","_content":"# docker\n\n## 安装\n#### yum下载缓慢\n\n安装yum-utils、lvm2\n\n```\nsudo yum install -y yum-utils \\device-mapper-persistent-data \\lvm2\n```\n\n设置包源,不然搜不到docker-ce\n\n```\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n官方：`https://download.docker.com/linux/centos/docker-ce.repo`\n\n阿里云：`http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo`\n\n清华：`https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo`\n\n```shell\nsudo yum install docker-ce\n```\n\n启动\n\n```shell\nsudo systemctl start docker\n```\n\n验证\n\n```shell\nsudo docker version\n```\n\n## 使用\n\n- 构建流程\n\n  生成镜像（build images）>运行并配置容器（run container）\n\n- 镜像\n\n  - 查询\n\n    ```shell\n    docker search <imagesId/imagesName>\n    ```\n\n  - 拉取\n\n    > 拉去镜像不带版本号的话默认拉去最新的。版本号显示latest\n\n    ```\n    docker pull <imagesId/imagesName>:version\n    ```\n\n  - 删除\n\n    > 镜像没有被使用才可以删除。\n\n    ```\n    docker rmi <imagesId/imagesName>\n    ```\n    \n  - 打包\n\n    > 依赖dockerfile文件\n\n    ```\n    docker build -t baget .\n    ```\n\n- 容器\n\n  - 运行\n\n    ```shell\n    # 容器部分以此为例\n    docker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest\n    ```\n\n  - 查询\n\n    ```shell\n    # 查询正在运行的容器\n    docker ps\n    # 查询所有的容器\n    docker ps -a\n    ```\n\n  - 删除\n\n    ```shell\n    docker rm <containerId/containerName>\n    ```\n\n  - 修改\n\n    ```shell\n    docker container update --restart=always redis\n    ```\n\n  - 进入容器\n\n    ```shell\n    docker exec -it <containerId/containerName> /bin/bash\n    ```\n\n  - 端口\n\n    ```shell\n    # 1888为主机端口，8888为容器端口\n    docker run --name redis -p 1888:8888 redis:latest\n    ```\n\n  - 网络\n\n    ```shell\n    # 需要提前创建网络环境，通过--network\\net 设置网络\n    docker run --rm -d --network host --name my_nginx nginx\n    ```\n\n  - 卷（共享文件系统）\n\n    > 常用于数据持久性，有多种使用方式：卷、绑定挂载、tmpfs挂载、管道\n\n    ```shell\n    docker run -v [host-src]:[container-src]\n    ```\n    > 容器与主机文件交互\n    ```shell\n    docker cp <host-src> <containerId/containerName>:<container-src>\n    docker cp <containerId/containerName>:<container-src> <host-src> \n    ```\n\n  - 容器重启策略\n\n    ```shell\n    # always表示容器退出时，docker将对容器进行重启\n    docker run --restart=always redis\n    # on-failure:10表示容器退出时，docker将对容器进行重启最大次数\n    docker run --restart=on-failure:10 redis\n    ```\n\n- 网络\n\n  > 网络环境有非常多个功能。我用的比较少\n\n  - 新增\n\n    ```shell\n    docker network create elastic\n    ```\n\n  - 删除\n\n    ```shell\n    docker network rm alpine-net\n    ```\n\n  - 查看\n\n    ```shell\n    docker network ls\n    ```\n\n- 卷\n\n  > 卷有很多种方式。我目前主要用的绑定挂载。使用卷的优势可以更方便操作、备份。\n  \n  - 新建\n  \n    ```shell\n    docker volume create hello\n    ```\n  \n  - 使用\n  \n    ```shell\n    docker run -d -v hello:/world busybox ls /world\n    ```\n  \n  - 删除\n  \n    ```shell\n    # 删除没有使用的卷\n    docker volume prune\n    # 删除一个卷\n    docker volume rm hello\n    ```\n  \n  - 检查\n  \n    ```shell\n    docker volume inspect hello\n    ```\n  \n  - 查看\n  \n    ```shell\n    docker volume ls\n    ```\n  \n- 日志\n\n  > 日志只能监控容器层面。一些程序上的bug无法监测\n\n  ```shell\n  docker logs <containerId/containerName>\n  ```\n\n- 检查\n\n  > 元数据是容器的配置信息\n\n  ```shell\n  # 获取检查进行镜像或者容器信息\n  docker inspect <containerId/containerName>|<imagesId/imagesName>\n  # -f 允许通过对象方式获取属性信息\n  docker inspect -f \"{.State.StartedAt}\" <containerId/containerName>|<imagesId/imagesName>\n  ```","source":"_posts/doker.md","raw":"---\ntitle: doker使用\nauthor: wuxinheng\ndescription: 本文从具体使用角度简单介绍了如何去使用docker\ncategories:\n  - docker\ntags:\n  - docker\ndate: 2022-07-14 22:45:00\n---\n# docker\n\n## 安装\n#### yum下载缓慢\n\n安装yum-utils、lvm2\n\n```\nsudo yum install -y yum-utils \\device-mapper-persistent-data \\lvm2\n```\n\n设置包源,不然搜不到docker-ce\n\n```\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n官方：`https://download.docker.com/linux/centos/docker-ce.repo`\n\n阿里云：`http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo`\n\n清华：`https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo`\n\n```shell\nsudo yum install docker-ce\n```\n\n启动\n\n```shell\nsudo systemctl start docker\n```\n\n验证\n\n```shell\nsudo docker version\n```\n\n## 使用\n\n- 构建流程\n\n  生成镜像（build images）>运行并配置容器（run container）\n\n- 镜像\n\n  - 查询\n\n    ```shell\n    docker search <imagesId/imagesName>\n    ```\n\n  - 拉取\n\n    > 拉去镜像不带版本号的话默认拉去最新的。版本号显示latest\n\n    ```\n    docker pull <imagesId/imagesName>:version\n    ```\n\n  - 删除\n\n    > 镜像没有被使用才可以删除。\n\n    ```\n    docker rmi <imagesId/imagesName>\n    ```\n    \n  - 打包\n\n    > 依赖dockerfile文件\n\n    ```\n    docker build -t baget .\n    ```\n\n- 容器\n\n  - 运行\n\n    ```shell\n    # 容器部分以此为例\n    docker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest\n    ```\n\n  - 查询\n\n    ```shell\n    # 查询正在运行的容器\n    docker ps\n    # 查询所有的容器\n    docker ps -a\n    ```\n\n  - 删除\n\n    ```shell\n    docker rm <containerId/containerName>\n    ```\n\n  - 修改\n\n    ```shell\n    docker container update --restart=always redis\n    ```\n\n  - 进入容器\n\n    ```shell\n    docker exec -it <containerId/containerName> /bin/bash\n    ```\n\n  - 端口\n\n    ```shell\n    # 1888为主机端口，8888为容器端口\n    docker run --name redis -p 1888:8888 redis:latest\n    ```\n\n  - 网络\n\n    ```shell\n    # 需要提前创建网络环境，通过--network\\net 设置网络\n    docker run --rm -d --network host --name my_nginx nginx\n    ```\n\n  - 卷（共享文件系统）\n\n    > 常用于数据持久性，有多种使用方式：卷、绑定挂载、tmpfs挂载、管道\n\n    ```shell\n    docker run -v [host-src]:[container-src]\n    ```\n    > 容器与主机文件交互\n    ```shell\n    docker cp <host-src> <containerId/containerName>:<container-src>\n    docker cp <containerId/containerName>:<container-src> <host-src> \n    ```\n\n  - 容器重启策略\n\n    ```shell\n    # always表示容器退出时，docker将对容器进行重启\n    docker run --restart=always redis\n    # on-failure:10表示容器退出时，docker将对容器进行重启最大次数\n    docker run --restart=on-failure:10 redis\n    ```\n\n- 网络\n\n  > 网络环境有非常多个功能。我用的比较少\n\n  - 新增\n\n    ```shell\n    docker network create elastic\n    ```\n\n  - 删除\n\n    ```shell\n    docker network rm alpine-net\n    ```\n\n  - 查看\n\n    ```shell\n    docker network ls\n    ```\n\n- 卷\n\n  > 卷有很多种方式。我目前主要用的绑定挂载。使用卷的优势可以更方便操作、备份。\n  \n  - 新建\n  \n    ```shell\n    docker volume create hello\n    ```\n  \n  - 使用\n  \n    ```shell\n    docker run -d -v hello:/world busybox ls /world\n    ```\n  \n  - 删除\n  \n    ```shell\n    # 删除没有使用的卷\n    docker volume prune\n    # 删除一个卷\n    docker volume rm hello\n    ```\n  \n  - 检查\n  \n    ```shell\n    docker volume inspect hello\n    ```\n  \n  - 查看\n  \n    ```shell\n    docker volume ls\n    ```\n  \n- 日志\n\n  > 日志只能监控容器层面。一些程序上的bug无法监测\n\n  ```shell\n  docker logs <containerId/containerName>\n  ```\n\n- 检查\n\n  > 元数据是容器的配置信息\n\n  ```shell\n  # 获取检查进行镜像或者容器信息\n  docker inspect <containerId/containerName>|<imagesId/imagesName>\n  # -f 允许通过对象方式获取属性信息\n  docker inspect -f \"{.State.StartedAt}\" <containerId/containerName>|<imagesId/imagesName>\n  ```","slug":"doker","published":1,"updated":"2023-09-24T07:38:31.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhm001jowtk3k5ugjkx","content":"<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h4 id=\"yum下载缓慢\"><a href=\"#yum下载缓慢\" class=\"headerlink\" title=\"yum下载缓慢\"></a>yum下载缓慢</h4><p>安装yum-utils、lvm2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils \\device-mapper-persistent-data \\lvm2</span><br></pre></td></tr></table></figure>\n\n<p>设置包源,不然搜不到docker-ce</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>官方：<code>https://download.docker.com/linux/centos/docker-ce.repo</code></p>\n<p>阿里云：<code>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>\n<p>清华：<code>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>构建流程</p>\n<p>生成镜像（build images）&gt;运行并配置容器（run container）</p>\n</li>\n<li><p>镜像</p>\n<ul>\n<li><p>查询</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search &lt;imagesId/imagesName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拉取</p>\n<blockquote>\n<p>拉去镜像不带版本号的话默认拉去最新的。版本号显示latest</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;imagesId/imagesName&gt;:version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<blockquote>\n<p>镜像没有被使用才可以删除。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &lt;imagesId/imagesName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包</p>\n<blockquote>\n<p>依赖dockerfile文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t baget .</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>容器</p>\n<ul>\n<li><p>运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器部分以此为例</span></span><br><span class=\"line\">docker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询正在运行的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询所有的容器</span></span><br><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &lt;containerId/containerName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container update --restart=always redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it &lt;containerId/containerName&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1888为主机端口，8888为容器端口</span></span><br><span class=\"line\">docker run --name redis -p 1888:8888 redis:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网络</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要提前创建网络环境，通过--network\\net 设置网络</span></span><br><span class=\"line\">docker run --rm -d --network host --name my_nginx nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卷（共享文件系统）</p>\n<blockquote>\n<p>常用于数据持久性，有多种使用方式：卷、绑定挂载、tmpfs挂载、管道</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v [host-src]:[container-src]</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>    &gt; 容器与主机文件交互<br>    <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    docker cp &lt;host-src&gt; &lt;containerId/containerName&gt;:&lt;container-src&gt;</span><br><span class=\"line\">docker cp &lt;containerId/containerName&gt;:&lt;container-src&gt; &lt;host-src&gt; </span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>容器重启策略</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">always表示容器退出时，docker将对容器进行重启</span></span><br><span class=\"line\">docker run --restart=always redis</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">on-failure:10表示容器退出时，docker将对容器进行重启最大次数</span></span><br><span class=\"line\">docker run --restart=on-failure:10 redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网络</p>\n<blockquote>\n<p>网络环境有非常多个功能。我用的比较少</p>\n</blockquote>\n<ul>\n<li><p>新增</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create elastic</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network rm alpine-net</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>卷</p>\n<blockquote>\n<p>卷有很多种方式。我目前主要用的绑定挂载。使用卷的优势可以更方便操作、备份。</p>\n</blockquote>\n<ul>\n<li><p>新建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v hello:/world busybox ls /world</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除没有使用的卷</span></span><br><span class=\"line\">docker volume prune</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除一个卷</span></span><br><span class=\"line\">docker volume rm hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>日志</p>\n<blockquote>\n<p>日志只能监控容器层面。一些程序上的bug无法监测</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs &lt;containerId/containerName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查</p>\n<blockquote>\n<p>元数据是容器的配置信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取检查进行镜像或者容器信息</span></span><br><span class=\"line\">docker inspect &lt;containerId/containerName&gt;|&lt;imagesId/imagesName&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-f 允许通过对象方式获取属性信息</span></span><br><span class=\"line\">docker inspect -f &quot;&#123;.State.StartedAt&#125;&quot; &lt;containerId/containerName&gt;|&lt;imagesId/imagesName&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h4 id=\"yum下载缓慢\"><a href=\"#yum下载缓慢\" class=\"headerlink\" title=\"yum下载缓慢\"></a>yum下载缓慢</h4><p>安装yum-utils、lvm2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils \\device-mapper-persistent-data \\lvm2</span><br></pre></td></tr></table></figure>\n\n<p>设置包源,不然搜不到docker-ce</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>官方：<code>https://download.docker.com/linux/centos/docker-ce.repo</code></p>\n<p>阿里云：<code>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>\n<p>清华：<code>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>构建流程</p>\n<p>生成镜像（build images）&gt;运行并配置容器（run container）</p>\n</li>\n<li><p>镜像</p>\n<ul>\n<li><p>查询</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search &lt;imagesId/imagesName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拉取</p>\n<blockquote>\n<p>拉去镜像不带版本号的话默认拉去最新的。版本号显示latest</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;imagesId/imagesName&gt;:version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<blockquote>\n<p>镜像没有被使用才可以删除。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &lt;imagesId/imagesName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包</p>\n<blockquote>\n<p>依赖dockerfile文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t baget .</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>容器</p>\n<ul>\n<li><p>运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器部分以此为例</span></span><br><span class=\"line\">docker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询正在运行的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询所有的容器</span></span><br><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &lt;containerId/containerName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container update --restart=always redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it &lt;containerId/containerName&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1888为主机端口，8888为容器端口</span></span><br><span class=\"line\">docker run --name redis -p 1888:8888 redis:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网络</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要提前创建网络环境，通过--network\\net 设置网络</span></span><br><span class=\"line\">docker run --rm -d --network host --name my_nginx nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卷（共享文件系统）</p>\n<blockquote>\n<p>常用于数据持久性，有多种使用方式：卷、绑定挂载、tmpfs挂载、管道</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v [host-src]:[container-src]</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>    &gt; 容器与主机文件交互<br>    <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    docker cp &lt;host-src&gt; &lt;containerId/containerName&gt;:&lt;container-src&gt;</span><br><span class=\"line\">docker cp &lt;containerId/containerName&gt;:&lt;container-src&gt; &lt;host-src&gt; </span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>容器重启策略</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">always表示容器退出时，docker将对容器进行重启</span></span><br><span class=\"line\">docker run --restart=always redis</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">on-failure:10表示容器退出时，docker将对容器进行重启最大次数</span></span><br><span class=\"line\">docker run --restart=on-failure:10 redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网络</p>\n<blockquote>\n<p>网络环境有非常多个功能。我用的比较少</p>\n</blockquote>\n<ul>\n<li><p>新增</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create elastic</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network rm alpine-net</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>卷</p>\n<blockquote>\n<p>卷有很多种方式。我目前主要用的绑定挂载。使用卷的优势可以更方便操作、备份。</p>\n</blockquote>\n<ul>\n<li><p>新建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v hello:/world busybox ls /world</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除没有使用的卷</span></span><br><span class=\"line\">docker volume prune</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除一个卷</span></span><br><span class=\"line\">docker volume rm hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>日志</p>\n<blockquote>\n<p>日志只能监控容器层面。一些程序上的bug无法监测</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs &lt;containerId/containerName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查</p>\n<blockquote>\n<p>元数据是容器的配置信息</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取检查进行镜像或者容器信息</span></span><br><span class=\"line\">docker inspect &lt;containerId/containerName&gt;|&lt;imagesId/imagesName&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-f 允许通过对象方式获取属性信息</span></span><br><span class=\"line\">docker inspect -f &quot;&#123;.State.StartedAt&#125;&quot; &lt;containerId/containerName&gt;|&lt;imagesId/imagesName&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"doker使用","path":"2022/07/14/doker/","eyeCatchImage":null,"excerpt":"本文从具体使用角度简单介绍了如何去使用docker","date":{"_isAMomentObject":true,"_i":"2022-07-14T14:45:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-14T14:45:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["docker"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"jenkins使用","author":"wuxinheng","description":"本文介绍了centos docker和windows中安装jenkins,以及具体的使用。","date":"2022-07-13T14:21:14.000Z","_content":"\n# `docker`构建`jenkins` 容器\n\n## `jenkins` 安装\n\n### 拉取镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 构建容器\n\n创建文件夹存储数据\n\n```\nmkdir /data/jenkins_home\n```\n\n给文件夹授权\n\n```\nchmod 777 /data/jenkins_home\n```\n\n一定要映射到卷，不然后面无法使用`docker`命令\n\n```shell\ndocker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts\n```\n\n### 查看`jenkins`密码\n\n```shell\n# 查看容器\ndocker ps -a\n# 进入容器\ndocker exec -u 0 -it 21ee4816aac1 /bin/bash\n# 查看指定文件内容\ncat /var/jenkins_home/secrets/initialAdminPassword #密码\n```\n\n### 使用及问题\n\n第一次运行成功，后续无法启动，状态显示Exited，需要设置文件夹权限，获取到`Jenkins`的`uid`，进行赋权\n\n```\nsudo chown 1000:1000 /data/jenkins_home\n```\n\n虽然映射到卷，`jenkis`使用`docker`可以，但是其他`docker` 命令不行。还需要将当前用户添加到用户组\n\n```shell\n# 添加用户组\ngroupadd docker\n# 添加用户到用户组(root:根据实际场景)\nsudo usermod -a -G docker root\n# 上面类容还不行，就修改文件权限\ncd /var/run\n# 允许读写和执行\nchmod 777 docker.sock\n```\n\n`jenkins`执行`shell`只执行第一句\n\n```\n# shell 第一句加上这个，指定解释器，下面\"#\"非注释，也可#!/bin/sh\n#!/bin/bash\n```\n\n时区不对\n\n```shell\n# 修复Linux时区，查看上海时区\n# 输入\ntimedatectl list-timezones |grep Shanghai\n# 输出\nAsia/Shanghai\n# 修改时区\ntimedatectl set-timezone Asia/Shanghai\n# 修复jenkins时区\ndocker exec -it -u root my_jenkins /bin/bash\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\necho Asia/Shanghai > /etc/timezone\n# 站点重启\nhttp://localhost:8080/restart\n```\n\n到此时间格式是改变了，还有其他细节上的时间没有改过来少8个小时。在`jenkins`上`系统管理》脚本命令行`运行\n\n```shell\nSystem.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')\n```\n\n### 自动化部署`.net core`\n\n```shell\n#!/bin/bash\ndocker stop xblogs_api\ndocker rm xblogs_api\ndocker rmi xblogs_api\ncp src/xblogs.HttpApi.Host/Dockerfile $PWD\ndocker build -t xblogs_api .\ndocker run -v /root/data:/app/inetpub --name xblogs_api -d -p 2022:80 --restart=always xblogs_api \n```\n\n# `Windows`安装\n\n> 前提是已经安装`Jdk 1.8`\n> 正常安装`exe`或者`msi`，中间需要选择`jdk`目录，和服务端口。\n\n## 使用场景\n\n### 自动部署`.net core`\n\n正常命令行\n\n```\ndotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000\n```\n\n集成到`Jenkins`\n\n```\n\n@echo 停止应用程序池\nC:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool \"wy2\"\n\n@echo 删除应用程序池\nC:\\Windows\\System32\\inetsrv\\appcmd.exe delete apppool \"wy2\"\n\n@echo 停止站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe stop site \"wy2\"\n\n@echo 删除站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe delete site \"wy2\"\n\n@echo 进入项目目录\ncd \"%WORKSPACE%\\ShuWen.Property\\\"\n\n@echo 生成项目到指定文件夹\ndotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000\n\n\n@echo 新增应用程序池\nC:\\Windows\\System32\\inetsrv\\appcmd.exe add apppool /name:\"wy2\" /managedRuntimeVersion:\"v4.0\"\n\n@echo 新增站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe add site /name:\"wy2\" /bindings:http/*:8000: /applicationDefaults.applicationPool:\"wy2\" /physicalPath:\"D:\\wwwroot\\wy2\\8000\"\n\n@echo 停止应用程序池\n@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool \"wy2\"\n\n@echo 启动应用程序池\n@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe start apppool \"wy2\"\n\n@echo 停止站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe stop site \"wy2\"\n\n@echo 启动站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe start site \"wy2\"\n\n```\n思路\n\nGit （pull）==> Localhost（Docker build）==> Images（Run Imgage）==> Container\n\n实现\n\n```\ndocker stop wuye\ndocker rm wuye\ndocker rmi wuye\ncd /var/jenkins_mount/workspace/wuye2_dev\ndocker build -t wuye .\ndocker run --name wuye -p 2022:80 --restart=always wuye\necho \"success\"\n```\n\n\n### `uniapp`自动打包推送微信平台\n\n正常命令行\n\n- 运行HBuilderX\n\n> 【坑】HBuilderX 3.3.7-alpha，支持使用CLI发行微信小程序。`注意版本`\n> uni-app发行 - 微信小程序 - HBuilderX 文档 (dcloud.net.cn)\n\n```\ne: # 进入e盘\ncd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX # 进入指定目录\nstart HBuilderX.exe #\n```\n\n> 【坑】运行HBuilderX，一定要先运行这是前提条件，命令行是以此应用程序为服务，否则会提示无服务等问题。`运行编辑器`\n\n- 操作项目\n\n```\n# 关闭项目,当前版本存在bug,关闭路径需要'/'\ncli project close --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet\n# 打开项目\ncli project open --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet\n```\n\n- 编译上传\n\n```\n# 仅编译uni-app项目到微信小程序，不发行\ncli publish --platform mp-weixin --project jiushi-property-side-applet\n# 编译uni-app项目到微信小程序，并发行小程序到微信平台\ncli publish --platform mp-weixin --project jiushi-property-side-applet --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布 --version 2.0.2 --privatekey D:\\private.wxe95734bb5d9a1665.key\n```\n\n> 【坑】设置ip白名单(提示管道信息是因为微信检验ip白名单没有通过，要么设置白名单，要么不要关闭白名单)\n\n- privatekey 小程序上传密钥文件\n\n```\n开发》开发管理》开发设置》小程序代码上传》生成指定秘钥文件\n```\n\n集成到`Jenkins`\n\n```\ne: \ncd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX\nstart HBuilderX.exe \ncli project close --path C:/ProgramData/Jenkins/.jenkins/workspace/uniapp_wy/\ncli project open --path C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\uniapp_wy\\\ncli publish --platform mp-weixin --project uniapp_wy --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布1 --privatekey D:\\wuxinheng\\private.wxe95734bb5d9a1665.key\n```","source":"_posts/jenkins.md","raw":"---\ntitle: jenkins使用\nauthor: wuxinheng\ndescription: 本文介绍了centos docker和windows中安装jenkins,以及具体的使用。\ndate: 2022-07-13 22:21:14\ntags:\n- CI/CD\n- docker构建jenkins\n- jenkis部署.netcore\n- jenkis部署uniapp\n- uniapp自动推送微信\n- jenkis\ncategories:\n- jenkins\n---\n\n# `docker`构建`jenkins` 容器\n\n## `jenkins` 安装\n\n### 拉取镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 构建容器\n\n创建文件夹存储数据\n\n```\nmkdir /data/jenkins_home\n```\n\n给文件夹授权\n\n```\nchmod 777 /data/jenkins_home\n```\n\n一定要映射到卷，不然后面无法使用`docker`命令\n\n```shell\ndocker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts\n```\n\n### 查看`jenkins`密码\n\n```shell\n# 查看容器\ndocker ps -a\n# 进入容器\ndocker exec -u 0 -it 21ee4816aac1 /bin/bash\n# 查看指定文件内容\ncat /var/jenkins_home/secrets/initialAdminPassword #密码\n```\n\n### 使用及问题\n\n第一次运行成功，后续无法启动，状态显示Exited，需要设置文件夹权限，获取到`Jenkins`的`uid`，进行赋权\n\n```\nsudo chown 1000:1000 /data/jenkins_home\n```\n\n虽然映射到卷，`jenkis`使用`docker`可以，但是其他`docker` 命令不行。还需要将当前用户添加到用户组\n\n```shell\n# 添加用户组\ngroupadd docker\n# 添加用户到用户组(root:根据实际场景)\nsudo usermod -a -G docker root\n# 上面类容还不行，就修改文件权限\ncd /var/run\n# 允许读写和执行\nchmod 777 docker.sock\n```\n\n`jenkins`执行`shell`只执行第一句\n\n```\n# shell 第一句加上这个，指定解释器，下面\"#\"非注释，也可#!/bin/sh\n#!/bin/bash\n```\n\n时区不对\n\n```shell\n# 修复Linux时区，查看上海时区\n# 输入\ntimedatectl list-timezones |grep Shanghai\n# 输出\nAsia/Shanghai\n# 修改时区\ntimedatectl set-timezone Asia/Shanghai\n# 修复jenkins时区\ndocker exec -it -u root my_jenkins /bin/bash\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\necho Asia/Shanghai > /etc/timezone\n# 站点重启\nhttp://localhost:8080/restart\n```\n\n到此时间格式是改变了，还有其他细节上的时间没有改过来少8个小时。在`jenkins`上`系统管理》脚本命令行`运行\n\n```shell\nSystem.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')\n```\n\n### 自动化部署`.net core`\n\n```shell\n#!/bin/bash\ndocker stop xblogs_api\ndocker rm xblogs_api\ndocker rmi xblogs_api\ncp src/xblogs.HttpApi.Host/Dockerfile $PWD\ndocker build -t xblogs_api .\ndocker run -v /root/data:/app/inetpub --name xblogs_api -d -p 2022:80 --restart=always xblogs_api \n```\n\n# `Windows`安装\n\n> 前提是已经安装`Jdk 1.8`\n> 正常安装`exe`或者`msi`，中间需要选择`jdk`目录，和服务端口。\n\n## 使用场景\n\n### 自动部署`.net core`\n\n正常命令行\n\n```\ndotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000\n```\n\n集成到`Jenkins`\n\n```\n\n@echo 停止应用程序池\nC:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool \"wy2\"\n\n@echo 删除应用程序池\nC:\\Windows\\System32\\inetsrv\\appcmd.exe delete apppool \"wy2\"\n\n@echo 停止站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe stop site \"wy2\"\n\n@echo 删除站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe delete site \"wy2\"\n\n@echo 进入项目目录\ncd \"%WORKSPACE%\\ShuWen.Property\\\"\n\n@echo 生成项目到指定文件夹\ndotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000\n\n\n@echo 新增应用程序池\nC:\\Windows\\System32\\inetsrv\\appcmd.exe add apppool /name:\"wy2\" /managedRuntimeVersion:\"v4.0\"\n\n@echo 新增站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe add site /name:\"wy2\" /bindings:http/*:8000: /applicationDefaults.applicationPool:\"wy2\" /physicalPath:\"D:\\wwwroot\\wy2\\8000\"\n\n@echo 停止应用程序池\n@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool \"wy2\"\n\n@echo 启动应用程序池\n@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe start apppool \"wy2\"\n\n@echo 停止站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe stop site \"wy2\"\n\n@echo 启动站点\nC:\\Windows\\System32\\inetsrv\\appcmd.exe start site \"wy2\"\n\n```\n思路\n\nGit （pull）==> Localhost（Docker build）==> Images（Run Imgage）==> Container\n\n实现\n\n```\ndocker stop wuye\ndocker rm wuye\ndocker rmi wuye\ncd /var/jenkins_mount/workspace/wuye2_dev\ndocker build -t wuye .\ndocker run --name wuye -p 2022:80 --restart=always wuye\necho \"success\"\n```\n\n\n### `uniapp`自动打包推送微信平台\n\n正常命令行\n\n- 运行HBuilderX\n\n> 【坑】HBuilderX 3.3.7-alpha，支持使用CLI发行微信小程序。`注意版本`\n> uni-app发行 - 微信小程序 - HBuilderX 文档 (dcloud.net.cn)\n\n```\ne: # 进入e盘\ncd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX # 进入指定目录\nstart HBuilderX.exe #\n```\n\n> 【坑】运行HBuilderX，一定要先运行这是前提条件，命令行是以此应用程序为服务，否则会提示无服务等问题。`运行编辑器`\n\n- 操作项目\n\n```\n# 关闭项目,当前版本存在bug,关闭路径需要'/'\ncli project close --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet\n# 打开项目\ncli project open --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet\n```\n\n- 编译上传\n\n```\n# 仅编译uni-app项目到微信小程序，不发行\ncli publish --platform mp-weixin --project jiushi-property-side-applet\n# 编译uni-app项目到微信小程序，并发行小程序到微信平台\ncli publish --platform mp-weixin --project jiushi-property-side-applet --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布 --version 2.0.2 --privatekey D:\\private.wxe95734bb5d9a1665.key\n```\n\n> 【坑】设置ip白名单(提示管道信息是因为微信检验ip白名单没有通过，要么设置白名单，要么不要关闭白名单)\n\n- privatekey 小程序上传密钥文件\n\n```\n开发》开发管理》开发设置》小程序代码上传》生成指定秘钥文件\n```\n\n集成到`Jenkins`\n\n```\ne: \ncd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX\nstart HBuilderX.exe \ncli project close --path C:/ProgramData/Jenkins/.jenkins/workspace/uniapp_wy/\ncli project open --path C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\uniapp_wy\\\ncli publish --platform mp-weixin --project uniapp_wy --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布1 --privatekey D:\\wuxinheng\\private.wxe95734bb5d9a1665.key\n```","slug":"jenkins","published":1,"updated":"2023-09-24T07:38:31.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhn001nowtkdgwa8yh5","content":"<h1 id=\"docker构建jenkins-容器\"><a href=\"#docker构建jenkins-容器\" class=\"headerlink\" title=\"docker构建jenkins 容器\"></a><code>docker</code>构建<code>jenkins</code> 容器</h1><h2 id=\"jenkins-安装\"><a href=\"#jenkins-安装\" class=\"headerlink\" title=\"jenkins 安装\"></a><code>jenkins</code> 安装</h2><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建容器\"><a href=\"#构建容器\" class=\"headerlink\" title=\"构建容器\"></a>构建容器</h3><p>创建文件夹存储数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>给文件夹授权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 /data/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>一定要映射到卷，不然后面无法使用<code>docker</code>命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看jenkins密码\"><a href=\"#查看jenkins密码\" class=\"headerlink\" title=\"查看jenkins密码\"></a>查看<code>jenkins</code>密码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker exec -u 0 -it 21ee4816aac1 /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定文件内容</span></span><br><span class=\"line\">cat /var/jenkins_home/secrets/initialAdminPassword #密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用及问题\"><a href=\"#使用及问题\" class=\"headerlink\" title=\"使用及问题\"></a>使用及问题</h3><p>第一次运行成功，后续无法启动，状态显示Exited，需要设置文件夹权限，获取到<code>Jenkins</code>的<code>uid</code>，进行赋权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown 1000:1000 /data/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>虽然映射到卷，<code>jenkis</code>使用<code>docker</code>可以，但是其他<code>docker</code> 命令不行。还需要将当前用户添加到用户组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加用户组</span></span><br><span class=\"line\">groupadd docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加用户到用户组(root:根据实际场景)</span></span><br><span class=\"line\">sudo usermod -a -G docker root</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上面类容还不行，就修改文件权限</span></span><br><span class=\"line\">cd /var/run</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许读写和执行</span></span><br><span class=\"line\">chmod 777 docker.sock</span><br></pre></td></tr></table></figure>\n\n<p><code>jenkins</code>执行<code>shell</code>只执行第一句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># shell 第一句加上这个，指定解释器，下面&quot;#&quot;非注释，也可#!/bin/sh</span><br><span class=\"line\">#!/bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>时区不对</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修复Linux时区，查看上海时区</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入</span></span><br><span class=\"line\">timedatectl list-timezones |grep Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出</span></span><br><span class=\"line\">Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改时区</span></span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修复jenkins时区</span></span><br><span class=\"line\">docker exec -it -u root my_jenkins /bin/bash</span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">echo Asia/Shanghai &gt; /etc/timezone</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">站点重启</span></span><br><span class=\"line\">http://localhost:8080/restart</span><br></pre></td></tr></table></figure>\n\n<p>到此时间格式是改变了，还有其他细节上的时间没有改过来少8个小时。在<code>jenkins</code>上<code>系统管理》脚本命令行</code>运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(&#x27;org.apache.commons.jelly.tags.fmt.timeZone&#x27;, &#x27;Asia/Shanghai&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动化部署-net-core\"><a href=\"#自动化部署-net-core\" class=\"headerlink\" title=\"自动化部署.net core\"></a>自动化部署<code>.net core</code></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">docker stop xblogs_api</span><br><span class=\"line\">docker rm xblogs_api</span><br><span class=\"line\">docker rmi xblogs_api</span><br><span class=\"line\">cp src/xblogs.HttpApi.Host/Dockerfile $PWD</span><br><span class=\"line\">docker build -t xblogs_api .</span><br><span class=\"line\">docker run -v /root/data:/app/inetpub --name xblogs_api -d -p 2022:80 --restart=always xblogs_api </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Windows安装\"><a href=\"#Windows安装\" class=\"headerlink\" title=\"Windows安装\"></a><code>Windows</code>安装</h1><blockquote>\n<p>前提是已经安装<code>Jdk 1.8</code><br>正常安装<code>exe</code>或者<code>msi</code>，中间需要选择<code>jdk</code>目录，和服务端口。</p>\n</blockquote>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"自动部署-net-core\"><a href=\"#自动部署-net-core\" class=\"headerlink\" title=\"自动部署.net core\"></a>自动部署<code>.net core</code></h3><p>正常命令行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000</span><br></pre></td></tr></table></figure>\n\n<p>集成到<code>Jenkins</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@echo 停止应用程序池</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 删除应用程序池</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe delete apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 停止站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe stop site &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 删除站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe delete site &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 进入项目目录</span><br><span class=\"line\">cd &quot;%WORKSPACE%\\ShuWen.Property\\&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 生成项目到指定文件夹</span><br><span class=\"line\">dotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@echo 新增应用程序池</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe add apppool /name:&quot;wy2&quot; /managedRuntimeVersion:&quot;v4.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 新增站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe add site /name:&quot;wy2&quot; /bindings:http/*:8000: /applicationDefaults.applicationPool:&quot;wy2&quot; /physicalPath:&quot;D:\\wwwroot\\wy2\\8000&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 停止应用程序池</span><br><span class=\"line\">@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 启动应用程序池</span><br><span class=\"line\">@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe start apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 停止站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe stop site &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 启动站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe start site &quot;wy2&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>思路</p>\n<p>Git （pull）&#x3D;&#x3D;&gt; Localhost（Docker build）&#x3D;&#x3D;&gt; Images（Run Imgage）&#x3D;&#x3D;&gt; Container</p>\n<p>实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop wuye</span><br><span class=\"line\">docker rm wuye</span><br><span class=\"line\">docker rmi wuye</span><br><span class=\"line\">cd /var/jenkins_mount/workspace/wuye2_dev</span><br><span class=\"line\">docker build -t wuye .</span><br><span class=\"line\">docker run --name wuye -p 2022:80 --restart=always wuye</span><br><span class=\"line\">echo &quot;success&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"uniapp自动打包推送微信平台\"><a href=\"#uniapp自动打包推送微信平台\" class=\"headerlink\" title=\"uniapp自动打包推送微信平台\"></a><code>uniapp</code>自动打包推送微信平台</h3><p>正常命令行</p>\n<ul>\n<li>运行HBuilderX</li>\n</ul>\n<blockquote>\n<p>【坑】HBuilderX 3.3.7-alpha，支持使用CLI发行微信小程序。<code>注意版本</code><br>uni-app发行 - 微信小程序 - HBuilderX 文档 (dcloud.net.cn)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e: # 进入e盘</span><br><span class=\"line\">cd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX # 进入指定目录</span><br><span class=\"line\">start HBuilderX.exe #</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>【坑】运行HBuilderX，一定要先运行这是前提条件，命令行是以此应用程序为服务，否则会提示无服务等问题。<code>运行编辑器</code></p>\n</blockquote>\n<ul>\n<li>操作项目</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭项目,当前版本存在bug,关闭路径需要&#x27;/&#x27;</span><br><span class=\"line\">cli project close --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet</span><br><span class=\"line\"># 打开项目</span><br><span class=\"line\">cli project open --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编译上传</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 仅编译uni-app项目到微信小程序，不发行</span><br><span class=\"line\">cli publish --platform mp-weixin --project jiushi-property-side-applet</span><br><span class=\"line\"># 编译uni-app项目到微信小程序，并发行小程序到微信平台</span><br><span class=\"line\">cli publish --platform mp-weixin --project jiushi-property-side-applet --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布 --version 2.0.2 --privatekey D:\\private.wxe95734bb5d9a1665.key</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>【坑】设置ip白名单(提示管道信息是因为微信检验ip白名单没有通过，要么设置白名单，要么不要关闭白名单)</p>\n</blockquote>\n<ul>\n<li>privatekey 小程序上传密钥文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发》开发管理》开发设置》小程序代码上传》生成指定秘钥文件</span><br></pre></td></tr></table></figure>\n\n<p>集成到<code>Jenkins</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e: </span><br><span class=\"line\">cd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX</span><br><span class=\"line\">start HBuilderX.exe </span><br><span class=\"line\">cli project close --path C:/ProgramData/Jenkins/.jenkins/workspace/uniapp_wy/</span><br><span class=\"line\">cli project open --path C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\uniapp_wy\\</span><br><span class=\"line\">cli publish --platform mp-weixin --project uniapp_wy --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布1 --privatekey D:\\wuxinheng\\private.wxe95734bb5d9a1665.key</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker构建jenkins-容器\"><a href=\"#docker构建jenkins-容器\" class=\"headerlink\" title=\"docker构建jenkins 容器\"></a><code>docker</code>构建<code>jenkins</code> 容器</h1><h2 id=\"jenkins-安装\"><a href=\"#jenkins-安装\" class=\"headerlink\" title=\"jenkins 安装\"></a><code>jenkins</code> 安装</h2><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建容器\"><a href=\"#构建容器\" class=\"headerlink\" title=\"构建容器\"></a>构建容器</h3><p>创建文件夹存储数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>给文件夹授权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 /data/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>一定要映射到卷，不然后面无法使用<code>docker</code>命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jenkins -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/bin/docker -v /data/jenkins_home:/var/jenkins_home -d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看jenkins密码\"><a href=\"#查看jenkins密码\" class=\"headerlink\" title=\"查看jenkins密码\"></a>查看<code>jenkins</code>密码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker exec -u 0 -it 21ee4816aac1 /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定文件内容</span></span><br><span class=\"line\">cat /var/jenkins_home/secrets/initialAdminPassword #密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用及问题\"><a href=\"#使用及问题\" class=\"headerlink\" title=\"使用及问题\"></a>使用及问题</h3><p>第一次运行成功，后续无法启动，状态显示Exited，需要设置文件夹权限，获取到<code>Jenkins</code>的<code>uid</code>，进行赋权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown 1000:1000 /data/jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>虽然映射到卷，<code>jenkis</code>使用<code>docker</code>可以，但是其他<code>docker</code> 命令不行。还需要将当前用户添加到用户组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加用户组</span></span><br><span class=\"line\">groupadd docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加用户到用户组(root:根据实际场景)</span></span><br><span class=\"line\">sudo usermod -a -G docker root</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上面类容还不行，就修改文件权限</span></span><br><span class=\"line\">cd /var/run</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许读写和执行</span></span><br><span class=\"line\">chmod 777 docker.sock</span><br></pre></td></tr></table></figure>\n\n<p><code>jenkins</code>执行<code>shell</code>只执行第一句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># shell 第一句加上这个，指定解释器，下面&quot;#&quot;非注释，也可#!/bin/sh</span><br><span class=\"line\">#!/bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>时区不对</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修复Linux时区，查看上海时区</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入</span></span><br><span class=\"line\">timedatectl list-timezones |grep Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出</span></span><br><span class=\"line\">Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改时区</span></span><br><span class=\"line\">timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修复jenkins时区</span></span><br><span class=\"line\">docker exec -it -u root my_jenkins /bin/bash</span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">echo Asia/Shanghai &gt; /etc/timezone</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">站点重启</span></span><br><span class=\"line\">http://localhost:8080/restart</span><br></pre></td></tr></table></figure>\n\n<p>到此时间格式是改变了，还有其他细节上的时间没有改过来少8个小时。在<code>jenkins</code>上<code>系统管理》脚本命令行</code>运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(&#x27;org.apache.commons.jelly.tags.fmt.timeZone&#x27;, &#x27;Asia/Shanghai&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动化部署-net-core\"><a href=\"#自动化部署-net-core\" class=\"headerlink\" title=\"自动化部署.net core\"></a>自动化部署<code>.net core</code></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">docker stop xblogs_api</span><br><span class=\"line\">docker rm xblogs_api</span><br><span class=\"line\">docker rmi xblogs_api</span><br><span class=\"line\">cp src/xblogs.HttpApi.Host/Dockerfile $PWD</span><br><span class=\"line\">docker build -t xblogs_api .</span><br><span class=\"line\">docker run -v /root/data:/app/inetpub --name xblogs_api -d -p 2022:80 --restart=always xblogs_api </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Windows安装\"><a href=\"#Windows安装\" class=\"headerlink\" title=\"Windows安装\"></a><code>Windows</code>安装</h1><blockquote>\n<p>前提是已经安装<code>Jdk 1.8</code><br>正常安装<code>exe</code>或者<code>msi</code>，中间需要选择<code>jdk</code>目录，和服务端口。</p>\n</blockquote>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"自动部署-net-core\"><a href=\"#自动部署-net-core\" class=\"headerlink\" title=\"自动部署.net core\"></a>自动部署<code>.net core</code></h3><p>正常命令行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000</span><br></pre></td></tr></table></figure>\n\n<p>集成到<code>Jenkins</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@echo 停止应用程序池</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 删除应用程序池</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe delete apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 停止站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe stop site &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 删除站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe delete site &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 进入项目目录</span><br><span class=\"line\">cd &quot;%WORKSPACE%\\ShuWen.Property\\&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 生成项目到指定文件夹</span><br><span class=\"line\">dotnet publish -c:Release --self-contained false --output D:\\wwwroot\\wy2\\8000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@echo 新增应用程序池</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe add apppool /name:&quot;wy2&quot; /managedRuntimeVersion:&quot;v4.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 新增站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe add site /name:&quot;wy2&quot; /bindings:http/*:8000: /applicationDefaults.applicationPool:&quot;wy2&quot; /physicalPath:&quot;D:\\wwwroot\\wy2\\8000&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 停止应用程序池</span><br><span class=\"line\">@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe stop apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 启动应用程序池</span><br><span class=\"line\">@echo C:\\Windows\\System32\\inetsrv\\appcmd.exe start apppool &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 停止站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe stop site &quot;wy2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@echo 启动站点</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\appcmd.exe start site &quot;wy2&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>思路</p>\n<p>Git （pull）&#x3D;&#x3D;&gt; Localhost（Docker build）&#x3D;&#x3D;&gt; Images（Run Imgage）&#x3D;&#x3D;&gt; Container</p>\n<p>实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop wuye</span><br><span class=\"line\">docker rm wuye</span><br><span class=\"line\">docker rmi wuye</span><br><span class=\"line\">cd /var/jenkins_mount/workspace/wuye2_dev</span><br><span class=\"line\">docker build -t wuye .</span><br><span class=\"line\">docker run --name wuye -p 2022:80 --restart=always wuye</span><br><span class=\"line\">echo &quot;success&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"uniapp自动打包推送微信平台\"><a href=\"#uniapp自动打包推送微信平台\" class=\"headerlink\" title=\"uniapp自动打包推送微信平台\"></a><code>uniapp</code>自动打包推送微信平台</h3><p>正常命令行</p>\n<ul>\n<li>运行HBuilderX</li>\n</ul>\n<blockquote>\n<p>【坑】HBuilderX 3.3.7-alpha，支持使用CLI发行微信小程序。<code>注意版本</code><br>uni-app发行 - 微信小程序 - HBuilderX 文档 (dcloud.net.cn)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e: # 进入e盘</span><br><span class=\"line\">cd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX # 进入指定目录</span><br><span class=\"line\">start HBuilderX.exe #</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>【坑】运行HBuilderX，一定要先运行这是前提条件，命令行是以此应用程序为服务，否则会提示无服务等问题。<code>运行编辑器</code></p>\n</blockquote>\n<ul>\n<li>操作项目</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭项目,当前版本存在bug,关闭路径需要&#x27;/&#x27;</span><br><span class=\"line\">cli project close --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet</span><br><span class=\"line\"># 打开项目</span><br><span class=\"line\">cli project open --path D:\\Projects\\wuye_wechat_wy\\jiushi-property-side-applet</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编译上传</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 仅编译uni-app项目到微信小程序，不发行</span><br><span class=\"line\">cli publish --platform mp-weixin --project jiushi-property-side-applet</span><br><span class=\"line\"># 编译uni-app项目到微信小程序，并发行小程序到微信平台</span><br><span class=\"line\">cli publish --platform mp-weixin --project jiushi-property-side-applet --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布 --version 2.0.2 --privatekey D:\\private.wxe95734bb5d9a1665.key</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>【坑】设置ip白名单(提示管道信息是因为微信检验ip白名单没有通过，要么设置白名单，要么不要关闭白名单)</p>\n</blockquote>\n<ul>\n<li>privatekey 小程序上传密钥文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发》开发管理》开发设置》小程序代码上传》生成指定秘钥文件</span><br></pre></td></tr></table></figure>\n\n<p>集成到<code>Jenkins</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e: </span><br><span class=\"line\">cd E:\\HBuilderX.3.3.10.20220124.full\\HBuilderX</span><br><span class=\"line\">start HBuilderX.exe </span><br><span class=\"line\">cli project close --path C:/ProgramData/Jenkins/.jenkins/workspace/uniapp_wy/</span><br><span class=\"line\">cli project open --path C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\uniapp_wy\\</span><br><span class=\"line\">cli publish --platform mp-weixin --project uniapp_wy --upload true --appid wxe95734bb5d9a1665 --description uniapp-cli发布1 --privatekey D:\\wuxinheng\\private.wxe95734bb5d9a1665.key</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"jenkins使用","path":"2022/07/13/jenkins/","eyeCatchImage":null,"excerpt":"本文介绍了centos docker和windows中安装jenkins,以及具体的使用。","date":{"_isAMomentObject":true,"_i":"2022-07-13T14:21:14.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-13T14:21:14.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"jenkins","tags":["CI/CD","docker构建jenkins","jenkis部署.netcore","jenkis部署uniapp","uniapp自动推送微信","jenkis"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"k8s部署,简单了解","author":"wuxinheng","description":"k8s部署,可能并不太好","date":"2022-09-05T14:13:37.000Z","_content":"# Kubeadm\n\nKubeadm 是一个提供了 `kubeadm init` 和 `kubeadm join` 的工具， 作为创建 Kubernetes 集群的 “快捷途径” 的最佳实践。\n\nkubeadm 通过执行必要的操作来启动和运行最小可用集群。 按照设计，它只关注启动引导，而非配置机器。同样的， 安装各种 “锦上添花” 的扩展，例如 Kubernetes Dashboard、 监控方案、以及特定云平台的扩展，都不在讨论范围内。\n\n### 废弃\n\n> 可以忽略\n\n相反，我们希望在 kubeadm 之上构建更高级别以及更加合规的工具， 理想情况下，使用 kubeadm 作为所有部署工作的基准将会更加易于创建一致性集群。\n\n```shell\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nexclude=kubelet kubeadm kubectl\nEOF\n\n# 将 SELinux 设置为 permissive 模式（相当于将其禁用）\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\nsudo systemctl start  kubelet\nsudo systemctl enable --now kubelet\n```\n\n[安装 kubeadm | Kubernetes](https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/)\n\n[【kubernetes入门学习】使用kubeadm搭建k8s集群 - 静水楼台/Java部落阁 - 博客园 (cnblogs.com)](https://www.cnblogs.com/rouqinglangzi/p/11760469.html#_lab2_1_2)\n\n中间出现：Connection timed out after 30001 milliseconds\n\n替换成阿里云地址\n\n```shell\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nexclude=kubelet kubeadm kubectl\nEOF\n```\n\n[CentOS7 yum 安装 k8s 报错 - 豌里个豆 - 博客园 (cnblogs.com)](https://www.cnblogs.com/wandoupeas/p/15682838.html)\n\nkubelet kubeadm kubectl需要版本一致\n\n```shell\nkubeadm version\nkubectl version --client\nkubelet --version\n```\n\n[安装指定版本的kubeadm - 简书 (jianshu.com)](https://www.jianshu.com/p/75091ad364c1)\n\nmaster初始化\n\n```shell\nkubeadm init \\\n--apiserver-advertise-address=192.168.126.128 \\\n--kubernetes-version=1.25.0 \\\n--image-repository registry.aliyuncs.com/google_containers \\\n--service-cidr=10.96.0.0/16 \\\n--pod-network-cidr=10.244.0.0/16\n```\n\n参数解释：\n\n- --kubernetes-version：指定kubernetes的版本，与上面kubelet，kubeadm，kubectl工具版本保持一致。\n- --apiserver-advertise-address：apiserver所在的节点(master)的ip。\n- --image-repository=registry.aliyuncs.com/google_containers：由于国外地址无法访问，所以使用阿里云仓库地址\n- --server-cidr：service之间访问使用的网络ip段\n- --pod-network-cidr：pod之间网络访问使用的网络ip,与下文部署的CNI网络组件yml中保持一致\n\n[ Kubeadm初始化报错：ERROR CRI container runtime is not running:_困的一批的博客-CSDN博客](https://blog.csdn.net/qq_43580215/article/details/125153959)\n\n查看日志\n\n```\njournalctl -u kubelet\n```\n\n[kubeadmin 初始化或者节点加入k8s集群时报错_周易不易的博客-CSDN博客](https://blog.csdn.net/m0_61237221/article/details/125223937)\n\n经过几次尝试一直卡在拉取必要镜像哪里。\n\n我在技术群里，群友发了个地址，我重新部署上了，中间也遇到问题，不过都是百度可以解决的。\n\n[Kubernetes部署（Docker为运行时） - Layzer - 博客园 (cnblogs.com)](https://www.cnblogs.com/layzer/articles/kubernetes_docker.html)\n\n### 教程\n\n> 直接看这里\n\n#### 环境\n\n```shell\n三台主机\nIP:  10.0.0.10     主机名：master    系统： centos 7.9      配置： 4C 2G\nIP:  10.0.0.11     主机名：node1     系统： centos 7.9      配置： 2C 2G\nIP:  10.0.0.12     主机名：node2     系统： centos 7.9      配置： 2C 2G\n```\n\n#### 基础配置\n\n```shell\n1、所以节点关闭防火墙\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n2、所以节点关闭selinux\nsed -i \"s/^SELINUX=.*/SELINUX=disabled/g\" /etc/selinux/config\nsetenforce 0\n\n3、所以节点关闭swap\nswapoff -a  # 临时关闭\nvi /etc/fstab 注释到swap那一行 # 永久关闭\nsed -i 's/.*swap.*/#&/g' /etc/fstab\n\n4、所有节点添加主机名与IP对应关系\ncat >> /etc/hosts << EOF\n10.0.0.10 k8s-master\n10.0.0.11 k8s-node1\n10.0.0.12 k8s-node2\nEOF\n# 配置Hostname\nhostnamectl set-hostname k8s-master\nhostnamectl set-hostname k8s-node1\nhostnamectl set-hostname k8s-node2\n\n5、将桥接的IPv4流量传递到iptables的链（所有机器执行）、\ncat > /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\n\n6、所有节点安装docker\n# 配置Docker源和kubernetes源\nyum install -y yum-utils\nyum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 配置阿里云加速kubernetes源\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\nyum -y install docker-ce\n# 启动docker\nsystemctl start docker\nsystemctl enable docker\n# 配置加速\n# 配置加速，并设置驱动\ncat > /etc/docker/daemon.json <<EOF\n{\n  \"registry-mirrors\": [\"https://6ze43vnb.mirror.aliyuncs.com\"],\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n\n# 加载daemon并重启docker\nsystemctl daemon-reload\nsystemctl restart docker\n```\n\n#### 安装Kubeadm以及初始化Kubernetes集群\n\n```shell\n1：所有节点安装kubeadm，kubelet和kubectl\nyum install -y kubelet-1.23.1 kubeadm-1.23.1 kubectl-1.23.1\nsystemctl enable kubelet --now\n\n2：初始化master节点\n- 只在master节点执行\n- 由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址\n- 执行成功以后最后结果会输出\nkubeadm init \\\n  --apiserver-advertise-address=10.0.0.10 \\\n  --image-repository registry.aliyuncs.com/google_containers \\\n  --kubernetes-version v1.23.1 \\\n  --pod-network-cidr=100.1.0.0/16 \\\n  --service-cidr=172.1.0.0/16\n  \n3：kubeadm join 10.0.0.10:6443 --token bs9ygy.iudr36522p081nny \\\n\t--discovery-token-ca-cert-hash sha256:4de71c2d7ae5b6f985992dee0fd31dc550244604e8aa618850a494b65dc14902\n\t\n4：设置kubectl默认访问的api\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\nsource ~/.bashrc\n\n5：部署calico网络插件 #可能有问题，我没试，群友给了一个新的方式\ncurl https://docs.projectcalico.org/manifests/calico.yaml -O\nkubectl apply -f calico.yaml\n\n#新\nwget https://docs.projectcalico.org/v3.14/manifests/calico.yaml --no-check-certificate\n```\n\n#### 查看集群\n\n```shell\n# 查看node以及网络插件方面\n[root@k8s-master ~]# kubectl get pod -A\nNAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE\nkube-system   calico-kube-controllers-85b5b5888d-g6d5g   1/1     Running   0          5m52s\nkube-system   calico-node-67lp5                          1/1     Running   0          12m\nkube-system   calico-node-f5mgs                          1/1     Running   0          14m\nkube-system   calico-node-f69mb                          1/1     Running   0          12m\nkube-system   coredns-6d8c4cb4d-rpxhq                    1/1     Running   0          21m\nkube-system   coredns-6d8c4cb4d-vc7g6                    1/1     Running   0          21m\nkube-system   etcd-k8s-master                            1/1     Running   0          21m\nkube-system   kube-apiserver-k8s-master                  1/1     Running   0          21m\nkube-system   kube-controller-manager-k8s-master         1/1     Running   0          21m\nkube-system   kube-proxy-cwgpd                           1/1     Running   0          21m\nkube-system   kube-proxy-rn5w9                           1/1     Running   0          17m\nkube-system   kube-proxy-xb4kj                           1/1     Running   0          18m\nkube-system   kube-scheduler-k8s-master                  1/1     Running   0          21m\n```\n\n#### kubectl命令例子\n\n##### 查看类命令\n\n```shell\n# 获取节点和服务版本信息\nkubectl get nodes\n\n# 获取节点和服务版本信息，并查看附加信息\nkubectl get nodes -o wide # 获取pod信息，默认是default名称空间\nkubectl get pod\n\n# 获取pod信息，默认是default名称空间，并查看附加信息【如：pod的IP及在哪个节点运行】\nkubectl get pod -o wide\n\n# 获取指定名称空间的pod\nkubectl get pod -n kube-system\n\n# 获取指定名称空间中的指定pod\nkubectl get pod -n kube-system podName\n\n# 获取所有名称空间的pod\nkubectl get pod -A\n\n# 查看pod的详细信息，以yaml格式或json格式显示\nkubectl get pods -o yaml\nkubectl get pods -o json # 查看pod的标签信息\nkubectl get pod -A --show-labels\n\n# 根据Selector（label query）来查询pod\nkubectl get pod -A --selector=\"k8s-app=kube-dns\" # 查看运行pod的环境变量\nkubectl exec podName env\n\n# 查看指定pod的日志\nkubectl logs -f --tail 500 -n kube-system kube-apiserver-k8s-master # 查看所有名称空间的service信息\nkubectl get svc -A\n\n# 查看指定名称空间的service信息\nkubectl get svc -n kube-system # 查看componentstatuses信息\nkubectl get cs\n\n# 查看所有configmaps信息\nkubectl get cm -A\n\n# 查看所有serviceaccounts信息\nkubectl get sa -A\n\n# 查看所有daemonsets信息\nkubectl get ds -A\n\n# 查看所有deployments信息\nkubectl get deploy -A\n\n# 查看所有replicasets信息\nkubectl get rs -A\n\n# 查看所有statefulsets信息\nkubectl get sts -A\n\n# 查看所有jobs信息\nkubectl get jobs -A\n\n# 查看所有ingresses信息\nkubectl get ing -A\n\n# 查看有哪些名称空间\nkubectl get ns # 查看pod的描述信息\nkubectl describe pod podName\nkubectl describe pod -n kube-system kube-apiserver-k8s-master\n\n# 查看指定名称空间中指定deploy的描述信息\nkubectl describe deploy -n kube-system coredns # 查看node或pod的资源使用情况\n# 需要heapster 或metrics-server支持\nkubectl top node\nkubectl top pod # 查看集群信息\nkubectl cluster-info   或  kubectl cluster-info dump\n\n# 查看各组件信息【172.16.1.110为master机器】\nkubectl -s https://172.16.1.110:6443 get componentstatuses\n```\n\n##### 操作类命令\n\n```shell\n# 创建资源\nkubectl create -f xxx.yaml # 应用资源\nkubectl apply -f xxx.yaml # 应用资源，该目录下的所有 .yaml, .yml, 或 .json 文件都会被使用\nkubectl apply -f <directory> # 创建test名称空间\nkubectl create namespace test # 删除资源\nkubectl delete -f xxx.yaml\nkubectl delete -f <directory> # 删除指定的pod\nkubectl delete pod podName # 删除指定名称空间的指定pod\nkubectl delete pod -n test podName # 删除其他资源\nkubectl delete svc svcName\nkubectl delete deploy deployName\nkubectl delete ns nsName # 强制删除\nkubectl delete pod podName -n nsName --grace-period=0 --force\nkubectl delete pod podName -n nsName --grace-period=1\nkubectl delete pod podName -n nsName --now # 编辑资源\nkubectl edit pod podName\n```\n\n##### 进阶命令操作\n\n```shell\n# kubectl exec：进入pod启动的容器\nkubectl exec -it podName -n nsName /bin/sh    #进入容器\nkubectl exec -it podName -n nsName /bin/bash  #进入容器 # kubectl label：添加label值\nkubectl label nodes k8s-node01 zone=north  #为指定节点添加标签\nkubectl label nodes k8s-node01 zone-       #为指定节点删除标签\nkubectl label pod podName -n nsName role-name=test    #为指定pod添加标签\nkubectl label pod podName -n nsName role-name=dev --overwrite  #修改lable标签值\nkubectl label pod podName -n nsName role-name-        #删除lable标签 # kubectl滚动升级； 通过 kubectl apply -f myapp-deployment-v1.yaml 启动deploy\nkubectl apply -f myapp-deployment-v2.yaml     #通过配置文件滚动升级\nkubectl set image deploy/myapp-deployment myapp=\"registry.cn-beijing.aliyuncs.com/google_registry/myapp:v3\"   #通过命令滚动升级\nkubectl rollout undo deploy/myapp-deployment 或者 kubectl rollout undo deploy myapp-deployment    #pod回滚到前一个版本\nkubectl rollout undo deploy/myapp-deployment --to-revision=2  #回滚到指定历史版本 # kubectl scale：动态伸缩\nkubectl scale deploy myapp-deployment --replicas=5  # 动态伸缩\nkubectl scale --replicas=8 -f myapp-deployment-v2.yaml  #动态伸缩【根据资源类型和名称伸缩，其他配置「如：镜像版本不同」不生效】\n```\n\n### 可视化面板\n\n[手动快速部署 | Rancher文档](https://docs.rancher.cn/docs/rancher2.5/quick-start-guide/deployment/quickstart-manual-setup/_index)\n\n```shell\ndocker run -d --privileged --restart=unless-stopped \\\n  -p 80:80 -p 443:443 \\\n  rancher/rancher:latest\n```\n\n","source":"_posts/k8s部署.md","raw":"---\ntitle: k8s部署,简单了解\nauthor: wuxinheng\ndescription: k8s部署,可能并不太好\ndate: 2022-09-05 22:13:37\ntags:\n- deploy\ncategories:\n- k8s\n---\n# Kubeadm\n\nKubeadm 是一个提供了 `kubeadm init` 和 `kubeadm join` 的工具， 作为创建 Kubernetes 集群的 “快捷途径” 的最佳实践。\n\nkubeadm 通过执行必要的操作来启动和运行最小可用集群。 按照设计，它只关注启动引导，而非配置机器。同样的， 安装各种 “锦上添花” 的扩展，例如 Kubernetes Dashboard、 监控方案、以及特定云平台的扩展，都不在讨论范围内。\n\n### 废弃\n\n> 可以忽略\n\n相反，我们希望在 kubeadm 之上构建更高级别以及更加合规的工具， 理想情况下，使用 kubeadm 作为所有部署工作的基准将会更加易于创建一致性集群。\n\n```shell\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nexclude=kubelet kubeadm kubectl\nEOF\n\n# 将 SELinux 设置为 permissive 模式（相当于将其禁用）\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\nsudo systemctl start  kubelet\nsudo systemctl enable --now kubelet\n```\n\n[安装 kubeadm | Kubernetes](https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/)\n\n[【kubernetes入门学习】使用kubeadm搭建k8s集群 - 静水楼台/Java部落阁 - 博客园 (cnblogs.com)](https://www.cnblogs.com/rouqinglangzi/p/11760469.html#_lab2_1_2)\n\n中间出现：Connection timed out after 30001 milliseconds\n\n替换成阿里云地址\n\n```shell\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nexclude=kubelet kubeadm kubectl\nEOF\n```\n\n[CentOS7 yum 安装 k8s 报错 - 豌里个豆 - 博客园 (cnblogs.com)](https://www.cnblogs.com/wandoupeas/p/15682838.html)\n\nkubelet kubeadm kubectl需要版本一致\n\n```shell\nkubeadm version\nkubectl version --client\nkubelet --version\n```\n\n[安装指定版本的kubeadm - 简书 (jianshu.com)](https://www.jianshu.com/p/75091ad364c1)\n\nmaster初始化\n\n```shell\nkubeadm init \\\n--apiserver-advertise-address=192.168.126.128 \\\n--kubernetes-version=1.25.0 \\\n--image-repository registry.aliyuncs.com/google_containers \\\n--service-cidr=10.96.0.0/16 \\\n--pod-network-cidr=10.244.0.0/16\n```\n\n参数解释：\n\n- --kubernetes-version：指定kubernetes的版本，与上面kubelet，kubeadm，kubectl工具版本保持一致。\n- --apiserver-advertise-address：apiserver所在的节点(master)的ip。\n- --image-repository=registry.aliyuncs.com/google_containers：由于国外地址无法访问，所以使用阿里云仓库地址\n- --server-cidr：service之间访问使用的网络ip段\n- --pod-network-cidr：pod之间网络访问使用的网络ip,与下文部署的CNI网络组件yml中保持一致\n\n[ Kubeadm初始化报错：ERROR CRI container runtime is not running:_困的一批的博客-CSDN博客](https://blog.csdn.net/qq_43580215/article/details/125153959)\n\n查看日志\n\n```\njournalctl -u kubelet\n```\n\n[kubeadmin 初始化或者节点加入k8s集群时报错_周易不易的博客-CSDN博客](https://blog.csdn.net/m0_61237221/article/details/125223937)\n\n经过几次尝试一直卡在拉取必要镜像哪里。\n\n我在技术群里，群友发了个地址，我重新部署上了，中间也遇到问题，不过都是百度可以解决的。\n\n[Kubernetes部署（Docker为运行时） - Layzer - 博客园 (cnblogs.com)](https://www.cnblogs.com/layzer/articles/kubernetes_docker.html)\n\n### 教程\n\n> 直接看这里\n\n#### 环境\n\n```shell\n三台主机\nIP:  10.0.0.10     主机名：master    系统： centos 7.9      配置： 4C 2G\nIP:  10.0.0.11     主机名：node1     系统： centos 7.9      配置： 2C 2G\nIP:  10.0.0.12     主机名：node2     系统： centos 7.9      配置： 2C 2G\n```\n\n#### 基础配置\n\n```shell\n1、所以节点关闭防火墙\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n2、所以节点关闭selinux\nsed -i \"s/^SELINUX=.*/SELINUX=disabled/g\" /etc/selinux/config\nsetenforce 0\n\n3、所以节点关闭swap\nswapoff -a  # 临时关闭\nvi /etc/fstab 注释到swap那一行 # 永久关闭\nsed -i 's/.*swap.*/#&/g' /etc/fstab\n\n4、所有节点添加主机名与IP对应关系\ncat >> /etc/hosts << EOF\n10.0.0.10 k8s-master\n10.0.0.11 k8s-node1\n10.0.0.12 k8s-node2\nEOF\n# 配置Hostname\nhostnamectl set-hostname k8s-master\nhostnamectl set-hostname k8s-node1\nhostnamectl set-hostname k8s-node2\n\n5、将桥接的IPv4流量传递到iptables的链（所有机器执行）、\ncat > /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\n\n6、所有节点安装docker\n# 配置Docker源和kubernetes源\nyum install -y yum-utils\nyum-config-manager \\\n    --add-repo \\\n    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 配置阿里云加速kubernetes源\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\nyum -y install docker-ce\n# 启动docker\nsystemctl start docker\nsystemctl enable docker\n# 配置加速\n# 配置加速，并设置驱动\ncat > /etc/docker/daemon.json <<EOF\n{\n  \"registry-mirrors\": [\"https://6ze43vnb.mirror.aliyuncs.com\"],\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n\n# 加载daemon并重启docker\nsystemctl daemon-reload\nsystemctl restart docker\n```\n\n#### 安装Kubeadm以及初始化Kubernetes集群\n\n```shell\n1：所有节点安装kubeadm，kubelet和kubectl\nyum install -y kubelet-1.23.1 kubeadm-1.23.1 kubectl-1.23.1\nsystemctl enable kubelet --now\n\n2：初始化master节点\n- 只在master节点执行\n- 由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址\n- 执行成功以后最后结果会输出\nkubeadm init \\\n  --apiserver-advertise-address=10.0.0.10 \\\n  --image-repository registry.aliyuncs.com/google_containers \\\n  --kubernetes-version v1.23.1 \\\n  --pod-network-cidr=100.1.0.0/16 \\\n  --service-cidr=172.1.0.0/16\n  \n3：kubeadm join 10.0.0.10:6443 --token bs9ygy.iudr36522p081nny \\\n\t--discovery-token-ca-cert-hash sha256:4de71c2d7ae5b6f985992dee0fd31dc550244604e8aa618850a494b65dc14902\n\t\n4：设置kubectl默认访问的api\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\nsource ~/.bashrc\n\n5：部署calico网络插件 #可能有问题，我没试，群友给了一个新的方式\ncurl https://docs.projectcalico.org/manifests/calico.yaml -O\nkubectl apply -f calico.yaml\n\n#新\nwget https://docs.projectcalico.org/v3.14/manifests/calico.yaml --no-check-certificate\n```\n\n#### 查看集群\n\n```shell\n# 查看node以及网络插件方面\n[root@k8s-master ~]# kubectl get pod -A\nNAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE\nkube-system   calico-kube-controllers-85b5b5888d-g6d5g   1/1     Running   0          5m52s\nkube-system   calico-node-67lp5                          1/1     Running   0          12m\nkube-system   calico-node-f5mgs                          1/1     Running   0          14m\nkube-system   calico-node-f69mb                          1/1     Running   0          12m\nkube-system   coredns-6d8c4cb4d-rpxhq                    1/1     Running   0          21m\nkube-system   coredns-6d8c4cb4d-vc7g6                    1/1     Running   0          21m\nkube-system   etcd-k8s-master                            1/1     Running   0          21m\nkube-system   kube-apiserver-k8s-master                  1/1     Running   0          21m\nkube-system   kube-controller-manager-k8s-master         1/1     Running   0          21m\nkube-system   kube-proxy-cwgpd                           1/1     Running   0          21m\nkube-system   kube-proxy-rn5w9                           1/1     Running   0          17m\nkube-system   kube-proxy-xb4kj                           1/1     Running   0          18m\nkube-system   kube-scheduler-k8s-master                  1/1     Running   0          21m\n```\n\n#### kubectl命令例子\n\n##### 查看类命令\n\n```shell\n# 获取节点和服务版本信息\nkubectl get nodes\n\n# 获取节点和服务版本信息，并查看附加信息\nkubectl get nodes -o wide # 获取pod信息，默认是default名称空间\nkubectl get pod\n\n# 获取pod信息，默认是default名称空间，并查看附加信息【如：pod的IP及在哪个节点运行】\nkubectl get pod -o wide\n\n# 获取指定名称空间的pod\nkubectl get pod -n kube-system\n\n# 获取指定名称空间中的指定pod\nkubectl get pod -n kube-system podName\n\n# 获取所有名称空间的pod\nkubectl get pod -A\n\n# 查看pod的详细信息，以yaml格式或json格式显示\nkubectl get pods -o yaml\nkubectl get pods -o json # 查看pod的标签信息\nkubectl get pod -A --show-labels\n\n# 根据Selector（label query）来查询pod\nkubectl get pod -A --selector=\"k8s-app=kube-dns\" # 查看运行pod的环境变量\nkubectl exec podName env\n\n# 查看指定pod的日志\nkubectl logs -f --tail 500 -n kube-system kube-apiserver-k8s-master # 查看所有名称空间的service信息\nkubectl get svc -A\n\n# 查看指定名称空间的service信息\nkubectl get svc -n kube-system # 查看componentstatuses信息\nkubectl get cs\n\n# 查看所有configmaps信息\nkubectl get cm -A\n\n# 查看所有serviceaccounts信息\nkubectl get sa -A\n\n# 查看所有daemonsets信息\nkubectl get ds -A\n\n# 查看所有deployments信息\nkubectl get deploy -A\n\n# 查看所有replicasets信息\nkubectl get rs -A\n\n# 查看所有statefulsets信息\nkubectl get sts -A\n\n# 查看所有jobs信息\nkubectl get jobs -A\n\n# 查看所有ingresses信息\nkubectl get ing -A\n\n# 查看有哪些名称空间\nkubectl get ns # 查看pod的描述信息\nkubectl describe pod podName\nkubectl describe pod -n kube-system kube-apiserver-k8s-master\n\n# 查看指定名称空间中指定deploy的描述信息\nkubectl describe deploy -n kube-system coredns # 查看node或pod的资源使用情况\n# 需要heapster 或metrics-server支持\nkubectl top node\nkubectl top pod # 查看集群信息\nkubectl cluster-info   或  kubectl cluster-info dump\n\n# 查看各组件信息【172.16.1.110为master机器】\nkubectl -s https://172.16.1.110:6443 get componentstatuses\n```\n\n##### 操作类命令\n\n```shell\n# 创建资源\nkubectl create -f xxx.yaml # 应用资源\nkubectl apply -f xxx.yaml # 应用资源，该目录下的所有 .yaml, .yml, 或 .json 文件都会被使用\nkubectl apply -f <directory> # 创建test名称空间\nkubectl create namespace test # 删除资源\nkubectl delete -f xxx.yaml\nkubectl delete -f <directory> # 删除指定的pod\nkubectl delete pod podName # 删除指定名称空间的指定pod\nkubectl delete pod -n test podName # 删除其他资源\nkubectl delete svc svcName\nkubectl delete deploy deployName\nkubectl delete ns nsName # 强制删除\nkubectl delete pod podName -n nsName --grace-period=0 --force\nkubectl delete pod podName -n nsName --grace-period=1\nkubectl delete pod podName -n nsName --now # 编辑资源\nkubectl edit pod podName\n```\n\n##### 进阶命令操作\n\n```shell\n# kubectl exec：进入pod启动的容器\nkubectl exec -it podName -n nsName /bin/sh    #进入容器\nkubectl exec -it podName -n nsName /bin/bash  #进入容器 # kubectl label：添加label值\nkubectl label nodes k8s-node01 zone=north  #为指定节点添加标签\nkubectl label nodes k8s-node01 zone-       #为指定节点删除标签\nkubectl label pod podName -n nsName role-name=test    #为指定pod添加标签\nkubectl label pod podName -n nsName role-name=dev --overwrite  #修改lable标签值\nkubectl label pod podName -n nsName role-name-        #删除lable标签 # kubectl滚动升级； 通过 kubectl apply -f myapp-deployment-v1.yaml 启动deploy\nkubectl apply -f myapp-deployment-v2.yaml     #通过配置文件滚动升级\nkubectl set image deploy/myapp-deployment myapp=\"registry.cn-beijing.aliyuncs.com/google_registry/myapp:v3\"   #通过命令滚动升级\nkubectl rollout undo deploy/myapp-deployment 或者 kubectl rollout undo deploy myapp-deployment    #pod回滚到前一个版本\nkubectl rollout undo deploy/myapp-deployment --to-revision=2  #回滚到指定历史版本 # kubectl scale：动态伸缩\nkubectl scale deploy myapp-deployment --replicas=5  # 动态伸缩\nkubectl scale --replicas=8 -f myapp-deployment-v2.yaml  #动态伸缩【根据资源类型和名称伸缩，其他配置「如：镜像版本不同」不生效】\n```\n\n### 可视化面板\n\n[手动快速部署 | Rancher文档](https://docs.rancher.cn/docs/rancher2.5/quick-start-guide/deployment/quickstart-manual-setup/_index)\n\n```shell\ndocker run -d --privileged --restart=unless-stopped \\\n  -p 80:80 -p 443:443 \\\n  rancher/rancher:latest\n```\n\n","slug":"k8s部署","published":1,"updated":"2023-09-24T07:38:31.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhn001powtk9l9nbbry","content":"<h1 id=\"Kubeadm\"><a href=\"#Kubeadm\" class=\"headerlink\" title=\"Kubeadm\"></a>Kubeadm</h1><p>Kubeadm 是一个提供了 <code>kubeadm init</code> 和 <code>kubeadm join</code> 的工具， 作为创建 Kubernetes 集群的 “快捷途径” 的最佳实践。</p>\n<p>kubeadm 通过执行必要的操作来启动和运行最小可用集群。 按照设计，它只关注启动引导，而非配置机器。同样的， 安装各种 “锦上添花” 的扩展，例如 Kubernetes Dashboard、 监控方案、以及特定云平台的扩展，都不在讨论范围内。</p>\n<h3 id=\"废弃\"><a href=\"#废弃\" class=\"headerlink\" title=\"废弃\"></a>废弃</h3><blockquote>\n<p>可以忽略</p>\n</blockquote>\n<p>相反，我们希望在 kubeadm 之上构建更高级别以及更加合规的工具， 理想情况下，使用 kubeadm 作为所有部署工作的基准将会更加易于创建一致性集群。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">exclude=kubelet kubeadm kubectl</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class=\"line\">sudo setenforce 0</span><br><span class=\"line\">sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start  kubelet</span><br><span class=\"line\">sudo systemctl enable --now kubelet</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/\">安装 kubeadm | Kubernetes</a></p>\n<p><a href=\"https://www.cnblogs.com/rouqinglangzi/p/11760469.html#_lab2_1_2\">【kubernetes入门学习】使用kubeadm搭建k8s集群 - 静水楼台&#x2F;Java部落阁 - 博客园 (cnblogs.com)</a></p>\n<p>中间出现：Connection timed out after 30001 milliseconds</p>\n<p>替换成阿里云地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">exclude=kubelet kubeadm kubectl</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/wandoupeas/p/15682838.html\">CentOS7 yum 安装 k8s 报错 - 豌里个豆 - 博客园 (cnblogs.com)</a></p>\n<p>kubelet kubeadm kubectl需要版本一致</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm version</span><br><span class=\"line\">kubectl version --client</span><br><span class=\"line\">kubelet --version</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/75091ad364c1\">安装指定版本的kubeadm - 简书 (jianshu.com)</a></p>\n<p>master初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.126.128 \\</span><br><span class=\"line\">--kubernetes-version=1.25.0 \\</span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：</p>\n<ul>\n<li>–kubernetes-version：指定kubernetes的版本，与上面kubelet，kubeadm，kubectl工具版本保持一致。</li>\n<li>–apiserver-advertise-address：apiserver所在的节点(master)的ip。</li>\n<li>–image-repository&#x3D;registry.aliyuncs.com&#x2F;google_containers：由于国外地址无法访问，所以使用阿里云仓库地址</li>\n<li>–server-cidr：service之间访问使用的网络ip段</li>\n<li>–pod-network-cidr：pod之间网络访问使用的网络ip,与下文部署的CNI网络组件yml中保持一致</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_43580215/article/details/125153959\"> Kubeadm初始化报错：ERROR CRI container runtime is not running:_困的一批的博客-CSDN博客</a></p>\n<p>查看日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u kubelet</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/m0_61237221/article/details/125223937\">kubeadmin 初始化或者节点加入k8s集群时报错_周易不易的博客-CSDN博客</a></p>\n<p>经过几次尝试一直卡在拉取必要镜像哪里。</p>\n<p>我在技术群里，群友发了个地址，我重新部署上了，中间也遇到问题，不过都是百度可以解决的。</p>\n<p><a href=\"https://www.cnblogs.com/layzer/articles/kubernetes_docker.html\">Kubernetes部署（Docker为运行时） - Layzer - 博客园 (cnblogs.com)</a></p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><blockquote>\n<p>直接看这里</p>\n</blockquote>\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三台主机</span><br><span class=\"line\">IP:  10.0.0.10     主机名：master    系统： centos 7.9      配置： 4C 2G</span><br><span class=\"line\">IP:  10.0.0.11     主机名：node1     系统： centos 7.9      配置： 2C 2G</span><br><span class=\"line\">IP:  10.0.0.12     主机名：node2     系统： centos 7.9      配置： 2C 2G</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、所以节点关闭防火墙</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\"></span><br><span class=\"line\">2、所以节点关闭selinux</span><br><span class=\"line\">sed -i &quot;s/^SELINUX=.*/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\">3、所以节点关闭swap</span><br><span class=\"line\">swapoff -a  # 临时关闭</span><br><span class=\"line\">vi /etc/fstab 注释到swap那一行 # 永久关闭</span><br><span class=\"line\">sed -i &#x27;s/.*swap.*/#&amp;/g&#x27; /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\">4、所有节点添加主机名与IP对应关系</span><br><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class=\"line\">10.0.0.10 k8s-master</span><br><span class=\"line\">10.0.0.11 k8s-node1</span><br><span class=\"line\">10.0.0.12 k8s-node2</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置Hostname</span></span><br><span class=\"line\">hostnamectl set-hostname k8s-master</span><br><span class=\"line\">hostnamectl set-hostname k8s-node1</span><br><span class=\"line\">hostnamectl set-hostname k8s-node2</span><br><span class=\"line\"></span><br><span class=\"line\">5、将桥接的IPv4流量传递到iptables的链（所有机器执行）、</span><br><span class=\"line\">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\"></span><br><span class=\"line\">6、所有节点安装docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置Docker源和kubernetes源</span></span><br><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置阿里云加速kubernetes源</span></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install docker-ce</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置加速</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置加速，并设置驱动</span></span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://6ze43vnb.mirror.aliyuncs.com&quot;],</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加载daemon并重启docker</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装Kubeadm以及初始化Kubernetes集群\"><a href=\"#安装Kubeadm以及初始化Kubernetes集群\" class=\"headerlink\" title=\"安装Kubeadm以及初始化Kubernetes集群\"></a>安装Kubeadm以及初始化Kubernetes集群</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：所有节点安装kubeadm，kubelet和kubectl</span><br><span class=\"line\">yum install -y kubelet-1.23.1 kubeadm-1.23.1 kubectl-1.23.1</span><br><span class=\"line\">systemctl enable kubelet --now</span><br><span class=\"line\"></span><br><span class=\"line\">2：初始化master节点</span><br><span class=\"line\">- 只在master节点执行</span><br><span class=\"line\">- 由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</span><br><span class=\"line\">- 执行成功以后最后结果会输出</span><br><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">  --apiserver-advertise-address=10.0.0.10 \\</span><br><span class=\"line\">  --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">  --kubernetes-version v1.23.1 \\</span><br><span class=\"line\">  --pod-network-cidr=100.1.0.0/16 \\</span><br><span class=\"line\">  --service-cidr=172.1.0.0/16</span><br><span class=\"line\">  </span><br><span class=\"line\">3：kubeadm join 10.0.0.10:6443 --token bs9ygy.iudr36522p081nny \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:4de71c2d7ae5b6f985992dee0fd31dc550244604e8aa618850a494b65dc14902</span><br><span class=\"line\">\t</span><br><span class=\"line\">4：设置kubectl默认访问的api</span><br><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">5：部署calico网络插件 #可能有问题，我没试，群友给了一个新的方式</span><br><span class=\"line\">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">新</span></span><br><span class=\"line\">wget https://docs.projectcalico.org/v3.14/manifests/calico.yaml --no-check-certificate</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看集群\"><a href=\"#查看集群\" class=\"headerlink\" title=\"查看集群\"></a>查看集群</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看node以及网络插件方面</span></span><br><span class=\"line\">[root@k8s-master ~]# kubectl get pod -A</span><br><span class=\"line\">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   calico-kube-controllers-85b5b5888d-g6d5g   1/1     Running   0          5m52s</span><br><span class=\"line\">kube-system   calico-node-67lp5                          1/1     Running   0          12m</span><br><span class=\"line\">kube-system   calico-node-f5mgs                          1/1     Running   0          14m</span><br><span class=\"line\">kube-system   calico-node-f69mb                          1/1     Running   0          12m</span><br><span class=\"line\">kube-system   coredns-6d8c4cb4d-rpxhq                    1/1     Running   0          21m</span><br><span class=\"line\">kube-system   coredns-6d8c4cb4d-vc7g6                    1/1     Running   0          21m</span><br><span class=\"line\">kube-system   etcd-k8s-master                            1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-apiserver-k8s-master                  1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-controller-manager-k8s-master         1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-proxy-cwgpd                           1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-proxy-rn5w9                           1/1     Running   0          17m</span><br><span class=\"line\">kube-system   kube-proxy-xb4kj                           1/1     Running   0          18m</span><br><span class=\"line\">kube-system   kube-scheduler-k8s-master                  1/1     Running   0          21m</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"kubectl命令例子\"><a href=\"#kubectl命令例子\" class=\"headerlink\" title=\"kubectl命令例子\"></a>kubectl命令例子</h4><h5 id=\"查看类命令\"><a href=\"#查看类命令\" class=\"headerlink\" title=\"查看类命令\"></a>查看类命令</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取节点和服务版本信息</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取节点和服务版本信息，并查看附加信息</span></span><br><span class=\"line\">kubectl get nodes -o wide # 获取pod信息，默认是default名称空间</span><br><span class=\"line\">kubectl get pod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取pod信息，默认是default名称空间，并查看附加信息【如：pod的IP及在哪个节点运行】</span></span><br><span class=\"line\">kubectl get pod -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取指定名称空间的pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取指定名称空间中的指定pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system podName</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取所有名称空间的pod</span></span><br><span class=\"line\">kubectl get pod -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看pod的详细信息，以yaml格式或json格式显示</span></span><br><span class=\"line\">kubectl get pods -o yaml</span><br><span class=\"line\">kubectl get pods -o json # 查看pod的标签信息</span><br><span class=\"line\">kubectl get pod -A --show-labels</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">根据Selector（label query）来查询pod</span></span><br><span class=\"line\">kubectl get pod -A --selector=&quot;k8s-app=kube-dns&quot; # 查看运行pod的环境变量</span><br><span class=\"line\">kubectl exec podName env</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定pod的日志</span></span><br><span class=\"line\">kubectl logs -f --tail 500 -n kube-system kube-apiserver-k8s-master # 查看所有名称空间的service信息</span><br><span class=\"line\">kubectl get svc -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定名称空间的service信息</span></span><br><span class=\"line\">kubectl get svc -n kube-system # 查看componentstatuses信息</span><br><span class=\"line\">kubectl get cs</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有configmaps信息</span></span><br><span class=\"line\">kubectl get cm -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有serviceaccounts信息</span></span><br><span class=\"line\">kubectl get sa -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有daemonsets信息</span></span><br><span class=\"line\">kubectl get ds -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有deployments信息</span></span><br><span class=\"line\">kubectl get deploy -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有replicasets信息</span></span><br><span class=\"line\">kubectl get rs -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有statefulsets信息</span></span><br><span class=\"line\">kubectl get sts -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有<span class=\"built_in\">jobs</span>信息</span></span><br><span class=\"line\">kubectl get jobs -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有ingresses信息</span></span><br><span class=\"line\">kubectl get ing -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看有哪些名称空间</span></span><br><span class=\"line\">kubectl get ns # 查看pod的描述信息</span><br><span class=\"line\">kubectl describe pod podName</span><br><span class=\"line\">kubectl describe pod -n kube-system kube-apiserver-k8s-master</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定名称空间中指定deploy的描述信息</span></span><br><span class=\"line\">kubectl describe deploy -n kube-system coredns # 查看node或pod的资源使用情况</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要heapster 或metrics-server支持</span></span><br><span class=\"line\">kubectl top node</span><br><span class=\"line\">kubectl top pod # 查看集群信息</span><br><span class=\"line\">kubectl cluster-info   或  kubectl cluster-info dump</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看各组件信息【172.16.1.110为master机器】</span></span><br><span class=\"line\">kubectl -s https://172.16.1.110:6443 get componentstatuses</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"操作类命令\"><a href=\"#操作类命令\" class=\"headerlink\" title=\"操作类命令\"></a>操作类命令</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建资源</span></span><br><span class=\"line\">kubectl create -f xxx.yaml # 应用资源</span><br><span class=\"line\">kubectl apply -f xxx.yaml # 应用资源，该目录下的所有 .yaml, .yml, 或 .json 文件都会被使用</span><br><span class=\"line\">kubectl apply -f &lt;directory&gt; # 创建test名称空间</span><br><span class=\"line\">kubectl create namespace test # 删除资源</span><br><span class=\"line\">kubectl delete -f xxx.yaml</span><br><span class=\"line\">kubectl delete -f &lt;directory&gt; # 删除指定的pod</span><br><span class=\"line\">kubectl delete pod podName # 删除指定名称空间的指定pod</span><br><span class=\"line\">kubectl delete pod -n test podName # 删除其他资源</span><br><span class=\"line\">kubectl delete svc svcName</span><br><span class=\"line\">kubectl delete deploy deployName</span><br><span class=\"line\">kubectl delete ns nsName # 强制删除</span><br><span class=\"line\">kubectl delete pod podName -n nsName --grace-period=0 --force</span><br><span class=\"line\">kubectl delete pod podName -n nsName --grace-period=1</span><br><span class=\"line\">kubectl delete pod podName -n nsName --now # 编辑资源</span><br><span class=\"line\">kubectl edit pod podName</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"进阶命令操作\"><a href=\"#进阶命令操作\" class=\"headerlink\" title=\"进阶命令操作\"></a>进阶命令操作</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl <span class=\"built_in\">exec</span>：进入pod启动的容器</span></span><br><span class=\"line\">kubectl exec -it podName -n nsName /bin/sh    #进入容器</span><br><span class=\"line\">kubectl exec -it podName -n nsName /bin/bash  #进入容器 # kubectl label：添加label值</span><br><span class=\"line\">kubectl label nodes k8s-node01 zone=north  #为指定节点添加标签</span><br><span class=\"line\">kubectl label nodes k8s-node01 zone-       #为指定节点删除标签</span><br><span class=\"line\">kubectl label pod podName -n nsName role-name=test    #为指定pod添加标签</span><br><span class=\"line\">kubectl label pod podName -n nsName role-name=dev --overwrite  #修改lable标签值</span><br><span class=\"line\">kubectl label pod podName -n nsName role-name-        #删除lable标签 # kubectl滚动升级； 通过 kubectl apply -f myapp-deployment-v1.yaml 启动deploy</span><br><span class=\"line\">kubectl apply -f myapp-deployment-v2.yaml     #通过配置文件滚动升级</span><br><span class=\"line\">kubectl set image deploy/myapp-deployment myapp=&quot;registry.cn-beijing.aliyuncs.com/google_registry/myapp:v3&quot;   #通过命令滚动升级</span><br><span class=\"line\">kubectl rollout undo deploy/myapp-deployment 或者 kubectl rollout undo deploy myapp-deployment    #pod回滚到前一个版本</span><br><span class=\"line\">kubectl rollout undo deploy/myapp-deployment --to-revision=2  #回滚到指定历史版本 # kubectl scale：动态伸缩</span><br><span class=\"line\">kubectl scale deploy myapp-deployment --replicas=5  # 动态伸缩</span><br><span class=\"line\">kubectl scale --replicas=8 -f myapp-deployment-v2.yaml  #动态伸缩【根据资源类型和名称伸缩，其他配置「如：镜像版本不同」不生效】</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化面板\"><a href=\"#可视化面板\" class=\"headerlink\" title=\"可视化面板\"></a>可视化面板</h3><p><a href=\"https://docs.rancher.cn/docs/rancher2.5/quick-start-guide/deployment/quickstart-manual-setup/_index\">手动快速部署 | Rancher文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --privileged --restart=unless-stopped \\</span><br><span class=\"line\">  -p 80:80 -p 443:443 \\</span><br><span class=\"line\">  rancher/rancher:latest</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Kubeadm\"><a href=\"#Kubeadm\" class=\"headerlink\" title=\"Kubeadm\"></a>Kubeadm</h1><p>Kubeadm 是一个提供了 <code>kubeadm init</code> 和 <code>kubeadm join</code> 的工具， 作为创建 Kubernetes 集群的 “快捷途径” 的最佳实践。</p>\n<p>kubeadm 通过执行必要的操作来启动和运行最小可用集群。 按照设计，它只关注启动引导，而非配置机器。同样的， 安装各种 “锦上添花” 的扩展，例如 Kubernetes Dashboard、 监控方案、以及特定云平台的扩展，都不在讨论范围内。</p>\n<h3 id=\"废弃\"><a href=\"#废弃\" class=\"headerlink\" title=\"废弃\"></a>废弃</h3><blockquote>\n<p>可以忽略</p>\n</blockquote>\n<p>相反，我们希望在 kubeadm 之上构建更高级别以及更加合规的工具， 理想情况下，使用 kubeadm 作为所有部署工作的基准将会更加易于创建一致性集群。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">exclude=kubelet kubeadm kubectl</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class=\"line\">sudo setenforce 0</span><br><span class=\"line\">sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start  kubelet</span><br><span class=\"line\">sudo systemctl enable --now kubelet</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/\">安装 kubeadm | Kubernetes</a></p>\n<p><a href=\"https://www.cnblogs.com/rouqinglangzi/p/11760469.html#_lab2_1_2\">【kubernetes入门学习】使用kubeadm搭建k8s集群 - 静水楼台&#x2F;Java部落阁 - 博客园 (cnblogs.com)</a></p>\n<p>中间出现：Connection timed out after 30001 milliseconds</p>\n<p>替换成阿里云地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">exclude=kubelet kubeadm kubectl</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/wandoupeas/p/15682838.html\">CentOS7 yum 安装 k8s 报错 - 豌里个豆 - 博客园 (cnblogs.com)</a></p>\n<p>kubelet kubeadm kubectl需要版本一致</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm version</span><br><span class=\"line\">kubectl version --client</span><br><span class=\"line\">kubelet --version</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/75091ad364c1\">安装指定版本的kubeadm - 简书 (jianshu.com)</a></p>\n<p>master初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.126.128 \\</span><br><span class=\"line\">--kubernetes-version=1.25.0 \\</span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：</p>\n<ul>\n<li>–kubernetes-version：指定kubernetes的版本，与上面kubelet，kubeadm，kubectl工具版本保持一致。</li>\n<li>–apiserver-advertise-address：apiserver所在的节点(master)的ip。</li>\n<li>–image-repository&#x3D;registry.aliyuncs.com&#x2F;google_containers：由于国外地址无法访问，所以使用阿里云仓库地址</li>\n<li>–server-cidr：service之间访问使用的网络ip段</li>\n<li>–pod-network-cidr：pod之间网络访问使用的网络ip,与下文部署的CNI网络组件yml中保持一致</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_43580215/article/details/125153959\"> Kubeadm初始化报错：ERROR CRI container runtime is not running:_困的一批的博客-CSDN博客</a></p>\n<p>查看日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u kubelet</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/m0_61237221/article/details/125223937\">kubeadmin 初始化或者节点加入k8s集群时报错_周易不易的博客-CSDN博客</a></p>\n<p>经过几次尝试一直卡在拉取必要镜像哪里。</p>\n<p>我在技术群里，群友发了个地址，我重新部署上了，中间也遇到问题，不过都是百度可以解决的。</p>\n<p><a href=\"https://www.cnblogs.com/layzer/articles/kubernetes_docker.html\">Kubernetes部署（Docker为运行时） - Layzer - 博客园 (cnblogs.com)</a></p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><blockquote>\n<p>直接看这里</p>\n</blockquote>\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三台主机</span><br><span class=\"line\">IP:  10.0.0.10     主机名：master    系统： centos 7.9      配置： 4C 2G</span><br><span class=\"line\">IP:  10.0.0.11     主机名：node1     系统： centos 7.9      配置： 2C 2G</span><br><span class=\"line\">IP:  10.0.0.12     主机名：node2     系统： centos 7.9      配置： 2C 2G</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、所以节点关闭防火墙</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\"></span><br><span class=\"line\">2、所以节点关闭selinux</span><br><span class=\"line\">sed -i &quot;s/^SELINUX=.*/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\">3、所以节点关闭swap</span><br><span class=\"line\">swapoff -a  # 临时关闭</span><br><span class=\"line\">vi /etc/fstab 注释到swap那一行 # 永久关闭</span><br><span class=\"line\">sed -i &#x27;s/.*swap.*/#&amp;/g&#x27; /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\">4、所有节点添加主机名与IP对应关系</span><br><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class=\"line\">10.0.0.10 k8s-master</span><br><span class=\"line\">10.0.0.11 k8s-node1</span><br><span class=\"line\">10.0.0.12 k8s-node2</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置Hostname</span></span><br><span class=\"line\">hostnamectl set-hostname k8s-master</span><br><span class=\"line\">hostnamectl set-hostname k8s-node1</span><br><span class=\"line\">hostnamectl set-hostname k8s-node2</span><br><span class=\"line\"></span><br><span class=\"line\">5、将桥接的IPv4流量传递到iptables的链（所有机器执行）、</span><br><span class=\"line\">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\"></span><br><span class=\"line\">6、所有节点安装docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置Docker源和kubernetes源</span></span><br><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置阿里云加速kubernetes源</span></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install docker-ce</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置加速</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置加速，并设置驱动</span></span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://6ze43vnb.mirror.aliyuncs.com&quot;],</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加载daemon并重启docker</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装Kubeadm以及初始化Kubernetes集群\"><a href=\"#安装Kubeadm以及初始化Kubernetes集群\" class=\"headerlink\" title=\"安装Kubeadm以及初始化Kubernetes集群\"></a>安装Kubeadm以及初始化Kubernetes集群</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：所有节点安装kubeadm，kubelet和kubectl</span><br><span class=\"line\">yum install -y kubelet-1.23.1 kubeadm-1.23.1 kubectl-1.23.1</span><br><span class=\"line\">systemctl enable kubelet --now</span><br><span class=\"line\"></span><br><span class=\"line\">2：初始化master节点</span><br><span class=\"line\">- 只在master节点执行</span><br><span class=\"line\">- 由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</span><br><span class=\"line\">- 执行成功以后最后结果会输出</span><br><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">  --apiserver-advertise-address=10.0.0.10 \\</span><br><span class=\"line\">  --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">  --kubernetes-version v1.23.1 \\</span><br><span class=\"line\">  --pod-network-cidr=100.1.0.0/16 \\</span><br><span class=\"line\">  --service-cidr=172.1.0.0/16</span><br><span class=\"line\">  </span><br><span class=\"line\">3：kubeadm join 10.0.0.10:6443 --token bs9ygy.iudr36522p081nny \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:4de71c2d7ae5b6f985992dee0fd31dc550244604e8aa618850a494b65dc14902</span><br><span class=\"line\">\t</span><br><span class=\"line\">4：设置kubectl默认访问的api</span><br><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">5：部署calico网络插件 #可能有问题，我没试，群友给了一个新的方式</span><br><span class=\"line\">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">新</span></span><br><span class=\"line\">wget https://docs.projectcalico.org/v3.14/manifests/calico.yaml --no-check-certificate</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看集群\"><a href=\"#查看集群\" class=\"headerlink\" title=\"查看集群\"></a>查看集群</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看node以及网络插件方面</span></span><br><span class=\"line\">[root@k8s-master ~]# kubectl get pod -A</span><br><span class=\"line\">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   calico-kube-controllers-85b5b5888d-g6d5g   1/1     Running   0          5m52s</span><br><span class=\"line\">kube-system   calico-node-67lp5                          1/1     Running   0          12m</span><br><span class=\"line\">kube-system   calico-node-f5mgs                          1/1     Running   0          14m</span><br><span class=\"line\">kube-system   calico-node-f69mb                          1/1     Running   0          12m</span><br><span class=\"line\">kube-system   coredns-6d8c4cb4d-rpxhq                    1/1     Running   0          21m</span><br><span class=\"line\">kube-system   coredns-6d8c4cb4d-vc7g6                    1/1     Running   0          21m</span><br><span class=\"line\">kube-system   etcd-k8s-master                            1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-apiserver-k8s-master                  1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-controller-manager-k8s-master         1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-proxy-cwgpd                           1/1     Running   0          21m</span><br><span class=\"line\">kube-system   kube-proxy-rn5w9                           1/1     Running   0          17m</span><br><span class=\"line\">kube-system   kube-proxy-xb4kj                           1/1     Running   0          18m</span><br><span class=\"line\">kube-system   kube-scheduler-k8s-master                  1/1     Running   0          21m</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"kubectl命令例子\"><a href=\"#kubectl命令例子\" class=\"headerlink\" title=\"kubectl命令例子\"></a>kubectl命令例子</h4><h5 id=\"查看类命令\"><a href=\"#查看类命令\" class=\"headerlink\" title=\"查看类命令\"></a>查看类命令</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取节点和服务版本信息</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取节点和服务版本信息，并查看附加信息</span></span><br><span class=\"line\">kubectl get nodes -o wide # 获取pod信息，默认是default名称空间</span><br><span class=\"line\">kubectl get pod</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取pod信息，默认是default名称空间，并查看附加信息【如：pod的IP及在哪个节点运行】</span></span><br><span class=\"line\">kubectl get pod -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取指定名称空间的pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取指定名称空间中的指定pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system podName</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取所有名称空间的pod</span></span><br><span class=\"line\">kubectl get pod -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看pod的详细信息，以yaml格式或json格式显示</span></span><br><span class=\"line\">kubectl get pods -o yaml</span><br><span class=\"line\">kubectl get pods -o json # 查看pod的标签信息</span><br><span class=\"line\">kubectl get pod -A --show-labels</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">根据Selector（label query）来查询pod</span></span><br><span class=\"line\">kubectl get pod -A --selector=&quot;k8s-app=kube-dns&quot; # 查看运行pod的环境变量</span><br><span class=\"line\">kubectl exec podName env</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定pod的日志</span></span><br><span class=\"line\">kubectl logs -f --tail 500 -n kube-system kube-apiserver-k8s-master # 查看所有名称空间的service信息</span><br><span class=\"line\">kubectl get svc -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定名称空间的service信息</span></span><br><span class=\"line\">kubectl get svc -n kube-system # 查看componentstatuses信息</span><br><span class=\"line\">kubectl get cs</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有configmaps信息</span></span><br><span class=\"line\">kubectl get cm -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有serviceaccounts信息</span></span><br><span class=\"line\">kubectl get sa -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有daemonsets信息</span></span><br><span class=\"line\">kubectl get ds -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有deployments信息</span></span><br><span class=\"line\">kubectl get deploy -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有replicasets信息</span></span><br><span class=\"line\">kubectl get rs -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有statefulsets信息</span></span><br><span class=\"line\">kubectl get sts -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有<span class=\"built_in\">jobs</span>信息</span></span><br><span class=\"line\">kubectl get jobs -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有ingresses信息</span></span><br><span class=\"line\">kubectl get ing -A</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看有哪些名称空间</span></span><br><span class=\"line\">kubectl get ns # 查看pod的描述信息</span><br><span class=\"line\">kubectl describe pod podName</span><br><span class=\"line\">kubectl describe pod -n kube-system kube-apiserver-k8s-master</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定名称空间中指定deploy的描述信息</span></span><br><span class=\"line\">kubectl describe deploy -n kube-system coredns # 查看node或pod的资源使用情况</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要heapster 或metrics-server支持</span></span><br><span class=\"line\">kubectl top node</span><br><span class=\"line\">kubectl top pod # 查看集群信息</span><br><span class=\"line\">kubectl cluster-info   或  kubectl cluster-info dump</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看各组件信息【172.16.1.110为master机器】</span></span><br><span class=\"line\">kubectl -s https://172.16.1.110:6443 get componentstatuses</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"操作类命令\"><a href=\"#操作类命令\" class=\"headerlink\" title=\"操作类命令\"></a>操作类命令</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建资源</span></span><br><span class=\"line\">kubectl create -f xxx.yaml # 应用资源</span><br><span class=\"line\">kubectl apply -f xxx.yaml # 应用资源，该目录下的所有 .yaml, .yml, 或 .json 文件都会被使用</span><br><span class=\"line\">kubectl apply -f &lt;directory&gt; # 创建test名称空间</span><br><span class=\"line\">kubectl create namespace test # 删除资源</span><br><span class=\"line\">kubectl delete -f xxx.yaml</span><br><span class=\"line\">kubectl delete -f &lt;directory&gt; # 删除指定的pod</span><br><span class=\"line\">kubectl delete pod podName # 删除指定名称空间的指定pod</span><br><span class=\"line\">kubectl delete pod -n test podName # 删除其他资源</span><br><span class=\"line\">kubectl delete svc svcName</span><br><span class=\"line\">kubectl delete deploy deployName</span><br><span class=\"line\">kubectl delete ns nsName # 强制删除</span><br><span class=\"line\">kubectl delete pod podName -n nsName --grace-period=0 --force</span><br><span class=\"line\">kubectl delete pod podName -n nsName --grace-period=1</span><br><span class=\"line\">kubectl delete pod podName -n nsName --now # 编辑资源</span><br><span class=\"line\">kubectl edit pod podName</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"进阶命令操作\"><a href=\"#进阶命令操作\" class=\"headerlink\" title=\"进阶命令操作\"></a>进阶命令操作</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl <span class=\"built_in\">exec</span>：进入pod启动的容器</span></span><br><span class=\"line\">kubectl exec -it podName -n nsName /bin/sh    #进入容器</span><br><span class=\"line\">kubectl exec -it podName -n nsName /bin/bash  #进入容器 # kubectl label：添加label值</span><br><span class=\"line\">kubectl label nodes k8s-node01 zone=north  #为指定节点添加标签</span><br><span class=\"line\">kubectl label nodes k8s-node01 zone-       #为指定节点删除标签</span><br><span class=\"line\">kubectl label pod podName -n nsName role-name=test    #为指定pod添加标签</span><br><span class=\"line\">kubectl label pod podName -n nsName role-name=dev --overwrite  #修改lable标签值</span><br><span class=\"line\">kubectl label pod podName -n nsName role-name-        #删除lable标签 # kubectl滚动升级； 通过 kubectl apply -f myapp-deployment-v1.yaml 启动deploy</span><br><span class=\"line\">kubectl apply -f myapp-deployment-v2.yaml     #通过配置文件滚动升级</span><br><span class=\"line\">kubectl set image deploy/myapp-deployment myapp=&quot;registry.cn-beijing.aliyuncs.com/google_registry/myapp:v3&quot;   #通过命令滚动升级</span><br><span class=\"line\">kubectl rollout undo deploy/myapp-deployment 或者 kubectl rollout undo deploy myapp-deployment    #pod回滚到前一个版本</span><br><span class=\"line\">kubectl rollout undo deploy/myapp-deployment --to-revision=2  #回滚到指定历史版本 # kubectl scale：动态伸缩</span><br><span class=\"line\">kubectl scale deploy myapp-deployment --replicas=5  # 动态伸缩</span><br><span class=\"line\">kubectl scale --replicas=8 -f myapp-deployment-v2.yaml  #动态伸缩【根据资源类型和名称伸缩，其他配置「如：镜像版本不同」不生效】</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化面板\"><a href=\"#可视化面板\" class=\"headerlink\" title=\"可视化面板\"></a>可视化面板</h3><p><a href=\"https://docs.rancher.cn/docs/rancher2.5/quick-start-guide/deployment/quickstart-manual-setup/_index\">手动快速部署 | Rancher文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --privileged --restart=unless-stopped \\</span><br><span class=\"line\">  -p 80:80 -p 443:443 \\</span><br><span class=\"line\">  rancher/rancher:latest</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"k8s部署,简单了解","path":"2022/09/05/k8s部署/","eyeCatchImage":null,"excerpt":"k8s部署,可能并不太好","date":{"_isAMomentObject":true,"_i":"2022-09-05T14:13:37.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-09-05T14:13:37.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"k8s","tags":["deploy"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"linux 虚拟机没有ens33网卡信息","description":"linux 虚拟机没有ens33网卡信息，重启网络服务解决","author":"wuxinheng","date":"2022-07-19T13:36:00.000Z","_content":"使用ifconfig遇到没有ens33网络信息\n\n电脑上VMware 创建了三台虚拟机。其中一台无法连接网络我更改了网络连接设置为NAT模式，然后重启还是不行。\n参照网友@[白天不懂夜的美♂](https://blog.csdn.net/weixin_53685939/article/details/119732919)\n\n\n```shell\nsystemctl stop NetworkManager\nsystemctl restart network.service\nservice network restart\n```\n\n成功恢复！\n\n","source":"_posts/linux-虚拟机没有ens33网卡信息.md","raw":"---\ntitle: linux 虚拟机没有ens33网卡信息\ndescription: linux 虚拟机没有ens33网卡信息，重启网络服务解决\nauthor: wuxinheng\ntags:\n  - 虚拟机网络\ncategories: \n  - 虚拟机\ndate: 2022-07-19 21:36:00\n---\n使用ifconfig遇到没有ens33网络信息\n\n电脑上VMware 创建了三台虚拟机。其中一台无法连接网络我更改了网络连接设置为NAT模式，然后重启还是不行。\n参照网友@[白天不懂夜的美♂](https://blog.csdn.net/weixin_53685939/article/details/119732919)\n\n\n```shell\nsystemctl stop NetworkManager\nsystemctl restart network.service\nservice network restart\n```\n\n成功恢复！\n\n","slug":"linux-虚拟机没有ens33网卡信息","published":1,"updated":"2023-09-24T07:38:31.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzho001towtkf5w83dhv","content":"<p>使用ifconfig遇到没有ens33网络信息</p>\n<p>电脑上VMware 创建了三台虚拟机。其中一台无法连接网络我更改了网络连接设置为NAT模式，然后重启还是不行。<br>参照网友@<a href=\"https://blog.csdn.net/weixin_53685939/article/details/119732919\">白天不懂夜的美♂</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop NetworkManager</span><br><span class=\"line\">systemctl restart network.service</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n\n<p>成功恢复！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用ifconfig遇到没有ens33网络信息</p>\n<p>电脑上VMware 创建了三台虚拟机。其中一台无法连接网络我更改了网络连接设置为NAT模式，然后重启还是不行。<br>参照网友@<a href=\"https://blog.csdn.net/weixin_53685939/article/details/119732919\">白天不懂夜的美♂</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop NetworkManager</span><br><span class=\"line\">systemctl restart network.service</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n\n<p>成功恢复！</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"linux 虚拟机没有ens33网卡信息","path":"2022/07/19/linux-虚拟机没有ens33网卡信息/","eyeCatchImage":null,"excerpt":"linux 虚拟机没有ens33网卡信息，重启网络服务解决","date":{"_isAMomentObject":true,"_i":"2022-07-19T13:36:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-19T13:36:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"虚拟机","tags":["虚拟机网络"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"linux设置固定ip","author":"wuxinheng","description":"linux设置固定ip","date":"2022-09-05T14:13:05.000Z","_content":"#### linux设置固定ip\n\n查看网卡\n\n```shell\nifconfig\n```\n\n编辑配置文件\n\n```shell\n# 这里需要根据实际网卡来进行修改，虚拟机一般是ens33\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n文件内容\n\n```ini\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\nBOOTPROTO=\"static\"  # 原来是dhcp\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"ens33\"\nUUID=\"c282b057-0dc8-4c9d-8f51-21fb50fdb2d4\"\nDEVICE=\"ens33\"\nONBOOT=\"yes\" # yes\nIPADDR=192.168.126.128  # 静态地址\nGATEWAY=192.168.126.2 # 网关\nDNS1=192.168.126.2 # DNS默认和网关一样\n```\n\n","source":"_posts/linux设置固定ip.md","raw":"---\ntitle: linux设置固定ip\nauthor: wuxinheng\ndescription: linux设置固定ip\ndate: 2022-09-05 22:13:05\ntags:\n- 虚拟机\ncategories:\n- linux\n---\n#### linux设置固定ip\n\n查看网卡\n\n```shell\nifconfig\n```\n\n编辑配置文件\n\n```shell\n# 这里需要根据实际网卡来进行修改，虚拟机一般是ens33\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n文件内容\n\n```ini\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\nBOOTPROTO=\"static\"  # 原来是dhcp\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"ens33\"\nUUID=\"c282b057-0dc8-4c9d-8f51-21fb50fdb2d4\"\nDEVICE=\"ens33\"\nONBOOT=\"yes\" # yes\nIPADDR=192.168.126.128  # 静态地址\nGATEWAY=192.168.126.2 # 网关\nDNS1=192.168.126.2 # DNS默认和网关一样\n```\n\n","slug":"linux设置固定ip","published":1,"updated":"2023-09-24T07:38:31.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzho001wowtk7dx6a9k9","content":"<h4 id=\"linux设置固定ip\"><a href=\"#linux设置固定ip\" class=\"headerlink\" title=\"linux设置固定ip\"></a>linux设置固定ip</h4><p>查看网卡</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里需要根据实际网卡来进行修改，虚拟机一般是ens33</span></span><br><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n\n<p>文件内容</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TYPE</span>=<span class=\"string\">&quot;Ethernet&quot;</span></span><br><span class=\"line\"><span class=\"attr\">PROXY_METHOD</span>=<span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"attr\">BROWSER_ONLY</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">BOOTPROTO</span>=<span class=\"string\">&quot;static&quot;</span>  <span class=\"comment\"># 原来是dhcp</span></span><br><span class=\"line\"><span class=\"attr\">DEFROUTE</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV4_FAILURE_FATAL</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6INIT</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_AUTOCONF</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_DEFROUTE</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_FAILURE_FATAL</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_ADDR_GEN_MODE</span>=<span class=\"string\">&quot;stable-privacy&quot;</span></span><br><span class=\"line\"><span class=\"attr\">NAME</span>=<span class=\"string\">&quot;ens33&quot;</span></span><br><span class=\"line\"><span class=\"attr\">UUID</span>=<span class=\"string\">&quot;c282b057-0dc8-4c9d-8f51-21fb50fdb2d4&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DEVICE</span>=<span class=\"string\">&quot;ens33&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ONBOOT</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"comment\"># yes</span></span><br><span class=\"line\"><span class=\"attr\">IPADDR</span>=<span class=\"number\">192.168</span>.<span class=\"number\">126.128</span>  <span class=\"comment\"># 静态地址</span></span><br><span class=\"line\"><span class=\"attr\">GATEWAY</span>=<span class=\"number\">192.168</span>.<span class=\"number\">126.2</span> <span class=\"comment\"># 网关</span></span><br><span class=\"line\"><span class=\"attr\">DNS1</span>=<span class=\"number\">192.168</span>.<span class=\"number\">126.2</span> <span class=\"comment\"># DNS默认和网关一样</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"linux设置固定ip\"><a href=\"#linux设置固定ip\" class=\"headerlink\" title=\"linux设置固定ip\"></a>linux设置固定ip</h4><p>查看网卡</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里需要根据实际网卡来进行修改，虚拟机一般是ens33</span></span><br><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n\n<p>文件内容</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TYPE</span>=<span class=\"string\">&quot;Ethernet&quot;</span></span><br><span class=\"line\"><span class=\"attr\">PROXY_METHOD</span>=<span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"attr\">BROWSER_ONLY</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">BOOTPROTO</span>=<span class=\"string\">&quot;static&quot;</span>  <span class=\"comment\"># 原来是dhcp</span></span><br><span class=\"line\"><span class=\"attr\">DEFROUTE</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV4_FAILURE_FATAL</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6INIT</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_AUTOCONF</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_DEFROUTE</span>=<span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_FAILURE_FATAL</span>=<span class=\"string\">&quot;no&quot;</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_ADDR_GEN_MODE</span>=<span class=\"string\">&quot;stable-privacy&quot;</span></span><br><span class=\"line\"><span class=\"attr\">NAME</span>=<span class=\"string\">&quot;ens33&quot;</span></span><br><span class=\"line\"><span class=\"attr\">UUID</span>=<span class=\"string\">&quot;c282b057-0dc8-4c9d-8f51-21fb50fdb2d4&quot;</span></span><br><span class=\"line\"><span class=\"attr\">DEVICE</span>=<span class=\"string\">&quot;ens33&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ONBOOT</span>=<span class=\"string\">&quot;yes&quot;</span> <span class=\"comment\"># yes</span></span><br><span class=\"line\"><span class=\"attr\">IPADDR</span>=<span class=\"number\">192.168</span>.<span class=\"number\">126.128</span>  <span class=\"comment\"># 静态地址</span></span><br><span class=\"line\"><span class=\"attr\">GATEWAY</span>=<span class=\"number\">192.168</span>.<span class=\"number\">126.2</span> <span class=\"comment\"># 网关</span></span><br><span class=\"line\"><span class=\"attr\">DNS1</span>=<span class=\"number\">192.168</span>.<span class=\"number\">126.2</span> <span class=\"comment\"># DNS默认和网关一样</span></span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"linux设置固定ip","path":"2022/09/05/linux设置固定ip/","eyeCatchImage":null,"excerpt":"linux设置固定ip","date":{"_isAMomentObject":true,"_i":"2022-09-05T14:13:05.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-09-05T14:13:05.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"linux","tags":["虚拟机"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"modules","author":"wuxinheng","date":"2022-08-24T14:21:11.000Z","description":"abp使用","_content":"## 模块化\n\n概念：简单来说模块化就是将功能拆分，需要用的时候拿来用。\n\nabp中的模块：我是这么理解我将框架基础功能的配置拆分在不同模块中，但这个也是根据不同的需求和场景来完成的。我们可以将功能模块化配置的尽可能的零散些。在Application 中我们可以新建模块，不同的模块注入不同的功能模块类。再将自己的新建的模块类注入到ApplicationModule中，这里需要的注意的是ApplicationModule中默认注入了DomainModule。所以在配置MailKit时只是注入了MailKitModule。我在实现邮件功能的时候也尝试将MailKitModule写在Application项目中。但是出现错误。我觉得可能是注入的问题，我就选择写在Domain项目中。这里其实还可以再去钻研的。ApplicationModule是整个程序的主入口。他就像个大水池不断有水流入。我就把ApplicationModule中的内容清空了，让这个类主要来负责程序的注入。","source":"_posts/modules.md","raw":"---\ntitle: modules\nauthor: wuxinheng\ndate: 2022-08-24 22:21:11\ndescription: abp使用\ncategories:\n  - abp\ntags:\n- dotnet\n---\n## 模块化\n\n概念：简单来说模块化就是将功能拆分，需要用的时候拿来用。\n\nabp中的模块：我是这么理解我将框架基础功能的配置拆分在不同模块中，但这个也是根据不同的需求和场景来完成的。我们可以将功能模块化配置的尽可能的零散些。在Application 中我们可以新建模块，不同的模块注入不同的功能模块类。再将自己的新建的模块类注入到ApplicationModule中，这里需要的注意的是ApplicationModule中默认注入了DomainModule。所以在配置MailKit时只是注入了MailKitModule。我在实现邮件功能的时候也尝试将MailKitModule写在Application项目中。但是出现错误。我觉得可能是注入的问题，我就选择写在Domain项目中。这里其实还可以再去钻研的。ApplicationModule是整个程序的主入口。他就像个大水池不断有水流入。我就把ApplicationModule中的内容清空了，让这个类主要来负责程序的注入。","slug":"modules","published":1,"updated":"2023-09-24T07:38:31.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhq0020owtk01fadkqt","content":"<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><p>概念：简单来说模块化就是将功能拆分，需要用的时候拿来用。</p>\n<p>abp中的模块：我是这么理解我将框架基础功能的配置拆分在不同模块中，但这个也是根据不同的需求和场景来完成的。我们可以将功能模块化配置的尽可能的零散些。在Application 中我们可以新建模块，不同的模块注入不同的功能模块类。再将自己的新建的模块类注入到ApplicationModule中，这里需要的注意的是ApplicationModule中默认注入了DomainModule。所以在配置MailKit时只是注入了MailKitModule。我在实现邮件功能的时候也尝试将MailKitModule写在Application项目中。但是出现错误。我觉得可能是注入的问题，我就选择写在Domain项目中。这里其实还可以再去钻研的。ApplicationModule是整个程序的主入口。他就像个大水池不断有水流入。我就把ApplicationModule中的内容清空了，让这个类主要来负责程序的注入。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><p>概念：简单来说模块化就是将功能拆分，需要用的时候拿来用。</p>\n<p>abp中的模块：我是这么理解我将框架基础功能的配置拆分在不同模块中，但这个也是根据不同的需求和场景来完成的。我们可以将功能模块化配置的尽可能的零散些。在Application 中我们可以新建模块，不同的模块注入不同的功能模块类。再将自己的新建的模块类注入到ApplicationModule中，这里需要的注意的是ApplicationModule中默认注入了DomainModule。所以在配置MailKit时只是注入了MailKitModule。我在实现邮件功能的时候也尝试将MailKitModule写在Application项目中。但是出现错误。我觉得可能是注入的问题，我就选择写在Domain项目中。这里其实还可以再去钻研的。ApplicationModule是整个程序的主入口。他就像个大水池不断有水流入。我就把ApplicationModule中的内容清空了，让这个类主要来负责程序的注入。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"modules","path":"2022/08/24/modules/","eyeCatchImage":null,"excerpt":"abp使用","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:21:11.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:21:11.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"abp","tags":["dotnet"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":".net core中consul与ocelot使用","author":"wuxinheng","description":"通过本文可简单对微服务中所用的技术进行探秘，了解微服务实际的一些技术情况。","date":"2022-07-15T12:48:00.000Z","_content":"\n### consul\n\n#### 启动\n\n```sh\nconsul agent -dev -node=127.0.0.1\n```\n\n#### .Net Core 使用Consul\n\n添加Nuget Consul 1.6.10.4\n\n```c#\n// 通过staup.configuration 调用\npublic static void UseConsul(this IConfiguration configuration)\n{\n\t// 通过配置项获取ip、port、weight信息\n    var ip = configuration[\"ip\"];\n    var port = configuration[\"port\"];\n    int weight = string.IsNullOrEmpty(configuration[\"weight\"]) ? 1 : int.Parse(configuration[\"weight\"]);\n    \n    // 声明consul客户端\n    ConsulClient consulClient = new ConsulClient(x =>\n \t{\n        // 指定consul服务地址\n        x.Address = new System.Uri(\"http://localhost:8500\");\n        x.Datacenter = \"dcl\";\n     });\n    \n    // 服务注册\n     consulClient.Agent.ServiceRegister(new AgentServiceRegistration()\n                                        {\n                                            // 实例id\n                                            ID = \"Service \" + Guid.NewGuid().ToString(),\n                                            // 实例地址\n                                            Address = ip,\n                                            // 实例端口\n                                            Port = int.Parse(port),\n                                            // 实例名称\n                                            Name = \"Services\",\n                                            // 标签\n                                            Tags = new string[] { weight.ToString() },\n                                            // 健康检查\n                                            Check = new AgentServiceCheck()\n                                            {\n                                                // 间隔\n                                                Interval = TimeSpan.FromSeconds(12),\n                                                // 检验地址\n                                                HTTP = $\"HTTP://{ip}:{port}/api/Home/health\",\n                                                // 检查服务名\n                                                Name = \"ConsulService\",\n                                                // 超时时间\n                                                Timeout = TimeSpan.FromSeconds(5),\n                                                // 注销服务\n                                                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(12),\n                                            }\n            \t\t\t\t\t\t});\n}\n```\n\n##### 启动程序\n\n通过cmd进入bin目录输入\n\n```bash\ndotnet [项目名].dll urls=\"http:127.0.0.1:8080\" ip=\"127.0.0.1\" port=\"8080\" weight=\"1\"\n```\n\n\n\n### ocelot\n\nOcelot\n\nOcelot.Cache.CacheManager\n\nOcelot.Provider.Consul\n\nOcelot.Provider.Polly\n\nStartup.cs\n\n```c#\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Ocelot.Cache;\nusing Ocelot.Cache.CacheManager;\nusing Ocelot.DependencyInjection;\nusing Ocelot.Middleware;\nusing Ocelot.Provider.Consul;\nusing Ocelot.Provider.Polly;\n\n\nnamespace Demo_Geteway\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // 添加Ocelot中间件\n            services.AddOcelot()\n                // 使用Consul\n                .AddConsul()\n                // 使用缓存管理\n                .AddCacheManager(m =>\n                {\n                    m.WithDictionaryHandle();//默认字典存储\n        \t\t})\n                // 使用故障处理机制\n                .AddPolly();\n            //这里的IOcelotCache<CachedResponse>是默认缓存的约束--准备替换成自定义的\n            services.AddSingleton<IOcelotCache<CachedResponse>, CustomeCache>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseOcelot().Wait();\n        }\n    }\n}\n```\n\nProgram\n\n```c#\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\n\nnamespace Demo_Geteway\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // 接收命令行参数\n            new ConfigurationBuilder()\n                .AddCommandLine(args);\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                }).ConfigureAppConfiguration(configure =>\n                {\n                    // 使用指定json文件\n                    configure.AddJsonFile(\"ocelot.json\", false, true);\n                });\n    }\n}\n```\n\n#### 单地址多服务\n\n```json\n{\n    \"Routes\": [\n        {\n            \"// DownstreamPathTemplate\": \"下游地址。{url}上有地址变量。万能模板写法:/{url}\",\n            \"DownstreamPathTemplate\": \"/api/{url}\",\n            \"// DownstreamScheme\": \"协议\",\n            \"DownstreamScheme\": \"http\",\n            \"// DownstreamHostAndPorts\": \"下游访问的主机和端口，可以为单个，设置多个时需要设置LoadBalancerOptions\",\n            \"DownstreamHostAndPorts\": [\n                {\n                    \"Host\": \"127.0.0.1\",\n                    \"Port\": 6003\n                },\n                {\n                    \"Host\": \"127.0.0.1\",\n                    \"Port\": 6004\n                },\n                {\n                    \"Host\": \"127.0.0.1\",\n                    \"Port\": 6002\n                }\n            ],\n            \"// UpstreamPathTemplate\": \"上游地址路径,{url}会传递给下游地址。万能模板写法:/{url}\",\n            \"UpstreamPathTemplate\": \"/to/{url}\",\n            \"// UpstreamHttpMethod\": \"上游请求类型\",\n            \"UpstreamHttpMethod\": [\n                \"Get\",\n                \"Post\"\n            ],\n            \"// LoadBalancerOptions\": \"负载均衡策略\",\n            \"LoadBalancerOptions\": {\n                \"// Type\": {\n                    \"// RoundRobin\": \"轮询\",\n                    \"// LeastConnection\": \"最少连接数，跟踪发现现在有最少请求或处理的可用服务\",\n                    \"// NoLoadBalancer\": \"不使用负载均衡，直接访问config配置或者服务发现的第一个可用服务\",\n                    \"// CookieStickySession\":\"会话粘滞\"\n                },\n                \"Type\": \"RoundRobin\",\n            }\n        }\n    ],\n    \"// GlobalConfiguration\": \"全局配置\",\n    \"GlobalConfiguration\": {\n        \"// BaseUrl\": \"根地址\",\n        \"BaseUrl\": \"https://127.0.0.1:6005\"\n    }\n}\n```\n\n#### consul服务治理\n\n```json\n{\n    \"Routes\": [\n        {\n            \"DownstreamPathTemplate\": \"/api/{url}\",\n            \"DownstreamScheme\": \"http\",\n            \"UpstreamPathTemplate\": \"/to/{url}\",\n            \"UpstreamHttpMethod\": [\"Get\",\"Post\"],\n            \"// UseServiceDiscovery\":\"使用服务发现\",\n            \"UseServiceDiscovery\": true,\n            \"// ServiceName\":\"Consul服务名称\",\n            \"ServiceName\": \"Services\",\n            \"LoadBalancerOptions\": {\n                \"Type\": \"RoundRobin\"\n            },\n            \"// FileCacheOptions\":\"使用缓存\",\n            \"FileCacheOptions\": {\n                \"// TtlSeconds\":\"过期时间\",\n                \"TtlSeconds\": 15,\n                \"// Region\",\"可以调用Api清理\",\n                \"Region\": \"UserCache\"\n            },\n            \"// RateLimitOptions\":\"限流\",\n            \"RateLimitOptions\": {\n                \"// ClientWhitelist\":\"白名单 ClientId区分大小写\",\n                \"ClientWhitelist\": [\n                    \"Microservice\",\n                    \"Attempt\"\n                ],\n                \"EnableRateLimiting\": true,\n                \"// Period\":\"5m 1h 1d\",\n                \"Period\": \"1s\", \n                \"// PeriodTimespan\":\"多少秒之后客户端可以重试\",\n                \"PeriodTimespan\": 5,\n                \"// Limit\": \"统计时间段内允许的最大请求数\",\n                \"Limit\": 5\n            },\n            \"// QoSOptions\":\"熔断\",\n            \"QoSOptions\": {\n                \"// ExceptionsAllowedBeforeBreaking\":\"熔断之前允许多少个异常请求\",\n                \"ExceptionsAllowedBeforeBreaking\": 3,\n                \"// DurationOfBreak\":\"熔断的时间,单位为ms.超过这个时间可再请求\",\n                \"DurationOfBreak\": 10000,\n                \"// TimeoutValue\":\"如果下游请求的处理时间超过多少则将请求设置为超时  默认90秒\",\n                \"TimeoutValue\": 4000\n            }\n        }\n    ],\n    \"GlobalConfiguration\": {\n        \"BaseUrl\": \"http://127.0.0.1:6005\",\n        \"// ServiceDiscoveryProvider\":\"服务发现配置\",\n        \"ServiceDiscoveryProvider\": {\n            \"Host\": \"localhost\",\n            \"Port\": 8500,\n            \"// Type\":\"由Consul提供服务发现,每次请求去Consul,PollConsul每次获取最新的Consul\",\n            \"Type\": \"PollConsul\",\n            \"// PollingInterval\":\"请求最新的consul时间\",\n            \"PollingInterval\": 100\n        },\n        \"// RateLimitOptions\":\"限流配置\",\n        \"RateLimitOptions\": {\n            \"// QuotaExceededMessage\":\"限流时返回的消息\",\n            \"QuotaExceededMessage\": \"Customize Tips!\",\n            \"// HttpStatusCode\":\"限流时返回的code\",\n            \"HttpStatusCode\": 999\n        }\n    }\n}\n```\n\n### nginx\n\n#### .Net Core Api\n\n```dockerfile\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    # 服务名\n    upstream Microservice {\n        server 127.0.0.1:8001;\n        server 127.0.0.1:8002;\n        server 127.0.0.1:8003;\n    }\n\n    server {\n        # 监听端口\n        listen       8080;\n        server_name  localhost;\n        # 使用\n        location / {\n            proxy_pass http://Microservice;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n\n\n#### WCF\n\n```dockerfile\n# 负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求\n# 均衡负载，测试工具：apache-jmeter-5.2.1 \n\n# 代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务\nupstream GQWcf  {\n         # 如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器，这样访客固定访问一台后端服务器可以解决session问题避免会话丢失。url  hash\n         ip_hash;\n         \n         # 代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大\n         server 192.168.1.180:8000  weight=10;\n         \n         # 代理地址也就是wcf的地址\n         server 192.168.1.252:8000 weight=70; \n         \n         # (第三方插件)：根据服务器响应时间进行分配，响应快的优先分配\n         fair；  \n      } \n      \n# 服务\nserver {\n        #监听默认服务器9000端口\n        listen       9000  default_server;       \n\n        #默认本机\n        server_name  127.0.0.1;                  \n \n        location / {\n                   # $request_uri有没有不影响，GQWcf：代理名称\n                   proxy_pass  http://GQWcf$request_uri;\n                   proxy_redirect off;\n                   # $server_port非常重要不然会出代理成功后无法再转向真实ip的下一级\n                   proxy_set_header Host $host:$server_port;  \n        }\n        \n        # 发生错误显示预定义的URL,\"/50x.html\"指下面的地址\n        error_page   500 502 503 504  /50x.html; \n\n\t\t# 发生错误返回的地址\n        location = /50x.html {\n            root   html;                                      \n        }\n  }\n```\n\n \n","source":"_posts/micro_services.md","raw":"---\ntitle: .net core中consul与ocelot使用\nauthor: wuxinheng\ndescription: 通过本文可简单对微服务中所用的技术进行探秘，了解微服务实际的一些技术情况。\ndate: 2022-07-15 20:48:00\ntags:\n- consul\n- ocelot\n- nginx\n- 微服务\n- dotnet\ncategories:\n- 微服务\n---\n\n### consul\n\n#### 启动\n\n```sh\nconsul agent -dev -node=127.0.0.1\n```\n\n#### .Net Core 使用Consul\n\n添加Nuget Consul 1.6.10.4\n\n```c#\n// 通过staup.configuration 调用\npublic static void UseConsul(this IConfiguration configuration)\n{\n\t// 通过配置项获取ip、port、weight信息\n    var ip = configuration[\"ip\"];\n    var port = configuration[\"port\"];\n    int weight = string.IsNullOrEmpty(configuration[\"weight\"]) ? 1 : int.Parse(configuration[\"weight\"]);\n    \n    // 声明consul客户端\n    ConsulClient consulClient = new ConsulClient(x =>\n \t{\n        // 指定consul服务地址\n        x.Address = new System.Uri(\"http://localhost:8500\");\n        x.Datacenter = \"dcl\";\n     });\n    \n    // 服务注册\n     consulClient.Agent.ServiceRegister(new AgentServiceRegistration()\n                                        {\n                                            // 实例id\n                                            ID = \"Service \" + Guid.NewGuid().ToString(),\n                                            // 实例地址\n                                            Address = ip,\n                                            // 实例端口\n                                            Port = int.Parse(port),\n                                            // 实例名称\n                                            Name = \"Services\",\n                                            // 标签\n                                            Tags = new string[] { weight.ToString() },\n                                            // 健康检查\n                                            Check = new AgentServiceCheck()\n                                            {\n                                                // 间隔\n                                                Interval = TimeSpan.FromSeconds(12),\n                                                // 检验地址\n                                                HTTP = $\"HTTP://{ip}:{port}/api/Home/health\",\n                                                // 检查服务名\n                                                Name = \"ConsulService\",\n                                                // 超时时间\n                                                Timeout = TimeSpan.FromSeconds(5),\n                                                // 注销服务\n                                                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(12),\n                                            }\n            \t\t\t\t\t\t});\n}\n```\n\n##### 启动程序\n\n通过cmd进入bin目录输入\n\n```bash\ndotnet [项目名].dll urls=\"http:127.0.0.1:8080\" ip=\"127.0.0.1\" port=\"8080\" weight=\"1\"\n```\n\n\n\n### ocelot\n\nOcelot\n\nOcelot.Cache.CacheManager\n\nOcelot.Provider.Consul\n\nOcelot.Provider.Polly\n\nStartup.cs\n\n```c#\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Ocelot.Cache;\nusing Ocelot.Cache.CacheManager;\nusing Ocelot.DependencyInjection;\nusing Ocelot.Middleware;\nusing Ocelot.Provider.Consul;\nusing Ocelot.Provider.Polly;\n\n\nnamespace Demo_Geteway\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // 添加Ocelot中间件\n            services.AddOcelot()\n                // 使用Consul\n                .AddConsul()\n                // 使用缓存管理\n                .AddCacheManager(m =>\n                {\n                    m.WithDictionaryHandle();//默认字典存储\n        \t\t})\n                // 使用故障处理机制\n                .AddPolly();\n            //这里的IOcelotCache<CachedResponse>是默认缓存的约束--准备替换成自定义的\n            services.AddSingleton<IOcelotCache<CachedResponse>, CustomeCache>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseOcelot().Wait();\n        }\n    }\n}\n```\n\nProgram\n\n```c#\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\n\nnamespace Demo_Geteway\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // 接收命令行参数\n            new ConfigurationBuilder()\n                .AddCommandLine(args);\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                }).ConfigureAppConfiguration(configure =>\n                {\n                    // 使用指定json文件\n                    configure.AddJsonFile(\"ocelot.json\", false, true);\n                });\n    }\n}\n```\n\n#### 单地址多服务\n\n```json\n{\n    \"Routes\": [\n        {\n            \"// DownstreamPathTemplate\": \"下游地址。{url}上有地址变量。万能模板写法:/{url}\",\n            \"DownstreamPathTemplate\": \"/api/{url}\",\n            \"// DownstreamScheme\": \"协议\",\n            \"DownstreamScheme\": \"http\",\n            \"// DownstreamHostAndPorts\": \"下游访问的主机和端口，可以为单个，设置多个时需要设置LoadBalancerOptions\",\n            \"DownstreamHostAndPorts\": [\n                {\n                    \"Host\": \"127.0.0.1\",\n                    \"Port\": 6003\n                },\n                {\n                    \"Host\": \"127.0.0.1\",\n                    \"Port\": 6004\n                },\n                {\n                    \"Host\": \"127.0.0.1\",\n                    \"Port\": 6002\n                }\n            ],\n            \"// UpstreamPathTemplate\": \"上游地址路径,{url}会传递给下游地址。万能模板写法:/{url}\",\n            \"UpstreamPathTemplate\": \"/to/{url}\",\n            \"// UpstreamHttpMethod\": \"上游请求类型\",\n            \"UpstreamHttpMethod\": [\n                \"Get\",\n                \"Post\"\n            ],\n            \"// LoadBalancerOptions\": \"负载均衡策略\",\n            \"LoadBalancerOptions\": {\n                \"// Type\": {\n                    \"// RoundRobin\": \"轮询\",\n                    \"// LeastConnection\": \"最少连接数，跟踪发现现在有最少请求或处理的可用服务\",\n                    \"// NoLoadBalancer\": \"不使用负载均衡，直接访问config配置或者服务发现的第一个可用服务\",\n                    \"// CookieStickySession\":\"会话粘滞\"\n                },\n                \"Type\": \"RoundRobin\",\n            }\n        }\n    ],\n    \"// GlobalConfiguration\": \"全局配置\",\n    \"GlobalConfiguration\": {\n        \"// BaseUrl\": \"根地址\",\n        \"BaseUrl\": \"https://127.0.0.1:6005\"\n    }\n}\n```\n\n#### consul服务治理\n\n```json\n{\n    \"Routes\": [\n        {\n            \"DownstreamPathTemplate\": \"/api/{url}\",\n            \"DownstreamScheme\": \"http\",\n            \"UpstreamPathTemplate\": \"/to/{url}\",\n            \"UpstreamHttpMethod\": [\"Get\",\"Post\"],\n            \"// UseServiceDiscovery\":\"使用服务发现\",\n            \"UseServiceDiscovery\": true,\n            \"// ServiceName\":\"Consul服务名称\",\n            \"ServiceName\": \"Services\",\n            \"LoadBalancerOptions\": {\n                \"Type\": \"RoundRobin\"\n            },\n            \"// FileCacheOptions\":\"使用缓存\",\n            \"FileCacheOptions\": {\n                \"// TtlSeconds\":\"过期时间\",\n                \"TtlSeconds\": 15,\n                \"// Region\",\"可以调用Api清理\",\n                \"Region\": \"UserCache\"\n            },\n            \"// RateLimitOptions\":\"限流\",\n            \"RateLimitOptions\": {\n                \"// ClientWhitelist\":\"白名单 ClientId区分大小写\",\n                \"ClientWhitelist\": [\n                    \"Microservice\",\n                    \"Attempt\"\n                ],\n                \"EnableRateLimiting\": true,\n                \"// Period\":\"5m 1h 1d\",\n                \"Period\": \"1s\", \n                \"// PeriodTimespan\":\"多少秒之后客户端可以重试\",\n                \"PeriodTimespan\": 5,\n                \"// Limit\": \"统计时间段内允许的最大请求数\",\n                \"Limit\": 5\n            },\n            \"// QoSOptions\":\"熔断\",\n            \"QoSOptions\": {\n                \"// ExceptionsAllowedBeforeBreaking\":\"熔断之前允许多少个异常请求\",\n                \"ExceptionsAllowedBeforeBreaking\": 3,\n                \"// DurationOfBreak\":\"熔断的时间,单位为ms.超过这个时间可再请求\",\n                \"DurationOfBreak\": 10000,\n                \"// TimeoutValue\":\"如果下游请求的处理时间超过多少则将请求设置为超时  默认90秒\",\n                \"TimeoutValue\": 4000\n            }\n        }\n    ],\n    \"GlobalConfiguration\": {\n        \"BaseUrl\": \"http://127.0.0.1:6005\",\n        \"// ServiceDiscoveryProvider\":\"服务发现配置\",\n        \"ServiceDiscoveryProvider\": {\n            \"Host\": \"localhost\",\n            \"Port\": 8500,\n            \"// Type\":\"由Consul提供服务发现,每次请求去Consul,PollConsul每次获取最新的Consul\",\n            \"Type\": \"PollConsul\",\n            \"// PollingInterval\":\"请求最新的consul时间\",\n            \"PollingInterval\": 100\n        },\n        \"// RateLimitOptions\":\"限流配置\",\n        \"RateLimitOptions\": {\n            \"// QuotaExceededMessage\":\"限流时返回的消息\",\n            \"QuotaExceededMessage\": \"Customize Tips!\",\n            \"// HttpStatusCode\":\"限流时返回的code\",\n            \"HttpStatusCode\": 999\n        }\n    }\n}\n```\n\n### nginx\n\n#### .Net Core Api\n\n```dockerfile\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    # 服务名\n    upstream Microservice {\n        server 127.0.0.1:8001;\n        server 127.0.0.1:8002;\n        server 127.0.0.1:8003;\n    }\n\n    server {\n        # 监听端口\n        listen       8080;\n        server_name  localhost;\n        # 使用\n        location / {\n            proxy_pass http://Microservice;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n\n\n#### WCF\n\n```dockerfile\n# 负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求\n# 均衡负载，测试工具：apache-jmeter-5.2.1 \n\n# 代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务\nupstream GQWcf  {\n         # 如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器，这样访客固定访问一台后端服务器可以解决session问题避免会话丢失。url  hash\n         ip_hash;\n         \n         # 代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大\n         server 192.168.1.180:8000  weight=10;\n         \n         # 代理地址也就是wcf的地址\n         server 192.168.1.252:8000 weight=70; \n         \n         # (第三方插件)：根据服务器响应时间进行分配，响应快的优先分配\n         fair；  \n      } \n      \n# 服务\nserver {\n        #监听默认服务器9000端口\n        listen       9000  default_server;       \n\n        #默认本机\n        server_name  127.0.0.1;                  \n \n        location / {\n                   # $request_uri有没有不影响，GQWcf：代理名称\n                   proxy_pass  http://GQWcf$request_uri;\n                   proxy_redirect off;\n                   # $server_port非常重要不然会出代理成功后无法再转向真实ip的下一级\n                   proxy_set_header Host $host:$server_port;  \n        }\n        \n        # 发生错误显示预定义的URL,\"/50x.html\"指下面的地址\n        error_page   500 502 503 504  /50x.html; \n\n\t\t# 发生错误返回的地址\n        location = /50x.html {\n            root   html;                                      \n        }\n  }\n```\n\n \n","slug":"micro_services","published":1,"updated":"2023-09-24T07:38:31.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhq0022owtkhd9g34r7","content":"<h3 id=\"consul\"><a href=\"#consul\" class=\"headerlink\" title=\"consul\"></a>consul</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -dev -node=127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Net-Core-使用Consul\"><a href=\"#Net-Core-使用Consul\" class=\"headerlink\" title=\".Net Core 使用Consul\"></a>.Net Core 使用Consul</h4><p>添加Nuget Consul 1.6.10.4</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过staup.configuration 调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseConsul</span>(<span class=\"params\"><span class=\"keyword\">this</span> IConfiguration configuration</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过配置项获取ip、port、weight信息</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ip = configuration[<span class=\"string\">&quot;ip&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> port = configuration[<span class=\"string\">&quot;port&quot;</span>];</span><br><span class=\"line\">    <span class=\"built_in\">int</span> weight = <span class=\"built_in\">string</span>.IsNullOrEmpty(configuration[<span class=\"string\">&quot;weight&quot;</span>]) ? <span class=\"number\">1</span> : <span class=\"built_in\">int</span>.Parse(configuration[<span class=\"string\">&quot;weight&quot;</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 声明consul客户端</span></span><br><span class=\"line\">    ConsulClient consulClient = <span class=\"keyword\">new</span> ConsulClient(x =&gt;</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 指定consul服务地址</span></span><br><span class=\"line\">        x.Address = <span class=\"keyword\">new</span> System.Uri(<span class=\"string\">&quot;http://localhost:8500&quot;</span>);</span><br><span class=\"line\">        x.Datacenter = <span class=\"string\">&quot;dcl&quot;</span>;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 服务注册</span></span><br><span class=\"line\">     consulClient.Agent.ServiceRegister(<span class=\"keyword\">new</span> AgentServiceRegistration()</span><br><span class=\"line\">                                        &#123;</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例id</span></span><br><span class=\"line\">                                            ID = <span class=\"string\">&quot;Service &quot;</span> + Guid.NewGuid().ToString(),</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例地址</span></span><br><span class=\"line\">                                            Address = ip,</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例端口</span></span><br><span class=\"line\">                                            Port = <span class=\"built_in\">int</span>.Parse(port),</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例名称</span></span><br><span class=\"line\">                                            Name = <span class=\"string\">&quot;Services&quot;</span>,</span><br><span class=\"line\">                                            <span class=\"comment\">// 标签</span></span><br><span class=\"line\">                                            Tags = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; weight.ToString() &#125;,</span><br><span class=\"line\">                                            <span class=\"comment\">// 健康检查</span></span><br><span class=\"line\">                                            Check = <span class=\"keyword\">new</span> AgentServiceCheck()</span><br><span class=\"line\">                                            &#123;</span><br><span class=\"line\">                                                <span class=\"comment\">// 间隔</span></span><br><span class=\"line\">                                                Interval = TimeSpan.FromSeconds(<span class=\"number\">12</span>),</span><br><span class=\"line\">                                                <span class=\"comment\">// 检验地址</span></span><br><span class=\"line\">                                                HTTP = <span class=\"string\">$&quot;HTTP://<span class=\"subst\">&#123;ip&#125;</span>:<span class=\"subst\">&#123;port&#125;</span>/api/Home/health&quot;</span>,</span><br><span class=\"line\">                                                <span class=\"comment\">// 检查服务名</span></span><br><span class=\"line\">                                                Name = <span class=\"string\">&quot;ConsulService&quot;</span>,</span><br><span class=\"line\">                                                <span class=\"comment\">// 超时时间</span></span><br><span class=\"line\">                                                Timeout = TimeSpan.FromSeconds(<span class=\"number\">5</span>),</span><br><span class=\"line\">                                                <span class=\"comment\">// 注销服务</span></span><br><span class=\"line\">                                                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class=\"number\">12</span>),</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">            \t\t\t\t\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动程序\"><a href=\"#启动程序\" class=\"headerlink\" title=\"启动程序\"></a>启动程序</h5><p>通过cmd进入bin目录输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet [项目名].dll urls=<span class=\"string\">&quot;http:127.0.0.1:8080&quot;</span> ip=<span class=\"string\">&quot;127.0.0.1&quot;</span> port=<span class=\"string\">&quot;8080&quot;</span> weight=<span class=\"string\">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ocelot\"><a href=\"#ocelot\" class=\"headerlink\" title=\"ocelot\"></a>ocelot</h3><p>Ocelot</p>\n<p>Ocelot.Cache.CacheManager</p>\n<p>Ocelot.Provider.Consul</p>\n<p>Ocelot.Provider.Polly</p>\n<p>Startup.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Cache;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Cache.CacheManager;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Middleware;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Provider.Consul;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Provider.Polly;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Demo_Geteway</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 添加Ocelot中间件</span></span><br><span class=\"line\">            services.AddOcelot()</span><br><span class=\"line\">                <span class=\"comment\">// 使用Consul</span></span><br><span class=\"line\">                .AddConsul()</span><br><span class=\"line\">                <span class=\"comment\">// 使用缓存管理</span></span><br><span class=\"line\">                .AddCacheManager(m =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    m.WithDictionaryHandle();<span class=\"comment\">//默认字典存储</span></span><br><span class=\"line\">        \t\t&#125;)</span><br><span class=\"line\">                <span class=\"comment\">// 使用故障处理机制</span></span><br><span class=\"line\">                .AddPolly();</span><br><span class=\"line\">            <span class=\"comment\">//这里的IOcelotCache&lt;CachedResponse&gt;是默认缓存的约束--准备替换成自定义的</span></span><br><span class=\"line\">            services.AddSingleton&lt;IOcelotCache&lt;CachedResponse&gt;, CustomeCache&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            app.UseOcelot().Wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Program</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Hosting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Demo_Geteway</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收命令行参数</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">                .AddCommandLine(args);</span><br><span class=\"line\">            CreateHostBuilder(args).Build().Run();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;).ConfigureAppConfiguration(configure =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 使用指定json文件</span></span><br><span class=\"line\">                    configure.AddJsonFile(<span class=\"string\">&quot;ocelot.json&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单地址多服务\"><a href=\"#单地址多服务\" class=\"headerlink\" title=\"单地址多服务\"></a>单地址多服务</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Routes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// DownstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;下游地址。&#123;url&#125;上有地址变量。万能模板写法:/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// DownstreamScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;协议&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// DownstreamHostAndPorts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;下游访问的主机和端口，可以为单个，设置多个时需要设置LoadBalancerOptions&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamHostAndPorts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6003</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6004</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6002</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// UpstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;上游地址路径,&#123;url&#125;会传递给下游地址。万能模板写法:/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/to/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// UpstreamHttpMethod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;上游请求类型&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamHttpMethod&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Post&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// LoadBalancerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;负载均衡策略&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;LoadBalancerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// RoundRobin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;轮询&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// LeastConnection&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;最少连接数，跟踪发现现在有最少请求或处理的可用服务&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// NoLoadBalancer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;不使用负载均衡，直接访问config配置或者服务发现的第一个可用服务&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// CookieStickySession&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;会话粘滞&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RoundRobin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;// GlobalConfiguration&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;全局配置&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;GlobalConfiguration&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;// BaseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;根地址&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;BaseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://127.0.0.1:6005&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"consul服务治理\"><a href=\"#consul服务治理\" class=\"headerlink\" title=\"consul服务治理\"></a>consul服务治理</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Routes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/to/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamHttpMethod&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Get&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;Post&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// UseServiceDiscovery&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;使用服务发现&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UseServiceDiscovery&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// ServiceName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Consul服务名称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;ServiceName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Services&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;LoadBalancerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RoundRobin&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// FileCacheOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;使用缓存&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;FileCacheOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// TtlSeconds&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;过期时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;TtlSeconds&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">15</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;// Region&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;可以调用Api清理&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Region&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UserCache&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// RateLimitOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;RateLimitOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// ClientWhitelist&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;白名单 ClientId区分大小写&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;ClientWhitelist&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;Microservice&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;Attempt&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;EnableRateLimiting&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// Period&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;5m 1h 1d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Period&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1s&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                <span class=\"attr\">&quot;// PeriodTimespan&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;多少秒之后客户端可以重试&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;PeriodTimespan&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// Limit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;统计时间段内允许的最大请求数&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Limit&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// QoSOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;熔断&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;QoSOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// ExceptionsAllowedBeforeBreaking&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;熔断之前允许多少个异常请求&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;ExceptionsAllowedBeforeBreaking&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// DurationOfBreak&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;熔断的时间,单位为ms.超过这个时间可再请求&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;DurationOfBreak&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// TimeoutValue&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;如果下游请求的处理时间超过多少则将请求设置为超时  默认90秒&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;TimeoutValue&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4000</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;GlobalConfiguration&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;BaseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://127.0.0.1:6005&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;// ServiceDiscoveryProvider&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;服务发现配置&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ServiceDiscoveryProvider&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;localhost&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8500</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// Type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;由Consul提供服务发现,每次请求去Consul,PollConsul每次获取最新的Consul&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;PollConsul&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// PollingInterval&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;请求最新的consul时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;PollingInterval&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;// RateLimitOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流配置&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;RateLimitOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// QuotaExceededMessage&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流时返回的消息&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;QuotaExceededMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Customize Tips!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// HttpStatusCode&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流时返回的code&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;HttpStatusCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">999</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><h4 id=\"Net-Core-Api\"><a href=\"#Net-Core-Api\" class=\"headerlink\" title=\".Net Core Api\"></a>.Net Core Api</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  <span class=\"number\">1</span>;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    upstream Microservice &#123;</span><br><span class=\"line\">        server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">8001</span>;</span><br><span class=\"line\">        server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">8002</span>;</span><br><span class=\"line\">        server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">8003</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       <span class=\"number\">8080</span>;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        <span class=\"comment\"># 使用</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://Microservice;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /<span class=\"number\">50</span>x.html;</span><br><span class=\"line\">        location = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"WCF\"><a href=\"#WCF\" class=\"headerlink\" title=\"WCF\"></a>WCF</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求</span></span><br><span class=\"line\"><span class=\"comment\"># 均衡负载，测试工具：apache-jmeter-5.2.1 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务</span></span><br><span class=\"line\">upstream GQWcf  &#123;</span><br><span class=\"line\">         <span class=\"comment\"># 如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器，这样访客固定访问一台后端服务器可以解决session问题避免会话丢失。url  hash</span></span><br><span class=\"line\">         ip_hash;</span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"comment\"># 代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大</span></span><br><span class=\"line\">         server <span class=\"number\">192.168</span>.<span class=\"number\">1.180</span>:<span class=\"number\">8000</span>  weight=<span class=\"number\">10</span>;</span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"comment\"># 代理地址也就是wcf的地址</span></span><br><span class=\"line\">         server <span class=\"number\">192.168</span>.<span class=\"number\">1.252</span>:<span class=\"number\">8000</span> weight=<span class=\"number\">70</span>; </span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"comment\"># (第三方插件)：根据服务器响应时间进行分配，响应快的优先分配</span></span><br><span class=\"line\">         fair；  </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># 服务</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        <span class=\"comment\">#监听默认服务器9000端口</span></span><br><span class=\"line\">        listen       <span class=\"number\">9000</span>  default_server;       </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#默认本机</span></span><br><span class=\"line\">        server_name  <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>;                  </span><br><span class=\"line\"> </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                   <span class=\"comment\"># $request_uri有没有不影响，GQWcf：代理名称</span></span><br><span class=\"line\">                   proxy_pass  http://GQWcf$request_uri;</span><br><span class=\"line\">                   proxy_redirect off;</span><br><span class=\"line\">                   <span class=\"comment\"># $server_port非常重要不然会出代理成功后无法再转向真实ip的下一级</span></span><br><span class=\"line\">                   proxy_set_header Host $host:$server_port;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 发生错误显示预定义的URL,&quot;/50x.html&quot;指下面的地址</span></span><br><span class=\"line\">        error_page   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /<span class=\"number\">50</span>x.html; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\"># 发生错误返回的地址</span></span><br><span class=\"line\">        location = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html;                                      </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"consul\"><a href=\"#consul\" class=\"headerlink\" title=\"consul\"></a>consul</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -dev -node=127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Net-Core-使用Consul\"><a href=\"#Net-Core-使用Consul\" class=\"headerlink\" title=\".Net Core 使用Consul\"></a>.Net Core 使用Consul</h4><p>添加Nuget Consul 1.6.10.4</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过staup.configuration 调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseConsul</span>(<span class=\"params\"><span class=\"keyword\">this</span> IConfiguration configuration</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过配置项获取ip、port、weight信息</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ip = configuration[<span class=\"string\">&quot;ip&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> port = configuration[<span class=\"string\">&quot;port&quot;</span>];</span><br><span class=\"line\">    <span class=\"built_in\">int</span> weight = <span class=\"built_in\">string</span>.IsNullOrEmpty(configuration[<span class=\"string\">&quot;weight&quot;</span>]) ? <span class=\"number\">1</span> : <span class=\"built_in\">int</span>.Parse(configuration[<span class=\"string\">&quot;weight&quot;</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 声明consul客户端</span></span><br><span class=\"line\">    ConsulClient consulClient = <span class=\"keyword\">new</span> ConsulClient(x =&gt;</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 指定consul服务地址</span></span><br><span class=\"line\">        x.Address = <span class=\"keyword\">new</span> System.Uri(<span class=\"string\">&quot;http://localhost:8500&quot;</span>);</span><br><span class=\"line\">        x.Datacenter = <span class=\"string\">&quot;dcl&quot;</span>;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 服务注册</span></span><br><span class=\"line\">     consulClient.Agent.ServiceRegister(<span class=\"keyword\">new</span> AgentServiceRegistration()</span><br><span class=\"line\">                                        &#123;</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例id</span></span><br><span class=\"line\">                                            ID = <span class=\"string\">&quot;Service &quot;</span> + Guid.NewGuid().ToString(),</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例地址</span></span><br><span class=\"line\">                                            Address = ip,</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例端口</span></span><br><span class=\"line\">                                            Port = <span class=\"built_in\">int</span>.Parse(port),</span><br><span class=\"line\">                                            <span class=\"comment\">// 实例名称</span></span><br><span class=\"line\">                                            Name = <span class=\"string\">&quot;Services&quot;</span>,</span><br><span class=\"line\">                                            <span class=\"comment\">// 标签</span></span><br><span class=\"line\">                                            Tags = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; weight.ToString() &#125;,</span><br><span class=\"line\">                                            <span class=\"comment\">// 健康检查</span></span><br><span class=\"line\">                                            Check = <span class=\"keyword\">new</span> AgentServiceCheck()</span><br><span class=\"line\">                                            &#123;</span><br><span class=\"line\">                                                <span class=\"comment\">// 间隔</span></span><br><span class=\"line\">                                                Interval = TimeSpan.FromSeconds(<span class=\"number\">12</span>),</span><br><span class=\"line\">                                                <span class=\"comment\">// 检验地址</span></span><br><span class=\"line\">                                                HTTP = <span class=\"string\">$&quot;HTTP://<span class=\"subst\">&#123;ip&#125;</span>:<span class=\"subst\">&#123;port&#125;</span>/api/Home/health&quot;</span>,</span><br><span class=\"line\">                                                <span class=\"comment\">// 检查服务名</span></span><br><span class=\"line\">                                                Name = <span class=\"string\">&quot;ConsulService&quot;</span>,</span><br><span class=\"line\">                                                <span class=\"comment\">// 超时时间</span></span><br><span class=\"line\">                                                Timeout = TimeSpan.FromSeconds(<span class=\"number\">5</span>),</span><br><span class=\"line\">                                                <span class=\"comment\">// 注销服务</span></span><br><span class=\"line\">                                                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class=\"number\">12</span>),</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">            \t\t\t\t\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动程序\"><a href=\"#启动程序\" class=\"headerlink\" title=\"启动程序\"></a>启动程序</h5><p>通过cmd进入bin目录输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet [项目名].dll urls=<span class=\"string\">&quot;http:127.0.0.1:8080&quot;</span> ip=<span class=\"string\">&quot;127.0.0.1&quot;</span> port=<span class=\"string\">&quot;8080&quot;</span> weight=<span class=\"string\">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ocelot\"><a href=\"#ocelot\" class=\"headerlink\" title=\"ocelot\"></a>ocelot</h3><p>Ocelot</p>\n<p>Ocelot.Cache.CacheManager</p>\n<p>Ocelot.Provider.Consul</p>\n<p>Ocelot.Provider.Polly</p>\n<p>Startup.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Builder;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Cache;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Cache.CacheManager;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.DependencyInjection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Middleware;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Provider.Consul;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Ocelot.Provider.Polly;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Demo_Geteway</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 添加Ocelot中间件</span></span><br><span class=\"line\">            services.AddOcelot()</span><br><span class=\"line\">                <span class=\"comment\">// 使用Consul</span></span><br><span class=\"line\">                .AddConsul()</span><br><span class=\"line\">                <span class=\"comment\">// 使用缓存管理</span></span><br><span class=\"line\">                .AddCacheManager(m =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    m.WithDictionaryHandle();<span class=\"comment\">//默认字典存储</span></span><br><span class=\"line\">        \t\t&#125;)</span><br><span class=\"line\">                <span class=\"comment\">// 使用故障处理机制</span></span><br><span class=\"line\">                .AddPolly();</span><br><span class=\"line\">            <span class=\"comment\">//这里的IOcelotCache&lt;CachedResponse&gt;是默认缓存的约束--准备替换成自定义的</span></span><br><span class=\"line\">            services.AddSingleton&lt;IOcelotCache&lt;CachedResponse&gt;, CustomeCache&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            app.UseOcelot().Wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Program</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Hosting;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Demo_Geteway</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收命令行参数</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">                .AddCommandLine(args);</span><br><span class=\"line\">            CreateHostBuilder(args).Build().Run();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">            Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">                &#125;).ConfigureAppConfiguration(configure =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 使用指定json文件</span></span><br><span class=\"line\">                    configure.AddJsonFile(<span class=\"string\">&quot;ocelot.json&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单地址多服务\"><a href=\"#单地址多服务\" class=\"headerlink\" title=\"单地址多服务\"></a>单地址多服务</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Routes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// DownstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;下游地址。&#123;url&#125;上有地址变量。万能模板写法:/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// DownstreamScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;协议&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// DownstreamHostAndPorts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;下游访问的主机和端口，可以为单个，设置多个时需要设置LoadBalancerOptions&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamHostAndPorts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6003</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6004</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6002</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// UpstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;上游地址路径,&#123;url&#125;会传递给下游地址。万能模板写法:/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/to/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// UpstreamHttpMethod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;上游请求类型&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamHttpMethod&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Post&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// LoadBalancerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;负载均衡策略&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;LoadBalancerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// RoundRobin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;轮询&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// LeastConnection&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;最少连接数，跟踪发现现在有最少请求或处理的可用服务&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// NoLoadBalancer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;不使用负载均衡，直接访问config配置或者服务发现的第一个可用服务&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;// CookieStickySession&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;会话粘滞&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RoundRobin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;// GlobalConfiguration&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;全局配置&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;GlobalConfiguration&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;// BaseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;根地址&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;BaseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://127.0.0.1:6005&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"consul服务治理\"><a href=\"#consul服务治理\" class=\"headerlink\" title=\"consul服务治理\"></a>consul服务治理</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Routes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;DownstreamScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamPathTemplate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/to/&#123;url&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UpstreamHttpMethod&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;Get&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;Post&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// UseServiceDiscovery&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;使用服务发现&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;UseServiceDiscovery&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// ServiceName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Consul服务名称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;ServiceName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Services&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;LoadBalancerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RoundRobin&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// FileCacheOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;使用缓存&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;FileCacheOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// TtlSeconds&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;过期时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;TtlSeconds&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">15</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;// Region&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;可以调用Api清理&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Region&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UserCache&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// RateLimitOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;RateLimitOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// ClientWhitelist&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;白名单 ClientId区分大小写&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;ClientWhitelist&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;Microservice&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;Attempt&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;EnableRateLimiting&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// Period&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;5m 1h 1d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Period&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1s&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">                <span class=\"attr\">&quot;// PeriodTimespan&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;多少秒之后客户端可以重试&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;PeriodTimespan&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// Limit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;统计时间段内允许的最大请求数&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Limit&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// QoSOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;熔断&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;QoSOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// ExceptionsAllowedBeforeBreaking&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;熔断之前允许多少个异常请求&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;ExceptionsAllowedBeforeBreaking&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// DurationOfBreak&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;熔断的时间,单位为ms.超过这个时间可再请求&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;DurationOfBreak&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;// TimeoutValue&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;如果下游请求的处理时间超过多少则将请求设置为超时  默认90秒&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;TimeoutValue&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4000</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;GlobalConfiguration&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;BaseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://127.0.0.1:6005&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;// ServiceDiscoveryProvider&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;服务发现配置&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ServiceDiscoveryProvider&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Host&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;localhost&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8500</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// Type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;由Consul提供服务发现,每次请求去Consul,PollConsul每次获取最新的Consul&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;PollConsul&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// PollingInterval&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;请求最新的consul时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;PollingInterval&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;// RateLimitOptions&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流配置&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;RateLimitOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// QuotaExceededMessage&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流时返回的消息&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;QuotaExceededMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Customize Tips!&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;// HttpStatusCode&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;限流时返回的code&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;HttpStatusCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">999</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><h4 id=\"Net-Core-Api\"><a href=\"#Net-Core-Api\" class=\"headerlink\" title=\".Net Core Api\"></a>.Net Core Api</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  <span class=\"number\">1</span>;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 服务名</span></span><br><span class=\"line\">    upstream Microservice &#123;</span><br><span class=\"line\">        server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">8001</span>;</span><br><span class=\"line\">        server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">8002</span>;</span><br><span class=\"line\">        server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">8003</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       <span class=\"number\">8080</span>;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        <span class=\"comment\"># 使用</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://Microservice;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /<span class=\"number\">50</span>x.html;</span><br><span class=\"line\">        location = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"WCF\"><a href=\"#WCF\" class=\"headerlink\" title=\"WCF\"></a>WCF</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求</span></span><br><span class=\"line\"><span class=\"comment\"># 均衡负载，测试工具：apache-jmeter-5.2.1 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务</span></span><br><span class=\"line\">upstream GQWcf  &#123;</span><br><span class=\"line\">         <span class=\"comment\"># 如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器，这样访客固定访问一台后端服务器可以解决session问题避免会话丢失。url  hash</span></span><br><span class=\"line\">         ip_hash;</span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"comment\"># 代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大</span></span><br><span class=\"line\">         server <span class=\"number\">192.168</span>.<span class=\"number\">1.180</span>:<span class=\"number\">8000</span>  weight=<span class=\"number\">10</span>;</span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"comment\"># 代理地址也就是wcf的地址</span></span><br><span class=\"line\">         server <span class=\"number\">192.168</span>.<span class=\"number\">1.252</span>:<span class=\"number\">8000</span> weight=<span class=\"number\">70</span>; </span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"comment\"># (第三方插件)：根据服务器响应时间进行分配，响应快的优先分配</span></span><br><span class=\"line\">         fair；  </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># 服务</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        <span class=\"comment\">#监听默认服务器9000端口</span></span><br><span class=\"line\">        listen       <span class=\"number\">9000</span>  default_server;       </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#默认本机</span></span><br><span class=\"line\">        server_name  <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>;                  </span><br><span class=\"line\"> </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                   <span class=\"comment\"># $request_uri有没有不影响，GQWcf：代理名称</span></span><br><span class=\"line\">                   proxy_pass  http://GQWcf$request_uri;</span><br><span class=\"line\">                   proxy_redirect off;</span><br><span class=\"line\">                   <span class=\"comment\"># $server_port非常重要不然会出代理成功后无法再转向真实ip的下一级</span></span><br><span class=\"line\">                   proxy_set_header Host $host:$server_port;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 发生错误显示预定义的URL,&quot;/50x.html&quot;指下面的地址</span></span><br><span class=\"line\">        error_page   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /<span class=\"number\">50</span>x.html; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\"># 发生错误返回的地址</span></span><br><span class=\"line\">        location = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html;                                      </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":".net core中consul与ocelot使用","path":"2022/07/15/micro_services/","eyeCatchImage":null,"excerpt":"通过本文可简单对微服务中所用的技术进行探秘，了解微服务实际的一些技术情况。","date":{"_isAMomentObject":true,"_i":"2022-07-15T12:48:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-15T12:48:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"微服务","tags":["dotnet","consul","ocelot","nginx","微服务"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"在docker中部署mysql","author":"wuxinheng","description":"本文介绍了centos docker部署持久化mysql。","date":"2022-07-15T12:48:00.000Z","_content":"\n### mysql 安装\n\n#### 拉取镜像\n\n```shell\ndocker pull mysql:5.7\n```\n\n#### 构建容器\n\n```shell\ndocker run --restart=always -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci\n```\n\n#### 修改密码\n\n```shell\n# 进入容器\ndocker exec -it mysql bash\n# 登录mysql\nmysql -uroot -p\n# 输入密码后, 执行下面命令创建新用户 (用户名: root , 密码: 123456)\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n```\n\n#### 版本升级\n\n与普通安装相似，需要先暂停原有的mysql容器，记得先备份。然后拉取新版本mysql,运行修改密码。然后重启。原来旧版本的mysql镜像可以删除。","source":"_posts/mysql.md","raw":"---\ntitle: 在docker中部署mysql\nauthor: wuxinheng\ndescription: 本文介绍了centos docker部署持久化mysql。\ndate: 2022-07-15 20:48:00\ntags:\n- mysql\n- 数据库\n- deploy\ncategories:\n- docker\n---\n\n### mysql 安装\n\n#### 拉取镜像\n\n```shell\ndocker pull mysql:5.7\n```\n\n#### 构建容器\n\n```shell\ndocker run --restart=always -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci\n```\n\n#### 修改密码\n\n```shell\n# 进入容器\ndocker exec -it mysql bash\n# 登录mysql\nmysql -uroot -p\n# 输入密码后, 执行下面命令创建新用户 (用户名: root , 密码: 123456)\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n```\n\n#### 版本升级\n\n与普通安装相似，需要先暂停原有的mysql容器，记得先备份。然后拉取新版本mysql,运行修改密码。然后重启。原来旧版本的mysql镜像可以删除。","slug":"mysql","published":1,"updated":"2023-09-24T07:38:31.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhr0026owtkejup87gu","content":"<h3 id=\"mysql-安装\"><a href=\"#mysql-安装\" class=\"headerlink\" title=\"mysql 安装\"></a>mysql 安装</h3><h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建容器\"><a href=\"#构建容器\" class=\"headerlink\" title=\"构建容器\"></a>构建容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker exec -it mysql bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录mysql</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入密码后, 执行下面命令创建新用户 (用户名: root , 密码: 123456)</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"版本升级\"><a href=\"#版本升级\" class=\"headerlink\" title=\"版本升级\"></a>版本升级</h4><p>与普通安装相似，需要先暂停原有的mysql容器，记得先备份。然后拉取新版本mysql,运行修改密码。然后重启。原来旧版本的mysql镜像可以删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"mysql-安装\"><a href=\"#mysql-安装\" class=\"headerlink\" title=\"mysql 安装\"></a>mysql 安装</h3><h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构建容器\"><a href=\"#构建容器\" class=\"headerlink\" title=\"构建容器\"></a>构建容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker exec -it mysql bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录mysql</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入密码后, 执行下面命令创建新用户 (用户名: root , 密码: 123456)</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"版本升级\"><a href=\"#版本升级\" class=\"headerlink\" title=\"版本升级\"></a>版本升级</h4><p>与普通安装相似，需要先暂停原有的mysql容器，记得先备份。然后拉取新版本mysql,运行修改密码。然后重启。原来旧版本的mysql镜像可以删除。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"在docker中部署mysql","path":"2022/07/15/mysql/","eyeCatchImage":null,"excerpt":"本文介绍了centos docker部署持久化mysql。","date":{"_isAMomentObject":true,"_i":"2022-07-15T12:48:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-15T12:48:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["deploy","mysql","数据库"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"nginx使用","author":"wuxinheng","description":"本文说明了nginx的使用和如何部署，怎么进行负载均衡、ssl设置。","date":"2022-07-11T12:32:35.000Z","_content":"\n# Nginx 介绍\n\n> 很多时候是可以选择nginx可视化管理工具的。但是我没有选择使用。原因是我觉得理解和学会配置nginx更重要。\n\n详细文档 [恩金克斯 (nginx.org)](https://nginx.org/en/)\n\nnginx 热门的轻量级服务器。轻量级服务器、支持负载均衡，对静态文件友好。\n\nnginx 中重要的三部分：\n\n静态文件：需要部署静态文件\n\n配置文件：配置nginx的配置文件\n\n日志：nginx的日志文件\n\n# 使用\n\n## docker\n\n### 安装\n\n```shell\n# 拉取nginx镜像\ndocker pull nginx\n```\n\n```shell\n# docker运行nginx\ndocker run --name nginx -d -p 80:80 nginx:latest\n```\n\n```shell\n# 进入nginx容器\ndocker exec -it nginx /bin/bash\t\n```\n\n\n\n### 路径\n\ndocker 容器内 nginx 相关文件路径\n\n配置文件：`/etc/nginx/nginx.conf`\n\n静态文件：`/usr/share/nginx/html`\n\n日志文件：`/var/log/nginx`\n\n\n\n### 持久化\n\n```shell\nmkdir -p /var/nginx/html\nmkdir -p /var/nginx/log\nmkdir -p /var/nginx/conf\nchmod 777 /var/nginx\n```\n\n```shell\ndocker cp nginx:/usr/share/nginx/html/. /var/nginx/html\ndocker cp nginx:/var/log/nginx/. /var/nginx/log\ndocker cp nginx:/etc/nginx/. /var/nginx/conf\n```\n\n> 启动容器时请使用--net=host参数, 直接映射本机端口, 因为内部nginx可能使用任意一个端口, 所以必须映射本机所有端口.——[nginxWebUI](https://gitee.com/cym1102/nginxWebUI.git)\n\n```shell\n# 原来呢我端口这里是 -p 80:80 -p 443:443,如果需要监听其他端口就需要添加如：-p 1234:1200。不符合实际需求应该映射本机端口：--net=host\ndocker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest\n```\n\n### ssl\n\nssl 证书放在/etc/nginx/conf.d/ssl文件夹下\n\n```ini\nuser  nginx;\nworker_processes  auto;\n\nerror_log  /var/log/nginx/error.log notice;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    \n\t# 上游代理\n\tupstream xblogs {\t\t\t\t\t\n\t\tserver 10.0.4.16:3000; # 可以在此处添加多个server来进行负载均衡。和其他配置\n\t}\n\t\n\tserver {\n        # 监听端口\n        listen       80;\n        server_name  localhost;\n        \n        # 使用\n        location / {\n            proxy_pass http://xblogs;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        \n        location = /50x.html {\n            root   html;\n        }\n        \n    }\n\t\n\tserver {\n        # 监听端口\n        listen       443 ssl;\n        server_name  xblogs.net www.xblogs.net;\n        ssl_certificate /etc/nginx/conf.d/ssl/server.crt;\n        ssl_certificate_key /etc/nginx/conf.d/ssl/server.key; \n        ssl_session_cache shared:ssl:10m;\n        ssl_session_timeout 10m; \n        #ssl_ciphers high:!anull:!md5;\n        #ssl_prefer_server_ciphers on;、\n        \n        # 使用\n        location / {\n            proxy_pass http://xblogs;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        \n        location = /50x.html {\n            root   html;\n        }\n        \n    }\n    # http重写为https\n    server {\n        # 监听端口\n\t\tlisten       12345;\n        server_name  xblogs.net www.xblogs.net;\n        rewrite ^(.*)$ https://${server_name}$1 permanent;\n    }\n    \n    # include /etc/nginx/conf.d/*.conf; \t#原本模块化代码注释了\n    \n}\n```\n\n\n\n### 踩坑\n\nnginx 在docker中的部署之后中间出现的疑惑和问题\n\n- 容器内部与windows nginx文件夹不一样。\n\n  起初我对这个很疑惑。后来反应这个docker容器的特性。\n\n- nginx的配置文件有两个\n\n  /etc/nginx/nginx.conf 和/etc/nginx/conf.d/default.conf两个配置文件。由于我是在19年第一次接触nginx接触次数不多。中间版本迭代。nginx把文件拆分了。这里以编程的角度就是模块化思想。nginx把具体的server拆分到default.conf这里可以选择新写一个文件也可以在nginx.conf上配置。\n\n## windows\n\n### 启动\n\n下载nginx之后在在文件夹中执行：nginx.exe 或者 start nginx,这个过程中可能出现端口被占用的错误。那就需要修改nginx.conf 监听的80端口。或者暂停现有占用80端口的进程或站点。\n\n### 负载均衡\n\n19年使用wcf+nginx初探。\n\n```ini\n#我是使用时是成功代理的，以下代码仅供参考\n#负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求\n#均衡负载，测试工具：apache-jmeter-5.2.1 \n\nupstream GQWcf  {                                #代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务\n\n         #ip_hash;                               #如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器\n                                                 #这样访客固定访问一台后端服务器可以解决session问题避免会话丢失但是可能会造成分配不均。\n                                                 #url  hash跟ip_hash类似根据url的hash值进行分配，将URL分配到同一个否端服务器，\n                                                 #当服务器存在缓存时比较有效\n         server 192.168.1.180:8000  weight=10;   #代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大\n         server 192.168.1.252:8000  weight=70;   #代理地址也就是wcf的地址  \n         #fair；                                 #(第三方插件)：根据服务器响应时间进行分配，响应快的优先分配\n\n} \nserver {\n \n        listen       9000  default_server;       #监听默认服务器9000端口\n        server_name  127.0.0.1;                  #默认本机\n \n        location / {\n                   proxy_pass  http://GQWcf$request_uri;      #$request_uri有没有不影响，GQWcf：代理名称\n                   proxy_redirect off;\n                   proxy_set_header Host $host:$server_port;  #:$server_port非常重要不然会出代理成功后无法再转向真实ip的下一级\n        }\n\n        error_page   500 502 503 504  /50x.html;              #发生错误显示预定义的URL,\"/50x.html\"指下面的地址\n\n        location = /50x.html {\n            root   html;                                      #发生错误返回的地址\n        }\n \n  }\n```\n\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx使用\nauthor: wuxinheng\ndescription: 本文说明了nginx的使用和如何部署，怎么进行负载均衡、ssl设置。\ndate: 2022-07-11 20:32:35\ntags:\n- nginx代理\n- nginx负载均衡\n- nginx配置ssl\n- nginx\ncategories:\n- docker\n---\n\n# Nginx 介绍\n\n> 很多时候是可以选择nginx可视化管理工具的。但是我没有选择使用。原因是我觉得理解和学会配置nginx更重要。\n\n详细文档 [恩金克斯 (nginx.org)](https://nginx.org/en/)\n\nnginx 热门的轻量级服务器。轻量级服务器、支持负载均衡，对静态文件友好。\n\nnginx 中重要的三部分：\n\n静态文件：需要部署静态文件\n\n配置文件：配置nginx的配置文件\n\n日志：nginx的日志文件\n\n# 使用\n\n## docker\n\n### 安装\n\n```shell\n# 拉取nginx镜像\ndocker pull nginx\n```\n\n```shell\n# docker运行nginx\ndocker run --name nginx -d -p 80:80 nginx:latest\n```\n\n```shell\n# 进入nginx容器\ndocker exec -it nginx /bin/bash\t\n```\n\n\n\n### 路径\n\ndocker 容器内 nginx 相关文件路径\n\n配置文件：`/etc/nginx/nginx.conf`\n\n静态文件：`/usr/share/nginx/html`\n\n日志文件：`/var/log/nginx`\n\n\n\n### 持久化\n\n```shell\nmkdir -p /var/nginx/html\nmkdir -p /var/nginx/log\nmkdir -p /var/nginx/conf\nchmod 777 /var/nginx\n```\n\n```shell\ndocker cp nginx:/usr/share/nginx/html/. /var/nginx/html\ndocker cp nginx:/var/log/nginx/. /var/nginx/log\ndocker cp nginx:/etc/nginx/. /var/nginx/conf\n```\n\n> 启动容器时请使用--net=host参数, 直接映射本机端口, 因为内部nginx可能使用任意一个端口, 所以必须映射本机所有端口.——[nginxWebUI](https://gitee.com/cym1102/nginxWebUI.git)\n\n```shell\n# 原来呢我端口这里是 -p 80:80 -p 443:443,如果需要监听其他端口就需要添加如：-p 1234:1200。不符合实际需求应该映射本机端口：--net=host\ndocker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest\n```\n\n### ssl\n\nssl 证书放在/etc/nginx/conf.d/ssl文件夹下\n\n```ini\nuser  nginx;\nworker_processes  auto;\n\nerror_log  /var/log/nginx/error.log notice;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    \n\t# 上游代理\n\tupstream xblogs {\t\t\t\t\t\n\t\tserver 10.0.4.16:3000; # 可以在此处添加多个server来进行负载均衡。和其他配置\n\t}\n\t\n\tserver {\n        # 监听端口\n        listen       80;\n        server_name  localhost;\n        \n        # 使用\n        location / {\n            proxy_pass http://xblogs;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        \n        location = /50x.html {\n            root   html;\n        }\n        \n    }\n\t\n\tserver {\n        # 监听端口\n        listen       443 ssl;\n        server_name  xblogs.net www.xblogs.net;\n        ssl_certificate /etc/nginx/conf.d/ssl/server.crt;\n        ssl_certificate_key /etc/nginx/conf.d/ssl/server.key; \n        ssl_session_cache shared:ssl:10m;\n        ssl_session_timeout 10m; \n        #ssl_ciphers high:!anull:!md5;\n        #ssl_prefer_server_ciphers on;、\n        \n        # 使用\n        location / {\n            proxy_pass http://xblogs;\n        }\n        \n        error_page   500 502 503 504  /50x.html;\n        \n        location = /50x.html {\n            root   html;\n        }\n        \n    }\n    # http重写为https\n    server {\n        # 监听端口\n\t\tlisten       12345;\n        server_name  xblogs.net www.xblogs.net;\n        rewrite ^(.*)$ https://${server_name}$1 permanent;\n    }\n    \n    # include /etc/nginx/conf.d/*.conf; \t#原本模块化代码注释了\n    \n}\n```\n\n\n\n### 踩坑\n\nnginx 在docker中的部署之后中间出现的疑惑和问题\n\n- 容器内部与windows nginx文件夹不一样。\n\n  起初我对这个很疑惑。后来反应这个docker容器的特性。\n\n- nginx的配置文件有两个\n\n  /etc/nginx/nginx.conf 和/etc/nginx/conf.d/default.conf两个配置文件。由于我是在19年第一次接触nginx接触次数不多。中间版本迭代。nginx把文件拆分了。这里以编程的角度就是模块化思想。nginx把具体的server拆分到default.conf这里可以选择新写一个文件也可以在nginx.conf上配置。\n\n## windows\n\n### 启动\n\n下载nginx之后在在文件夹中执行：nginx.exe 或者 start nginx,这个过程中可能出现端口被占用的错误。那就需要修改nginx.conf 监听的80端口。或者暂停现有占用80端口的进程或站点。\n\n### 负载均衡\n\n19年使用wcf+nginx初探。\n\n```ini\n#我是使用时是成功代理的，以下代码仅供参考\n#负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求\n#均衡负载，测试工具：apache-jmeter-5.2.1 \n\nupstream GQWcf  {                                #代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务\n\n         #ip_hash;                               #如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器\n                                                 #这样访客固定访问一台后端服务器可以解决session问题避免会话丢失但是可能会造成分配不均。\n                                                 #url  hash跟ip_hash类似根据url的hash值进行分配，将URL分配到同一个否端服务器，\n                                                 #当服务器存在缓存时比较有效\n         server 192.168.1.180:8000  weight=10;   #代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大\n         server 192.168.1.252:8000  weight=70;   #代理地址也就是wcf的地址  \n         #fair；                                 #(第三方插件)：根据服务器响应时间进行分配，响应快的优先分配\n\n} \nserver {\n \n        listen       9000  default_server;       #监听默认服务器9000端口\n        server_name  127.0.0.1;                  #默认本机\n \n        location / {\n                   proxy_pass  http://GQWcf$request_uri;      #$request_uri有没有不影响，GQWcf：代理名称\n                   proxy_redirect off;\n                   proxy_set_header Host $host:$server_port;  #:$server_port非常重要不然会出代理成功后无法再转向真实ip的下一级\n        }\n\n        error_page   500 502 503 504  /50x.html;              #发生错误显示预定义的URL,\"/50x.html\"指下面的地址\n\n        location = /50x.html {\n            root   html;                                      #发生错误返回的地址\n        }\n \n  }\n```\n\n","slug":"nginx","published":1,"updated":"2023-09-24T07:38:31.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhr0029owtk64ps2qpp","content":"<h1 id=\"Nginx-介绍\"><a href=\"#Nginx-介绍\" class=\"headerlink\" title=\"Nginx 介绍\"></a>Nginx 介绍</h1><blockquote>\n<p>很多时候是可以选择nginx可视化管理工具的。但是我没有选择使用。原因是我觉得理解和学会配置nginx更重要。</p>\n</blockquote>\n<p>详细文档 <a href=\"https://nginx.org/en/\">恩金克斯 (nginx.org)</a></p>\n<p>nginx 热门的轻量级服务器。轻量级服务器、支持负载均衡，对静态文件友好。</p>\n<p>nginx 中重要的三部分：</p>\n<p>静态文件：需要部署静态文件</p>\n<p>配置文件：配置nginx的配置文件</p>\n<p>日志：nginx的日志文件</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取nginx镜像</span></span><br><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker运行nginx</span></span><br><span class=\"line\">docker run --name nginx -d -p 80:80 nginx:latest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入nginx容器</span></span><br><span class=\"line\">docker exec -it nginx /bin/bash\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h3><p>docker 容器内 nginx 相关文件路径</p>\n<p>配置文件：<code>/etc/nginx/nginx.conf</code></p>\n<p>静态文件：<code>/usr/share/nginx/html</code></p>\n<p>日志文件：<code>/var/log/nginx</code></p>\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/nginx/html</span><br><span class=\"line\">mkdir -p /var/nginx/log</span><br><span class=\"line\">mkdir -p /var/nginx/conf</span><br><span class=\"line\">chmod 777 /var/nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp nginx:/usr/share/nginx/html/. /var/nginx/html</span><br><span class=\"line\">docker cp nginx:/var/log/nginx/. /var/nginx/log</span><br><span class=\"line\">docker cp nginx:/etc/nginx/. /var/nginx/conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>启动容器时请使用–net&#x3D;host参数, 直接映射本机端口, 因为内部nginx可能使用任意一个端口, 所以必须映射本机所有端口.——<a href=\"https://gitee.com/cym1102/nginxWebUI.git\">nginxWebUI</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原来呢我端口这里是 -p 80:80 -p 443:443,如果需要监听其他端口就需要添加如：-p 1234:1200。不符合实际需求应该映射本机端口：--net=host</span></span><br><span class=\"line\">docker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h3><p>ssl 证书放在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;ssl文件夹下</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx<span class=\"comment\">;</span></span><br><span class=\"line\">worker_processes  auto<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log notice<span class=\"comment\">;</span></span><br><span class=\"line\">pid        /var/run/nginx.pid<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types<span class=\"comment\">;</span></span><br><span class=\"line\">    default_type  application/octet-stream<span class=\"comment\">;</span></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user <span class=\"section\">[$time_local]</span> &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;<span class=\"comment\">;</span></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main<span class=\"comment\">;</span></span><br><span class=\"line\">    sendfile        on<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\">    keepalive_timeout  65<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\"># 上游代理</span></span><br><span class=\"line\">\tupstream xblogs &#123;\t\t\t\t\t</span><br><span class=\"line\">\t\tserver 10.0.4.16:3000<span class=\"comment\">; # 可以在此处添加多个server来进行负载均衡。和其他配置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       80<span class=\"comment\">;</span></span><br><span class=\"line\">        server_name  localhost<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 使用</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://xblogs<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       443 ssl<span class=\"comment\">;</span></span><br><span class=\"line\">        server_name  xblogs.net www.xblogs.net<span class=\"comment\">;</span></span><br><span class=\"line\">        ssl_certificate /etc/nginx/conf.d/ssl/server.crt<span class=\"comment\">;</span></span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/conf.d/ssl/server.key<span class=\"comment\">; </span></span><br><span class=\"line\">        ssl_session_cache shared:ssl:10m<span class=\"comment\">;</span></span><br><span class=\"line\">        ssl_session_timeout 10m<span class=\"comment\">; </span></span><br><span class=\"line\">        <span class=\"comment\">#ssl_ciphers high:!anull:!md5;</span></span><br><span class=\"line\">        <span class=\"comment\">#ssl_prefer_server_ciphers on;、</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 使用</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://xblogs<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># http重写为https</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">\t\tlisten       12345<span class=\"comment\">;</span></span><br><span class=\"line\">        server_name  xblogs.net www.xblogs.net<span class=\"comment\">;</span></span><br><span class=\"line\">        rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># include /etc/nginx/conf.d/*.conf; \t#原本模块化代码注释了</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h3><p>nginx 在docker中的部署之后中间出现的疑惑和问题</p>\n<ul>\n<li><p>容器内部与windows nginx文件夹不一样。</p>\n<p>起初我对这个很疑惑。后来反应这个docker容器的特性。</p>\n</li>\n<li><p>nginx的配置文件有两个</p>\n<p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 和&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf两个配置文件。由于我是在19年第一次接触nginx接触次数不多。中间版本迭代。nginx把文件拆分了。这里以编程的角度就是模块化思想。nginx把具体的server拆分到default.conf这里可以选择新写一个文件也可以在nginx.conf上配置。</p>\n</li>\n</ul>\n<h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>下载nginx之后在在文件夹中执行：nginx.exe 或者 start nginx,这个过程中可能出现端口被占用的错误。那就需要修改nginx.conf 监听的80端口。或者暂停现有占用80端口的进程或站点。</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>19年使用wcf+nginx初探。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我是使用时是成功代理的，以下代码仅供参考</span></span><br><span class=\"line\"><span class=\"comment\">#负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求</span></span><br><span class=\"line\"><span class=\"comment\">#均衡负载，测试工具：apache-jmeter-5.2.1 </span></span><br><span class=\"line\"></span><br><span class=\"line\">upstream GQWcf  &#123;                                <span class=\"comment\">#代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">#ip_hash;                               #如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器</span></span><br><span class=\"line\">                                                 <span class=\"comment\">#这样访客固定访问一台后端服务器可以解决session问题避免会话丢失但是可能会造成分配不均。</span></span><br><span class=\"line\">                                                 <span class=\"comment\">#url  hash跟ip_hash类似根据url的hash值进行分配，将URL分配到同一个否端服务器，</span></span><br><span class=\"line\">                                                 <span class=\"comment\">#当服务器存在缓存时比较有效</span></span><br><span class=\"line\">         server 192.168.1.180:8000  <span class=\"attr\">weight</span>=<span class=\"number\">10</span><span class=\"comment\">;   #代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大</span></span><br><span class=\"line\">         server 192.168.1.252:8000  <span class=\"attr\">weight</span>=<span class=\"number\">70</span><span class=\"comment\">;   #代理地址也就是wcf的地址  </span></span><br><span class=\"line\">         <span class=\"comment\">#fair；                                 #(第三方插件)：根据服务器响应时间进行分配，响应快的优先分配</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        listen       9000  default_server<span class=\"comment\">;       #监听默认服务器9000端口</span></span><br><span class=\"line\">        server_name  127.0.0.1<span class=\"comment\">;                  #默认本机</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                   proxy_pass  http://GQWcf$request_uri<span class=\"comment\">;      #$request_uri有没有不影响，GQWcf：代理名称</span></span><br><span class=\"line\">                   proxy_redirect off<span class=\"comment\">;</span></span><br><span class=\"line\">                   proxy_set_header Host $host:$server_port<span class=\"comment\">;  #:$server_port非常重要不然会出代理成功后无法再转向真实ip的下一级</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;              #发生错误显示预定义的URL,&quot;/50x.html&quot;指下面的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html<span class=\"comment\">;                                      #发生错误返回的地址</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nginx-介绍\"><a href=\"#Nginx-介绍\" class=\"headerlink\" title=\"Nginx 介绍\"></a>Nginx 介绍</h1><blockquote>\n<p>很多时候是可以选择nginx可视化管理工具的。但是我没有选择使用。原因是我觉得理解和学会配置nginx更重要。</p>\n</blockquote>\n<p>详细文档 <a href=\"https://nginx.org/en/\">恩金克斯 (nginx.org)</a></p>\n<p>nginx 热门的轻量级服务器。轻量级服务器、支持负载均衡，对静态文件友好。</p>\n<p>nginx 中重要的三部分：</p>\n<p>静态文件：需要部署静态文件</p>\n<p>配置文件：配置nginx的配置文件</p>\n<p>日志：nginx的日志文件</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取nginx镜像</span></span><br><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker运行nginx</span></span><br><span class=\"line\">docker run --name nginx -d -p 80:80 nginx:latest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入nginx容器</span></span><br><span class=\"line\">docker exec -it nginx /bin/bash\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h3><p>docker 容器内 nginx 相关文件路径</p>\n<p>配置文件：<code>/etc/nginx/nginx.conf</code></p>\n<p>静态文件：<code>/usr/share/nginx/html</code></p>\n<p>日志文件：<code>/var/log/nginx</code></p>\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/nginx/html</span><br><span class=\"line\">mkdir -p /var/nginx/log</span><br><span class=\"line\">mkdir -p /var/nginx/conf</span><br><span class=\"line\">chmod 777 /var/nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp nginx:/usr/share/nginx/html/. /var/nginx/html</span><br><span class=\"line\">docker cp nginx:/var/log/nginx/. /var/nginx/log</span><br><span class=\"line\">docker cp nginx:/etc/nginx/. /var/nginx/conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>启动容器时请使用–net&#x3D;host参数, 直接映射本机端口, 因为内部nginx可能使用任意一个端口, 所以必须映射本机所有端口.——<a href=\"https://gitee.com/cym1102/nginxWebUI.git\">nginxWebUI</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原来呢我端口这里是 -p 80:80 -p 443:443,如果需要监听其他端口就需要添加如：-p 1234:1200。不符合实际需求应该映射本机端口：--net=host</span></span><br><span class=\"line\">docker run --name nginx  -d --net=host  -v /var/nginx/html:/usr/share/nginx/html -v /var/nginx/log:/var/log/nginx/ -v /var/nginx/conf:/etc/nginx nginx:latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ssl\"><a href=\"#ssl\" class=\"headerlink\" title=\"ssl\"></a>ssl</h3><p>ssl 证书放在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;ssl文件夹下</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx<span class=\"comment\">;</span></span><br><span class=\"line\">worker_processes  auto<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log notice<span class=\"comment\">;</span></span><br><span class=\"line\">pid        /var/run/nginx.pid<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types<span class=\"comment\">;</span></span><br><span class=\"line\">    default_type  application/octet-stream<span class=\"comment\">;</span></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user <span class=\"section\">[$time_local]</span> &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;<span class=\"comment\">;</span></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main<span class=\"comment\">;</span></span><br><span class=\"line\">    sendfile        on<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\">    keepalive_timeout  65<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\"># 上游代理</span></span><br><span class=\"line\">\tupstream xblogs &#123;\t\t\t\t\t</span><br><span class=\"line\">\t\tserver 10.0.4.16:3000<span class=\"comment\">; # 可以在此处添加多个server来进行负载均衡。和其他配置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       80<span class=\"comment\">;</span></span><br><span class=\"line\">        server_name  localhost<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 使用</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://xblogs<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">        listen       443 ssl<span class=\"comment\">;</span></span><br><span class=\"line\">        server_name  xblogs.net www.xblogs.net<span class=\"comment\">;</span></span><br><span class=\"line\">        ssl_certificate /etc/nginx/conf.d/ssl/server.crt<span class=\"comment\">;</span></span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/conf.d/ssl/server.key<span class=\"comment\">; </span></span><br><span class=\"line\">        ssl_session_cache shared:ssl:10m<span class=\"comment\">;</span></span><br><span class=\"line\">        ssl_session_timeout 10m<span class=\"comment\">; </span></span><br><span class=\"line\">        <span class=\"comment\">#ssl_ciphers high:!anull:!md5;</span></span><br><span class=\"line\">        <span class=\"comment\">#ssl_prefer_server_ciphers on;、</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 使用</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://xblogs<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># http重写为https</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">\t\tlisten       12345<span class=\"comment\">;</span></span><br><span class=\"line\">        server_name  xblogs.net www.xblogs.net<span class=\"comment\">;</span></span><br><span class=\"line\">        rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># include /etc/nginx/conf.d/*.conf; \t#原本模块化代码注释了</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h3><p>nginx 在docker中的部署之后中间出现的疑惑和问题</p>\n<ul>\n<li><p>容器内部与windows nginx文件夹不一样。</p>\n<p>起初我对这个很疑惑。后来反应这个docker容器的特性。</p>\n</li>\n<li><p>nginx的配置文件有两个</p>\n<p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 和&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf两个配置文件。由于我是在19年第一次接触nginx接触次数不多。中间版本迭代。nginx把文件拆分了。这里以编程的角度就是模块化思想。nginx把具体的server拆分到default.conf这里可以选择新写一个文件也可以在nginx.conf上配置。</p>\n</li>\n</ul>\n<h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>下载nginx之后在在文件夹中执行：nginx.exe 或者 start nginx,这个过程中可能出现端口被占用的错误。那就需要修改nginx.conf 监听的80端口。或者暂停现有占用80端口的进程或站点。</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>19年使用wcf+nginx初探。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我是使用时是成功代理的，以下代码仅供参考</span></span><br><span class=\"line\"><span class=\"comment\">#负载均衡是在内网下完成的，在外网请求的是代理服务器地址监听的是9000端口，再由代理服务器向后端服务器发送请求</span></span><br><span class=\"line\"><span class=\"comment\">#均衡负载，测试工具：apache-jmeter-5.2.1 </span></span><br><span class=\"line\"></span><br><span class=\"line\">upstream GQWcf  &#123;                                <span class=\"comment\">#代理名称，下面是两台轮询地址如果与一台服务器宕机另外一台还可以提供服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">#ip_hash;                               #如果用户已经访问了某台服务器，当用户再次访问时将该请求通过哈希算法自动定位到该台服务器</span></span><br><span class=\"line\">                                                 <span class=\"comment\">#这样访客固定访问一台后端服务器可以解决session问题避免会话丢失但是可能会造成分配不均。</span></span><br><span class=\"line\">                                                 <span class=\"comment\">#url  hash跟ip_hash类似根据url的hash值进行分配，将URL分配到同一个否端服务器，</span></span><br><span class=\"line\">                                                 <span class=\"comment\">#当服务器存在缓存时比较有效</span></span><br><span class=\"line\">         server 192.168.1.180:8000  <span class=\"attr\">weight</span>=<span class=\"number\">10</span><span class=\"comment\">;   #代理地址，在服务器上确保端口开放   weight:权重与访问率成正比，权重越大访问率越大</span></span><br><span class=\"line\">         server 192.168.1.252:8000  <span class=\"attr\">weight</span>=<span class=\"number\">70</span><span class=\"comment\">;   #代理地址也就是wcf的地址  </span></span><br><span class=\"line\">         <span class=\"comment\">#fair；                                 #(第三方插件)：根据服务器响应时间进行分配，响应快的优先分配</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        listen       9000  default_server<span class=\"comment\">;       #监听默认服务器9000端口</span></span><br><span class=\"line\">        server_name  127.0.0.1<span class=\"comment\">;                  #默认本机</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                   proxy_pass  http://GQWcf$request_uri<span class=\"comment\">;      #$request_uri有没有不影响，GQWcf：代理名称</span></span><br><span class=\"line\">                   proxy_redirect off<span class=\"comment\">;</span></span><br><span class=\"line\">                   proxy_set_header Host $host:$server_port<span class=\"comment\">;  #:$server_port非常重要不然会出代理成功后无法再转向真实ip的下一级</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html<span class=\"comment\">;              #发生错误显示预定义的URL,&quot;/50x.html&quot;指下面的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">location</span> = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">            root   html<span class=\"comment\">;                                      #发生错误返回的地址</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"nginx使用","path":"2022/07/11/nginx/","eyeCatchImage":null,"excerpt":"本文说明了nginx的使用和如何部署，怎么进行负载均衡、ssl设置。","date":{"_isAMomentObject":true,"_i":"2022-07-11T12:32:35.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-11T12:32:35.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"docker","tags":["nginx","nginx代理","nginx负载均衡","nginx配置ssl"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ssh无法链接","author":"wuxinheng","date":"2022-08-24T14:19:09.000Z","description":"ssh无法链接","_content":"## ssh无法链接\n\n描述：`xftp` 无法与\"`目标IP`\"连接\n\n原因：`OpenSSH`升级导致\n\n解决办法：\n\n1. 查看服务地址\n\n   ```shell\n   # 输入\n   find / -name sftp-server\n   # 结果\n   /usr/local/openssh/libexec/sftp-server #像\n   /home/EGS-B1101.17.1.211222/openssh8.8p1/openssh-8.8p1/sftp-server #不像\n   ```\n\n2. 设置正确的地址\n\n   ```shell\n   vim /etc/ssh/sshd_config\n   ```\n\n   查看`Subsystem`的值，比对第一步服务地址。\n\n   修改正确的路径。\n\n3. 重启\n\n   ```shell\n   systemctl restart sshd\n   ```\n","source":"_posts/ssh无法链接.md","raw":"---\ntitle: ssh无法链接\nauthor: wuxinheng\ndate: 2022-08-24 22:19:09\ndescription: ssh无法链接\ncategories:\n  - linux\ntags:\n- ssh\n---\n## ssh无法链接\n\n描述：`xftp` 无法与\"`目标IP`\"连接\n\n原因：`OpenSSH`升级导致\n\n解决办法：\n\n1. 查看服务地址\n\n   ```shell\n   # 输入\n   find / -name sftp-server\n   # 结果\n   /usr/local/openssh/libexec/sftp-server #像\n   /home/EGS-B1101.17.1.211222/openssh8.8p1/openssh-8.8p1/sftp-server #不像\n   ```\n\n2. 设置正确的地址\n\n   ```shell\n   vim /etc/ssh/sshd_config\n   ```\n\n   查看`Subsystem`的值，比对第一步服务地址。\n\n   修改正确的路径。\n\n3. 重启\n\n   ```shell\n   systemctl restart sshd\n   ```\n","slug":"ssh无法链接","published":1,"updated":"2023-09-24T07:38:31.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhs002dowtk0kdm6q6e","content":"<h2 id=\"ssh无法链接\"><a href=\"#ssh无法链接\" class=\"headerlink\" title=\"ssh无法链接\"></a>ssh无法链接</h2><p>描述：<code>xftp</code> 无法与”<code>目标IP</code>“连接</p>\n<p>原因：<code>OpenSSH</code>升级导致</p>\n<p>解决办法：</p>\n<ol>\n<li><p>查看服务地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入</span></span><br><span class=\"line\">find / -name sftp-server</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">/usr/local/openssh/libexec/sftp-server #像</span><br><span class=\"line\">/home/EGS-B1101.17.1.211222/openssh8.8p1/openssh-8.8p1/sftp-server #不像</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置正确的地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>Subsystem</code>的值，比对第一步服务地址。</p>\n<p>修改正确的路径。</p>\n</li>\n<li><p>重启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ssh无法链接\"><a href=\"#ssh无法链接\" class=\"headerlink\" title=\"ssh无法链接\"></a>ssh无法链接</h2><p>描述：<code>xftp</code> 无法与”<code>目标IP</code>“连接</p>\n<p>原因：<code>OpenSSH</code>升级导致</p>\n<p>解决办法：</p>\n<ol>\n<li><p>查看服务地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入</span></span><br><span class=\"line\">find / -name sftp-server</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">/usr/local/openssh/libexec/sftp-server #像</span><br><span class=\"line\">/home/EGS-B1101.17.1.211222/openssh8.8p1/openssh-8.8p1/sftp-server #不像</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置正确的地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>Subsystem</code>的值，比对第一步服务地址。</p>\n<p>修改正确的路径。</p>\n</li>\n<li><p>重启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure></li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"ssh无法链接","path":"2022/08/24/ssh无法链接/","eyeCatchImage":null,"excerpt":"ssh无法链接","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:19:09.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:19:09.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"linux","tags":["ssh"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"textbox自动补全","author":"wuxinheng","description":"textbox自动补全","date":"2022-09-05T14:15:01.000Z","_content":"#### textbox自动补全\n\n```\ntextBox1.AutoCompleteMode = AutoCompleteMode.Suggest;\ntextBox1.AutoCompleteSource = AutoCompleteSource.CustomSource;\ntextBox1.AutoCompleteCustomSource = new AutoCompleteStringCollection()\n{\n    \"应对伏秋连旱防范旱涝急转\" ,\n    \"应123转\" ,\n    \"1无人机航拍宣传 渔民误作敌机击落热\" ,\n    \"2公司不聘用手机号倒数第5位是5的人热\" ,\n    \"神十四乘组首次出舱官方预告\" ,\n    \"气象局回应南昌现不明飞行物\"\n\n};\n```\n\n","source":"_posts/textbox自动补全.md","raw":"---\ntitle: textbox自动补全\nauthor: wuxinheng\ndescription: textbox自动补全\ndate: 2022-09-05 22:15:01\ntags:\n- textbox\ncategories:\n- winform\n---\n#### textbox自动补全\n\n```\ntextBox1.AutoCompleteMode = AutoCompleteMode.Suggest;\ntextBox1.AutoCompleteSource = AutoCompleteSource.CustomSource;\ntextBox1.AutoCompleteCustomSource = new AutoCompleteStringCollection()\n{\n    \"应对伏秋连旱防范旱涝急转\" ,\n    \"应123转\" ,\n    \"1无人机航拍宣传 渔民误作敌机击落热\" ,\n    \"2公司不聘用手机号倒数第5位是5的人热\" ,\n    \"神十四乘组首次出舱官方预告\" ,\n    \"气象局回应南昌现不明飞行物\"\n\n};\n```\n\n","slug":"textbox自动补全","published":1,"updated":"2023-09-24T07:38:31.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhs002howtk4dmt7amr","content":"<h4 id=\"textbox自动补全\"><a href=\"#textbox自动补全\" class=\"headerlink\" title=\"textbox自动补全\"></a>textbox自动补全</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textBox1.AutoCompleteMode = AutoCompleteMode.Suggest;</span><br><span class=\"line\">textBox1.AutoCompleteSource = AutoCompleteSource.CustomSource;</span><br><span class=\"line\">textBox1.AutoCompleteCustomSource = new AutoCompleteStringCollection()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;应对伏秋连旱防范旱涝急转&quot; ,</span><br><span class=\"line\">    &quot;应123转&quot; ,</span><br><span class=\"line\">    &quot;1无人机航拍宣传 渔民误作敌机击落热&quot; ,</span><br><span class=\"line\">    &quot;2公司不聘用手机号倒数第5位是5的人热&quot; ,</span><br><span class=\"line\">    &quot;神十四乘组首次出舱官方预告&quot; ,</span><br><span class=\"line\">    &quot;气象局回应南昌现不明飞行物&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"textbox自动补全\"><a href=\"#textbox自动补全\" class=\"headerlink\" title=\"textbox自动补全\"></a>textbox自动补全</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textBox1.AutoCompleteMode = AutoCompleteMode.Suggest;</span><br><span class=\"line\">textBox1.AutoCompleteSource = AutoCompleteSource.CustomSource;</span><br><span class=\"line\">textBox1.AutoCompleteCustomSource = new AutoCompleteStringCollection()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;应对伏秋连旱防范旱涝急转&quot; ,</span><br><span class=\"line\">    &quot;应123转&quot; ,</span><br><span class=\"line\">    &quot;1无人机航拍宣传 渔民误作敌机击落热&quot; ,</span><br><span class=\"line\">    &quot;2公司不聘用手机号倒数第5位是5的人热&quot; ,</span><br><span class=\"line\">    &quot;神十四乘组首次出舱官方预告&quot; ,</span><br><span class=\"line\">    &quot;气象局回应南昌现不明飞行物&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"textbox自动补全","path":"2022/09/05/textbox自动补全/","eyeCatchImage":null,"excerpt":"textbox自动补全","date":{"_isAMomentObject":true,"_i":"2022-09-05T14:15:01.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-09-05T14:15:01.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"winform","tags":["textbox"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"windows部署kafka","author":"wuxinheng","description":"windows部署kafka","date":"2022-09-05T14:03:47.000Z","_content":"## 安装\n\n[Windows上Kafka运行环境安装 - Niceri - 博客园 (cnblogs.com)](https://www.cnblogs.com/lnice/p/9668750.html)\n\n[WINDOWS上KAFKA运行环境安装](https://www.cnblogs.com/lnice/p/9668750.html)\n\n**1. 安装JDK**\n\n1.1 安装文件：http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载JDK1.2 安装完成后需要添加以下的环境变量（右键点击“我的电脑” -> \"高级系统设置\" -> \"环境变量\" ）：\n\n- JAVA_HOME: C:\\Program Files\\Java\\jdk1.8.0_171 (jdk的安装路径)\n\n- Path: 在现有的值后面添加\"; %JAVA_HOME%\\bin\"\n\n1.3 打开cmd运行 \"java -version\" 查看当前系统Java的版本：\n\n​    ![](../images/kafka/1.png)\n\n**2. 安装ZOOKEEPER**\n\nKafka的运行依赖于Zookeeper，所以在运行Kafka之前我们需要安装并运行Zookeeper\n\n2.1 下载安装文件： http://zookeeper.apache.org/releases.html\n\n2.2 解压文件 \n\n2.3 打开zookeeper-3.4.13\\conf，把zoo_sample.cfg重命名成zoo.cfg\n\n2.4 从文本编辑器里打开zoo.cfg\n\n2.5 把dataDir的值改成“./zookeeper-3.4.13/data”\n\n2.6 添加如下系统变量：\n\n- ZOOKEEPER_HOME: C:\\Users\\localadmin\\CODE\\zookeeper-3.4.13 (zookeeper目录)\n- Path: 在现有的值后面添加 \";%ZOOKEEPER_HOME%\\bin;\"\n\n2.7 运行Zookeeper: 打开cmd然后执行 zkserver\n\n ![](../images/kafka/2.png)\n\ncmd 窗口不要关闭\n\n**3. 安装并运行KAFKA**\n\n3.1 下载安装文件： http://kafka.apache.org/downloads.html\n\n3.2 解压文件\n\n3.3 打开kafka_2.11-2.0.0\\config\n\n3.4 从文本编辑器里打开 server.properties\n\n3.5 把 log.dirs的值改成 “./logs”\n\n3.6 打开cmd\n\n3.7 进入kafka文件目录: cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0(kafka目录)\n\n3.8 输入并执行: .\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties\n\n![](../images/kafka/3.png)\n\ncmd 窗口不要关闭\n\n**4. 创建TOPICS**\n\n4.1 打开cmd 并进入cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows\n\n4.2 创建一个topic： kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n\n​    ![](../images/kafka/4.png)\n\n**5. 打开一个PRODUCER：**\n\n​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              \n\n​                kafka-console-producer.bat --broker-list localhost:9092 --topic test              \n\n**6. 打开一个CONSUMER:**\n\n​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              \n\n​                kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning              \n\n**7. 测试:**\n\n \n\n![](../images/kafka/5.png)","source":"_posts/windows部署kafka.md","raw":"---\ntitle: windows部署kafka\nauthor: wuxinheng\ndescription: windows部署kafka\ndate: 2022-09-05 22:03:47\ntags:\n- windows部署kafka\ncategories:\n- kafka\n---\n## 安装\n\n[Windows上Kafka运行环境安装 - Niceri - 博客园 (cnblogs.com)](https://www.cnblogs.com/lnice/p/9668750.html)\n\n[WINDOWS上KAFKA运行环境安装](https://www.cnblogs.com/lnice/p/9668750.html)\n\n**1. 安装JDK**\n\n1.1 安装文件：http://www.oracle.com/technetwork/java/javase/downloads/index.html 下载JDK1.2 安装完成后需要添加以下的环境变量（右键点击“我的电脑” -> \"高级系统设置\" -> \"环境变量\" ）：\n\n- JAVA_HOME: C:\\Program Files\\Java\\jdk1.8.0_171 (jdk的安装路径)\n\n- Path: 在现有的值后面添加\"; %JAVA_HOME%\\bin\"\n\n1.3 打开cmd运行 \"java -version\" 查看当前系统Java的版本：\n\n​    ![](../images/kafka/1.png)\n\n**2. 安装ZOOKEEPER**\n\nKafka的运行依赖于Zookeeper，所以在运行Kafka之前我们需要安装并运行Zookeeper\n\n2.1 下载安装文件： http://zookeeper.apache.org/releases.html\n\n2.2 解压文件 \n\n2.3 打开zookeeper-3.4.13\\conf，把zoo_sample.cfg重命名成zoo.cfg\n\n2.4 从文本编辑器里打开zoo.cfg\n\n2.5 把dataDir的值改成“./zookeeper-3.4.13/data”\n\n2.6 添加如下系统变量：\n\n- ZOOKEEPER_HOME: C:\\Users\\localadmin\\CODE\\zookeeper-3.4.13 (zookeeper目录)\n- Path: 在现有的值后面添加 \";%ZOOKEEPER_HOME%\\bin;\"\n\n2.7 运行Zookeeper: 打开cmd然后执行 zkserver\n\n ![](../images/kafka/2.png)\n\ncmd 窗口不要关闭\n\n**3. 安装并运行KAFKA**\n\n3.1 下载安装文件： http://kafka.apache.org/downloads.html\n\n3.2 解压文件\n\n3.3 打开kafka_2.11-2.0.0\\config\n\n3.4 从文本编辑器里打开 server.properties\n\n3.5 把 log.dirs的值改成 “./logs”\n\n3.6 打开cmd\n\n3.7 进入kafka文件目录: cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0(kafka目录)\n\n3.8 输入并执行: .\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties\n\n![](../images/kafka/3.png)\n\ncmd 窗口不要关闭\n\n**4. 创建TOPICS**\n\n4.1 打开cmd 并进入cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows\n\n4.2 创建一个topic： kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n\n​    ![](../images/kafka/4.png)\n\n**5. 打开一个PRODUCER：**\n\n​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              \n\n​                kafka-console-producer.bat --broker-list localhost:9092 --topic test              \n\n**6. 打开一个CONSUMER:**\n\n​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              \n\n​                kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning              \n\n**7. 测试:**\n\n \n\n![](../images/kafka/5.png)","slug":"windows部署kafka","published":1,"updated":"2023-09-24T07:38:31.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzht002lowtk3q8i19x2","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://www.cnblogs.com/lnice/p/9668750.html\">Windows上Kafka运行环境安装 - Niceri - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/lnice/p/9668750.html\">WINDOWS上KAFKA运行环境安装</a></p>\n<p><strong>1. 安装JDK</strong></p>\n<p>1.1 安装文件：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载JDK1.2 安装完成后需要添加以下的环境变量（右键点击“我的电脑” -&gt; “高级系统设置” -&gt; “环境变量” ）：</p>\n<ul>\n<li><p>JAVA_HOME: C:\\Program Files\\Java\\jdk1.8.0_171 (jdk的安装路径)</p>\n</li>\n<li><p>Path: 在现有的值后面添加”; %JAVA_HOME%\\bin”</p>\n</li>\n</ul>\n<p>1.3 打开cmd运行 “java -version” 查看当前系统Java的版本：</p>\n<p>​    <img src=\"/../images/kafka/1.png\"></p>\n<p><strong>2. 安装ZOOKEEPER</strong></p>\n<p>Kafka的运行依赖于Zookeeper，所以在运行Kafka之前我们需要安装并运行Zookeeper</p>\n<p>2.1 下载安装文件： <a href=\"http://zookeeper.apache.org/releases.html\">http://zookeeper.apache.org/releases.html</a></p>\n<p>2.2 解压文件 </p>\n<p>2.3 打开zookeeper-3.4.13\\conf，把zoo_sample.cfg重命名成zoo.cfg</p>\n<p>2.4 从文本编辑器里打开zoo.cfg</p>\n<p>2.5 把dataDir的值改成“.&#x2F;zookeeper-3.4.13&#x2F;data”</p>\n<p>2.6 添加如下系统变量：</p>\n<ul>\n<li>ZOOKEEPER_HOME: C:\\Users\\localadmin\\CODE\\zookeeper-3.4.13 (zookeeper目录)</li>\n<li>Path: 在现有的值后面添加 “;%ZOOKEEPER_HOME%\\bin;”</li>\n</ul>\n<p>2.7 运行Zookeeper: 打开cmd然后执行 zkserver</p>\n<p> <img src=\"/../images/kafka/2.png\"></p>\n<p>cmd 窗口不要关闭</p>\n<p><strong>3. 安装并运行KAFKA</strong></p>\n<p>3.1 下载安装文件： <a href=\"http://kafka.apache.org/downloads.html\">http://kafka.apache.org/downloads.html</a></p>\n<p>3.2 解压文件</p>\n<p>3.3 打开kafka_2.11-2.0.0\\config</p>\n<p>3.4 从文本编辑器里打开 server.properties</p>\n<p>3.5 把 log.dirs的值改成 “.&#x2F;logs”</p>\n<p>3.6 打开cmd</p>\n<p>3.7 进入kafka文件目录: cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0(kafka目录)</p>\n<p>3.8 输入并执行: .\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties</p>\n<p><img src=\"/../images/kafka/3.png\"></p>\n<p>cmd 窗口不要关闭</p>\n<p><strong>4. 创建TOPICS</strong></p>\n<p>4.1 打开cmd 并进入cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows</p>\n<p>4.2 创建一个topic： kafka-topics.bat –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test</p>\n<p>​    <img src=\"/../images/kafka/4.png\"></p>\n<p><strong>5. 打开一个PRODUCER：</strong></p>\n<p>​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              </p>\n<p>​                kafka-console-producer.bat –broker-list localhost:9092 –topic test              </p>\n<p><strong>6. 打开一个CONSUMER:</strong></p>\n<p>​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              </p>\n<p>​                kafka-console-consumer.bat –bootstrap-server localhost:9092 –topic test –from-beginning              </p>\n<p><strong>7. 测试:</strong></p>\n<p><img src=\"/../images/kafka/5.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://www.cnblogs.com/lnice/p/9668750.html\">Windows上Kafka运行环境安装 - Niceri - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/lnice/p/9668750.html\">WINDOWS上KAFKA运行环境安装</a></p>\n<p><strong>1. 安装JDK</strong></p>\n<p>1.1 安装文件：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载JDK1.2 安装完成后需要添加以下的环境变量（右键点击“我的电脑” -&gt; “高级系统设置” -&gt; “环境变量” ）：</p>\n<ul>\n<li><p>JAVA_HOME: C:\\Program Files\\Java\\jdk1.8.0_171 (jdk的安装路径)</p>\n</li>\n<li><p>Path: 在现有的值后面添加”; %JAVA_HOME%\\bin”</p>\n</li>\n</ul>\n<p>1.3 打开cmd运行 “java -version” 查看当前系统Java的版本：</p>\n<p>​    <img src=\"/../images/kafka/1.png\"></p>\n<p><strong>2. 安装ZOOKEEPER</strong></p>\n<p>Kafka的运行依赖于Zookeeper，所以在运行Kafka之前我们需要安装并运行Zookeeper</p>\n<p>2.1 下载安装文件： <a href=\"http://zookeeper.apache.org/releases.html\">http://zookeeper.apache.org/releases.html</a></p>\n<p>2.2 解压文件 </p>\n<p>2.3 打开zookeeper-3.4.13\\conf，把zoo_sample.cfg重命名成zoo.cfg</p>\n<p>2.4 从文本编辑器里打开zoo.cfg</p>\n<p>2.5 把dataDir的值改成“.&#x2F;zookeeper-3.4.13&#x2F;data”</p>\n<p>2.6 添加如下系统变量：</p>\n<ul>\n<li>ZOOKEEPER_HOME: C:\\Users\\localadmin\\CODE\\zookeeper-3.4.13 (zookeeper目录)</li>\n<li>Path: 在现有的值后面添加 “;%ZOOKEEPER_HOME%\\bin;”</li>\n</ul>\n<p>2.7 运行Zookeeper: 打开cmd然后执行 zkserver</p>\n<p> <img src=\"/../images/kafka/2.png\"></p>\n<p>cmd 窗口不要关闭</p>\n<p><strong>3. 安装并运行KAFKA</strong></p>\n<p>3.1 下载安装文件： <a href=\"http://kafka.apache.org/downloads.html\">http://kafka.apache.org/downloads.html</a></p>\n<p>3.2 解压文件</p>\n<p>3.3 打开kafka_2.11-2.0.0\\config</p>\n<p>3.4 从文本编辑器里打开 server.properties</p>\n<p>3.5 把 log.dirs的值改成 “.&#x2F;logs”</p>\n<p>3.6 打开cmd</p>\n<p>3.7 进入kafka文件目录: cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0(kafka目录)</p>\n<p>3.8 输入并执行: .\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties</p>\n<p><img src=\"/../images/kafka/3.png\"></p>\n<p>cmd 窗口不要关闭</p>\n<p><strong>4. 创建TOPICS</strong></p>\n<p>4.1 打开cmd 并进入cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows</p>\n<p>4.2 创建一个topic： kafka-topics.bat –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test</p>\n<p>​    <img src=\"/../images/kafka/4.png\"></p>\n<p><strong>5. 打开一个PRODUCER：</strong></p>\n<p>​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              </p>\n<p>​                kafka-console-producer.bat –broker-list localhost:9092 –topic test              </p>\n<p><strong>6. 打开一个CONSUMER:</strong></p>\n<p>​                cd C:\\Users\\localadmin\\CODE\\kafka_2.11-2.0.0\\bin\\windows              </p>\n<p>​                kafka-console-consumer.bat –bootstrap-server localhost:9092 –topic test –from-beginning              </p>\n<p><strong>7. 测试:</strong></p>\n<p><img src=\"/../images/kafka/5.png\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/../images/kafka/1.png","popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"windows部署kafka","path":"2022/09/05/windows部署kafka/","eyeCatchImage":"/../images/kafka/1.png","excerpt":"windows部署kafka","date":{"_isAMomentObject":true,"_i":"2022-09-05T14:03:47.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-09-05T14:03:47.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"kafka","tags":["windows部署kafka"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"在docker中部署wtm","author":"wuxinheng","description":"本文说明了dotnet快速开发框架wtm如何在docker中部署，以及项目文件结构变化大之后Dockerfile应该如何更改，验证码无法显示、指定nuget源等问题具体解决办法。","date":"2022-07-15T12:48:00.000Z","_content":"\n#### 拉取镜像\n\n```shell\ndocker pull mcr.microsoft.com/dotnet/sdk:5.0\n```\n\n#### 验证\n\n```shell\n# 输入\ndocker images\n# 结果\nmcr.microsoft.com/dotnet/sdk     5.0\nmcr.microsoft.com/dotnet/aspnet  5.0\n```\n\n#### 创建doccker配置文件\n\n`Visual Studio`右键项目创建`Docker`支持\n\n#### 打包项目镜像\n\n- 使用Dockerfile打包镜像\n\n  ```shell\n  # 当前文件夹打包镜像\n  docker build -t 镜像名称 .\n  # 当前文件夹使用指定文件打包镜像\n  docker build -f xxx/Dockerfile -t 镜像名称 .\n  ```\n\n#### 构建容器\n\n```shell\ndocker run --name 容器名称 -p 2022:80 --restart=always 镜像名称\n```\n\n#### 解决问题\n\n##### System.Drawing 兼容问题\n\n###### 验证码不显示\n\n修改Dockerfile\n\n```shell\n# 更新包\nRUN apt-get update\n# 安装apt-get 安装 libc6-dev , libgdiplus  用于支持system.drawing 组件绘制,默认ubuntu命令\n#RUN apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n# 配置apt的资源，采用阿里云资源仓库 必须是debian 10 buster版本\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list\nRUN  apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n```\n\n##### Dockerfiled修改\n\n> 当前项目后期我们进行的大范围改动，包括项目文件夹的移动、使用封装之后通用类库的Nuget包。\n>\n> 过程中发我使用jenkins发现。无法使用原有dockerfile进行安装。我对dockerfile进行了修改。\n\n###### 文件路径修改\n\n见下面\n\n###### 指定Nuget 包源\n\n```dockerfile\n# 指定项目基于什么框架\nFROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base\n# 更新apt-ger\nRUN apt-get update\n# 设置包源\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list\n# 安装库，此处是支持gdip\nRUN  apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n# 进入指定目录\nWORKDIR /app\n# 指定端口\nEXPOSE 80\n# 指定基于5.0生成\nFROM mcr.microsoft.com/dotnet/sdk:5.0 AS build\nWORKDIR /src\n# 此处复制相关项目的依赖，如果项目后期改动，会导致后期打包失败，项目目录根据实际情况来\nCOPY [\"Property/ShuWen.Property/ShuWen.Property.csproj\", \"Property/ShuWen.Property/\"]\nCOPY [\"Property/ShuWen.Property/nuget.config\", \"Property/ShuWen.Property/\"]\nCOPY [\"src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj\", \"src/WalkingTec.Mvvm.TagHelpers.LayUI/\"]\nCOPY [\"src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj\", \"src/WalkingTec.Mvvm.Core/\"]\nCOPY [\"src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj\", \"src/WalkingTec.Mvvm.Mvc/\"]\nCOPY [\"Common/ShuWen.Common.csproj\", \"Common/\"]\nCOPY [\"ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj\", \"ShuWen.Property.DataAccess/\"]\nCOPY [\"ShuWen.Property.Model/ShuWen.Property.Model.csproj\", \"ShuWen.Property.Model/\"]\nCOPY [\"Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj\", \"Property/ShuWen.Property.ViewModel/\"]\n# 此步跟启动vs项目前的生成或者第一次打开项目生成项目很像nuget包还原。实际也做得是nuget包还原。此处需要指定包源。我的包源写在nuget.config中\nRUN dotnet restore \"Property/ShuWen.Property/ShuWen.Property.csproj\"  --configfile \"Property/ShuWen.Property/nuget.config\"\nCOPY . .\nWORKDIR \"Property/ShuWen.Property/\"\n# 对项目进行打包\nRUN dotnet build \"ShuWen.Property.csproj\" -c Release -o /app/build\nFROM build AS publish\n# 发布项目\nRUN dotnet publish \"ShuWen.Property.csproj\" -c Release -o /app/publish\nFROM base AS final\nWORKDIR /app\n# 将项目复制到指定的文件夹\nCOPY --from=publish /app/publish .\n# 运行项目\nENTRYPOINT [\"dotnet\", \"ShuWen.Property.dll\"]\n```\n\nnuget.config 内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<packageSources>\n\t\t<add key=\"Nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n\t\t<add key=\"Baget\" value=\"http://47.100.94.46:5555/v3/index.json\" />\n\t</packageSources>\n</configuration>\n```\n\n","source":"_posts/wtm.md","raw":"---\ntitle: 在docker中部署wtm\nauthor: wuxinheng\ndescription: 本文说明了dotnet快速开发框架wtm如何在docker中部署，以及项目文件结构变化大之后Dockerfile应该如何更改，验证码无法显示、指定nuget源等问题具体解决办法。\ndate: 2022-07-15 20:48:00\ntags:\n- docker\n- wtm\n- dotnet\n- linux验证码\n- gdip\n- System.Drawing 兼容问题\n- deploy\ncategories:\n- dotnet\n---\n\n#### 拉取镜像\n\n```shell\ndocker pull mcr.microsoft.com/dotnet/sdk:5.0\n```\n\n#### 验证\n\n```shell\n# 输入\ndocker images\n# 结果\nmcr.microsoft.com/dotnet/sdk     5.0\nmcr.microsoft.com/dotnet/aspnet  5.0\n```\n\n#### 创建doccker配置文件\n\n`Visual Studio`右键项目创建`Docker`支持\n\n#### 打包项目镜像\n\n- 使用Dockerfile打包镜像\n\n  ```shell\n  # 当前文件夹打包镜像\n  docker build -t 镜像名称 .\n  # 当前文件夹使用指定文件打包镜像\n  docker build -f xxx/Dockerfile -t 镜像名称 .\n  ```\n\n#### 构建容器\n\n```shell\ndocker run --name 容器名称 -p 2022:80 --restart=always 镜像名称\n```\n\n#### 解决问题\n\n##### System.Drawing 兼容问题\n\n###### 验证码不显示\n\n修改Dockerfile\n\n```shell\n# 更新包\nRUN apt-get update\n# 安装apt-get 安装 libc6-dev , libgdiplus  用于支持system.drawing 组件绘制,默认ubuntu命令\n#RUN apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n# 配置apt的资源，采用阿里云资源仓库 必须是debian 10 buster版本\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list\nRUN  apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n```\n\n##### Dockerfiled修改\n\n> 当前项目后期我们进行的大范围改动，包括项目文件夹的移动、使用封装之后通用类库的Nuget包。\n>\n> 过程中发我使用jenkins发现。无法使用原有dockerfile进行安装。我对dockerfile进行了修改。\n\n###### 文件路径修改\n\n见下面\n\n###### 指定Nuget 包源\n\n```dockerfile\n# 指定项目基于什么框架\nFROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base\n# 更新apt-ger\nRUN apt-get update\n# 设置包源\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian-security buster/updates main\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list && \\\n   echo \"deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\" >>/etc/apt/sources.list\n# 安装库，此处是支持gdip\nRUN  apt-get update && apt-get install -y apt-utils libgdiplus libc6-dev\n# 进入指定目录\nWORKDIR /app\n# 指定端口\nEXPOSE 80\n# 指定基于5.0生成\nFROM mcr.microsoft.com/dotnet/sdk:5.0 AS build\nWORKDIR /src\n# 此处复制相关项目的依赖，如果项目后期改动，会导致后期打包失败，项目目录根据实际情况来\nCOPY [\"Property/ShuWen.Property/ShuWen.Property.csproj\", \"Property/ShuWen.Property/\"]\nCOPY [\"Property/ShuWen.Property/nuget.config\", \"Property/ShuWen.Property/\"]\nCOPY [\"src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj\", \"src/WalkingTec.Mvvm.TagHelpers.LayUI/\"]\nCOPY [\"src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj\", \"src/WalkingTec.Mvvm.Core/\"]\nCOPY [\"src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj\", \"src/WalkingTec.Mvvm.Mvc/\"]\nCOPY [\"Common/ShuWen.Common.csproj\", \"Common/\"]\nCOPY [\"ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj\", \"ShuWen.Property.DataAccess/\"]\nCOPY [\"ShuWen.Property.Model/ShuWen.Property.Model.csproj\", \"ShuWen.Property.Model/\"]\nCOPY [\"Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj\", \"Property/ShuWen.Property.ViewModel/\"]\n# 此步跟启动vs项目前的生成或者第一次打开项目生成项目很像nuget包还原。实际也做得是nuget包还原。此处需要指定包源。我的包源写在nuget.config中\nRUN dotnet restore \"Property/ShuWen.Property/ShuWen.Property.csproj\"  --configfile \"Property/ShuWen.Property/nuget.config\"\nCOPY . .\nWORKDIR \"Property/ShuWen.Property/\"\n# 对项目进行打包\nRUN dotnet build \"ShuWen.Property.csproj\" -c Release -o /app/build\nFROM build AS publish\n# 发布项目\nRUN dotnet publish \"ShuWen.Property.csproj\" -c Release -o /app/publish\nFROM base AS final\nWORKDIR /app\n# 将项目复制到指定的文件夹\nCOPY --from=publish /app/publish .\n# 运行项目\nENTRYPOINT [\"dotnet\", \"ShuWen.Property.dll\"]\n```\n\nnuget.config 内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<packageSources>\n\t\t<add key=\"Nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n\t\t<add key=\"Baget\" value=\"http://47.100.94.46:5555/v3/index.json\" />\n\t</packageSources>\n</configuration>\n```\n\n","slug":"wtm","published":1,"updated":"2023-09-24T07:38:31.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzht002powtkbww2cbdp","content":"<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mcr.microsoft.com/dotnet/sdk:5.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">mcr.microsoft.com/dotnet/sdk     5.0</span><br><span class=\"line\">mcr.microsoft.com/dotnet/aspnet  5.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建doccker配置文件\"><a href=\"#创建doccker配置文件\" class=\"headerlink\" title=\"创建doccker配置文件\"></a>创建doccker配置文件</h4><p><code>Visual Studio</code>右键项目创建<code>Docker</code>支持</p>\n<h4 id=\"打包项目镜像\"><a href=\"#打包项目镜像\" class=\"headerlink\" title=\"打包项目镜像\"></a>打包项目镜像</h4><ul>\n<li><p>使用Dockerfile打包镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当前文件夹打包镜像</span></span><br><span class=\"line\">docker build -t 镜像名称 .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当前文件夹使用指定文件打包镜像</span></span><br><span class=\"line\">docker build -f xxx/Dockerfile -t 镜像名称 .</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"构建容器\"><a href=\"#构建容器\" class=\"headerlink\" title=\"构建容器\"></a>构建容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name 容器名称 -p 2022:80 --restart=always 镜像名称</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><h5 id=\"System-Drawing-兼容问题\"><a href=\"#System-Drawing-兼容问题\" class=\"headerlink\" title=\"System.Drawing 兼容问题\"></a>System.Drawing 兼容问题</h5><h6 id=\"验证码不显示\"><a href=\"#验证码不显示\" class=\"headerlink\" title=\"验证码不显示\"></a>验证码不显示</h6><p>修改Dockerfile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新包</span></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装apt-get 安装 libc6-dev , libgdiplus  用于支持system.drawing 组件绘制,默认ubuntu命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RUN apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置apt的资源，采用阿里云资源仓库 必须是debian 10 buster版本</span></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\">RUN  apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Dockerfiled修改\"><a href=\"#Dockerfiled修改\" class=\"headerlink\" title=\"Dockerfiled修改\"></a>Dockerfiled修改</h5><blockquote>\n<p>当前项目后期我们进行的大范围改动，包括项目文件夹的移动、使用封装之后通用类库的Nuget包。</p>\n<p>过程中发我使用jenkins发现。无法使用原有dockerfile进行安装。我对dockerfile进行了修改。</p>\n</blockquote>\n<h6 id=\"文件路径修改\"><a href=\"#文件路径修改\" class=\"headerlink\" title=\"文件路径修改\"></a>文件路径修改</h6><p>见下面</p>\n<h6 id=\"指定Nuget-包源\"><a href=\"#指定Nuget-包源\" class=\"headerlink\" title=\"指定Nuget 包源\"></a>指定Nuget 包源</h6><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定项目基于什么框架</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/aspnet:<span class=\"number\">5.0</span> AS base</span><br><span class=\"line\"><span class=\"comment\"># 更新apt-ger</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"comment\"># 设置包源</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot;</span> &gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian-security buster/updates main&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian-security buster/updates main&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list</span></span><br><span class=\"line\"><span class=\"comment\"># 安装库，此处是支持gdip</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\">  apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span></span><br><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># 指定端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 指定基于5.0生成</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:<span class=\"number\">5.0</span> AS build</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /src</span></span><br><span class=\"line\"><span class=\"comment\"># 此处复制相关项目的依赖，如果项目后期改动，会导致后期打包失败，项目目录根据实际情况来</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;</span>, <span class=\"string\">&quot;Property/ShuWen.Property/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Property/ShuWen.Property/nuget.config&quot;</span>, <span class=\"string\">&quot;Property/ShuWen.Property/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj&quot;</span>, <span class=\"string\">&quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj&quot;</span>, <span class=\"string\">&quot;src/WalkingTec.Mvvm.Core/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj&quot;</span>, <span class=\"string\">&quot;src/WalkingTec.Mvvm.Mvc/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Common/ShuWen.Common.csproj&quot;</span>, <span class=\"string\">&quot;Common/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj&quot;</span>, <span class=\"string\">&quot;ShuWen.Property.DataAccess/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;ShuWen.Property.Model/ShuWen.Property.Model.csproj&quot;</span>, <span class=\"string\">&quot;ShuWen.Property.Model/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj&quot;</span>, <span class=\"string\">&quot;Property/ShuWen.Property.ViewModel/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"comment\"># 此步跟启动vs项目前的生成或者第一次打开项目生成项目很像nuget包还原。实际也做得是nuget包还原。此处需要指定包源。我的包源写在nuget.config中</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet restore <span class=\"string\">&quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;</span>  --configfile <span class=\"string\">&quot;Property/ShuWen.Property/nuget.config&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"string\">&quot;Property/ShuWen.Property/&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"># 对项目进行打包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet build <span class=\"string\">&quot;ShuWen.Property.csproj&quot;</span> -c Release -o /app/build</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> build AS publish</span><br><span class=\"line\"><span class=\"comment\"># 发布项目</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet publish <span class=\"string\">&quot;ShuWen.Property.csproj&quot;</span> -c Release -o /app/publish</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> base AS final</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># 将项目复制到指定的文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=publish /app/publish .</span></span><br><span class=\"line\"><span class=\"comment\"># 运行项目</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;ShuWen.Property.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>nuget.config 内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packageSources</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;Nuget.org&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;https://api.nuget.org/v3/index.json&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;Baget&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;http://47.100.94.46:5555/v3/index.json&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">packageSources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mcr.microsoft.com/dotnet/sdk:5.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">mcr.microsoft.com/dotnet/sdk     5.0</span><br><span class=\"line\">mcr.microsoft.com/dotnet/aspnet  5.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建doccker配置文件\"><a href=\"#创建doccker配置文件\" class=\"headerlink\" title=\"创建doccker配置文件\"></a>创建doccker配置文件</h4><p><code>Visual Studio</code>右键项目创建<code>Docker</code>支持</p>\n<h4 id=\"打包项目镜像\"><a href=\"#打包项目镜像\" class=\"headerlink\" title=\"打包项目镜像\"></a>打包项目镜像</h4><ul>\n<li><p>使用Dockerfile打包镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当前文件夹打包镜像</span></span><br><span class=\"line\">docker build -t 镜像名称 .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当前文件夹使用指定文件打包镜像</span></span><br><span class=\"line\">docker build -f xxx/Dockerfile -t 镜像名称 .</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"构建容器\"><a href=\"#构建容器\" class=\"headerlink\" title=\"构建容器\"></a>构建容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name 容器名称 -p 2022:80 --restart=always 镜像名称</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><h5 id=\"System-Drawing-兼容问题\"><a href=\"#System-Drawing-兼容问题\" class=\"headerlink\" title=\"System.Drawing 兼容问题\"></a>System.Drawing 兼容问题</h5><h6 id=\"验证码不显示\"><a href=\"#验证码不显示\" class=\"headerlink\" title=\"验证码不显示\"></a>验证码不显示</h6><p>修改Dockerfile</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新包</span></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装apt-get 安装 libc6-dev , libgdiplus  用于支持system.drawing 组件绘制,默认ubuntu命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RUN apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置apt的资源，采用阿里云资源仓库 必须是debian 10 buster版本</span></span><br><span class=\"line\">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian-security buster/updates main&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span><br><span class=\"line\">   echo &quot;deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class=\"line\">RUN  apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Dockerfiled修改\"><a href=\"#Dockerfiled修改\" class=\"headerlink\" title=\"Dockerfiled修改\"></a>Dockerfiled修改</h5><blockquote>\n<p>当前项目后期我们进行的大范围改动，包括项目文件夹的移动、使用封装之后通用类库的Nuget包。</p>\n<p>过程中发我使用jenkins发现。无法使用原有dockerfile进行安装。我对dockerfile进行了修改。</p>\n</blockquote>\n<h6 id=\"文件路径修改\"><a href=\"#文件路径修改\" class=\"headerlink\" title=\"文件路径修改\"></a>文件路径修改</h6><p>见下面</p>\n<h6 id=\"指定Nuget-包源\"><a href=\"#指定Nuget-包源\" class=\"headerlink\" title=\"指定Nuget 包源\"></a>指定Nuget 包源</h6><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定项目基于什么框架</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/aspnet:<span class=\"number\">5.0</span> AS base</span><br><span class=\"line\"><span class=\"comment\"># 更新apt-ger</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"comment\"># 设置包源</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot;</span> &gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian-security buster/updates main&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian-security buster/updates main&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot;</span> &gt;&gt;/etc/apt/sources.list</span></span><br><span class=\"line\"><span class=\"comment\"># 安装库，此处是支持gdip</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\">  apt-get update &amp;&amp; apt-get install -y apt-utils libgdiplus libc6-dev</span></span><br><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># 指定端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 指定基于5.0生成</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:<span class=\"number\">5.0</span> AS build</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /src</span></span><br><span class=\"line\"><span class=\"comment\"># 此处复制相关项目的依赖，如果项目后期改动，会导致后期打包失败，项目目录根据实际情况来</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;</span>, <span class=\"string\">&quot;Property/ShuWen.Property/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Property/ShuWen.Property/nuget.config&quot;</span>, <span class=\"string\">&quot;Property/ShuWen.Property/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/WalkingTec.Mvvm.TagHelpers.LayUI.csproj&quot;</span>, <span class=\"string\">&quot;src/WalkingTec.Mvvm.TagHelpers.LayUI/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src/WalkingTec.Mvvm.Core/WalkingTec.Mvvm.Core.csproj&quot;</span>, <span class=\"string\">&quot;src/WalkingTec.Mvvm.Core/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src/WalkingTec.Mvvm.Mvc/WalkingTec.Mvvm.Mvc.csproj&quot;</span>, <span class=\"string\">&quot;src/WalkingTec.Mvvm.Mvc/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Common/ShuWen.Common.csproj&quot;</span>, <span class=\"string\">&quot;Common/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;ShuWen.Property.DataAccess/ShuWen.Property.DataAccess.csproj&quot;</span>, <span class=\"string\">&quot;ShuWen.Property.DataAccess/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;ShuWen.Property.Model/ShuWen.Property.Model.csproj&quot;</span>, <span class=\"string\">&quot;ShuWen.Property.Model/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;Property/ShuWen.Property.ViewModel/ShuWen.Property.ViewModel.csproj&quot;</span>, <span class=\"string\">&quot;Property/ShuWen.Property.ViewModel/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"comment\"># 此步跟启动vs项目前的生成或者第一次打开项目生成项目很像nuget包还原。实际也做得是nuget包还原。此处需要指定包源。我的包源写在nuget.config中</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet restore <span class=\"string\">&quot;Property/ShuWen.Property/ShuWen.Property.csproj&quot;</span>  --configfile <span class=\"string\">&quot;Property/ShuWen.Property/nuget.config&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"string\">&quot;Property/ShuWen.Property/&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"># 对项目进行打包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet build <span class=\"string\">&quot;ShuWen.Property.csproj&quot;</span> -c Release -o /app/build</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> build AS publish</span><br><span class=\"line\"><span class=\"comment\"># 发布项目</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet publish <span class=\"string\">&quot;ShuWen.Property.csproj&quot;</span> -c Release -o /app/publish</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> base AS final</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># 将项目复制到指定的文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=publish /app/publish .</span></span><br><span class=\"line\"><span class=\"comment\"># 运行项目</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;ShuWen.Property.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>nuget.config 内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packageSources</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;Nuget.org&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;https://api.nuget.org/v3/index.json&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;Baget&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;http://47.100.94.46:5555/v3/index.json&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">packageSources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"在docker中部署wtm","path":"2022/07/15/wtm/","eyeCatchImage":null,"excerpt":"本文说明了dotnet快速开发框架wtm如何在docker中部署，以及项目文件结构变化大之后Dockerfile应该如何更改，验证码无法显示、指定nuget源等问题具体解决办法。","date":{"_isAMomentObject":true,"_i":"2022-07-15T12:48:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-15T12:48:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","deploy","docker","wtm","linux验证码","gdip","System.Drawing 兼容问题"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtmcontext","author":"wuxinheng","date":"2022-08-24T14:19:47.000Z","description":"wtmcontext介绍","_content":"WTMContext.cs做了什么\n\n1. 在`FrameworkServiceExtension.cs`\n\n   1. 拓展方法`AddWtmContext` \n\n      1. 使用委托初始化`WtmContextOption`\n      2. 使用`WtmContextOption`对象给系统变量赋值\n      3. 使用`AddScoped`注入`WTMContext`\n\n   2. 拓展方法`UseWtmContext`\n\n      1. 获取了系统加载运行的基本对象，包括：\n\n         1. 配置信息`IOptionsMonitor<Configs>`\n\n         2. 链接生成器`LinkGenerator`\n\n         3. 全局变量`GlobalData`\n\n         4. 所有程序集`List<Assembly>`，拿到程序集很多东西通过反射可以拿到更多的东西\n\n            1. 通过程序集获取所有的的类，判断类是否实现`IBaseController`接口并且不是抽象类，从而获取所有的控制器。\n\n            2. 通过现有的的控制器对特性进行筛分\n\n            3. 然后筛选出用户可以访问的`urls`\n\n            4. 获取现在的用户类\n\n            5. 初始化菜单\n\n            6. 初始化文件操作\n\n               ","source":"_posts/wtmcontext.md","raw":"---\ntitle: wtmcontext\nauthor: wuxinheng\ndate: 2022-08-24 22:19:47\ndescription: wtmcontext介绍\ntags:\n- efcore\n- saas\n- 多租户\n- dotnet\n- wtm\ncategories:\n- dotnet\n---\nWTMContext.cs做了什么\n\n1. 在`FrameworkServiceExtension.cs`\n\n   1. 拓展方法`AddWtmContext` \n\n      1. 使用委托初始化`WtmContextOption`\n      2. 使用`WtmContextOption`对象给系统变量赋值\n      3. 使用`AddScoped`注入`WTMContext`\n\n   2. 拓展方法`UseWtmContext`\n\n      1. 获取了系统加载运行的基本对象，包括：\n\n         1. 配置信息`IOptionsMonitor<Configs>`\n\n         2. 链接生成器`LinkGenerator`\n\n         3. 全局变量`GlobalData`\n\n         4. 所有程序集`List<Assembly>`，拿到程序集很多东西通过反射可以拿到更多的东西\n\n            1. 通过程序集获取所有的的类，判断类是否实现`IBaseController`接口并且不是抽象类，从而获取所有的控制器。\n\n            2. 通过现有的的控制器对特性进行筛分\n\n            3. 然后筛选出用户可以访问的`urls`\n\n            4. 获取现在的用户类\n\n            5. 初始化菜单\n\n            6. 初始化文件操作\n\n               ","slug":"wtmcontext","published":1,"updated":"2023-09-24T07:38:31.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhu002towtkbgzuheeo","content":"<p>WTMContext.cs做了什么</p>\n<ol>\n<li><p>在<code>FrameworkServiceExtension.cs</code></p>\n<ol>\n<li><p>拓展方法<code>AddWtmContext</code> </p>\n<ol>\n<li>使用委托初始化<code>WtmContextOption</code></li>\n<li>使用<code>WtmContextOption</code>对象给系统变量赋值</li>\n<li>使用<code>AddScoped</code>注入<code>WTMContext</code></li>\n</ol>\n</li>\n<li><p>拓展方法<code>UseWtmContext</code></p>\n<ol>\n<li><p>获取了系统加载运行的基本对象，包括：</p>\n<ol>\n<li><p>配置信息<code>IOptionsMonitor&lt;Configs&gt;</code></p>\n</li>\n<li><p>链接生成器<code>LinkGenerator</code></p>\n</li>\n<li><p>全局变量<code>GlobalData</code></p>\n</li>\n<li><p>所有程序集<code>List&lt;Assembly&gt;</code>，拿到程序集很多东西通过反射可以拿到更多的东西</p>\n<ol>\n<li><p>通过程序集获取所有的的类，判断类是否实现<code>IBaseController</code>接口并且不是抽象类，从而获取所有的控制器。</p>\n</li>\n<li><p>通过现有的的控制器对特性进行筛分</p>\n</li>\n<li><p>然后筛选出用户可以访问的<code>urls</code></p>\n</li>\n<li><p>获取现在的用户类</p>\n</li>\n<li><p>初始化菜单</p>\n</li>\n<li><p>初始化文件操作</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>WTMContext.cs做了什么</p>\n<ol>\n<li><p>在<code>FrameworkServiceExtension.cs</code></p>\n<ol>\n<li><p>拓展方法<code>AddWtmContext</code> </p>\n<ol>\n<li>使用委托初始化<code>WtmContextOption</code></li>\n<li>使用<code>WtmContextOption</code>对象给系统变量赋值</li>\n<li>使用<code>AddScoped</code>注入<code>WTMContext</code></li>\n</ol>\n</li>\n<li><p>拓展方法<code>UseWtmContext</code></p>\n<ol>\n<li><p>获取了系统加载运行的基本对象，包括：</p>\n<ol>\n<li><p>配置信息<code>IOptionsMonitor&lt;Configs&gt;</code></p>\n</li>\n<li><p>链接生成器<code>LinkGenerator</code></p>\n</li>\n<li><p>全局变量<code>GlobalData</code></p>\n</li>\n<li><p>所有程序集<code>List&lt;Assembly&gt;</code>，拿到程序集很多东西通过反射可以拿到更多的东西</p>\n<ol>\n<li><p>通过程序集获取所有的的类，判断类是否实现<code>IBaseController</code>接口并且不是抽象类，从而获取所有的控制器。</p>\n</li>\n<li><p>通过现有的的控制器对特性进行筛分</p>\n</li>\n<li><p>然后筛选出用户可以访问的<code>urls</code></p>\n</li>\n<li><p>获取现在的用户类</p>\n</li>\n<li><p>初始化菜单</p>\n</li>\n<li><p>初始化文件操作</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtmcontext","path":"2022/08/24/wtmcontext/","eyeCatchImage":null,"excerpt":"wtmcontext介绍","date":{"_isAMomentObject":true,"_i":"2022-08-24T14:19:47.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T14:19:47.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","wtm","efcore","saas","多租户"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtm多租户实现_增删改","author":"wuxinheng","description":"EF实现多租户操作数据填充","date":"2022-07-22T14:54:54.000Z","_content":"wtm源码解读_3.md 中数据补充有些其他问题。就是写代码的人不遵守wtm的原则来写可能会逃避掉数据补充方法。\n我们这里处理的方式可能粗暴点，直接重写datacontext中SaveChanges()\n\n```C#\npublic override int SaveChanges()\n{\n    // 多端数据过滤判断\n    if (!string.IsNullOrEmpty(TenantCode) && TenantCode != \"0\")\n        UpdateTenantCode();\n\n    return base.SaveChanges();\n}\n\npublic override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))\n{\n    //多端数据过滤判断\n    if (!string.IsNullOrEmpty(TenantCode) && TenantCode != \"0\")\n        UpdateTenantCode();\n\n    return await base.SaveChangesAsync(cancellationToken);\n}\nprivate void UpdateTenantCode()\n{\n\n    // 获取所有新增、更新、删除的实体\n    var entities = ChangeTracker.Entries().Where(u => u.State == EntityState.Added || u.State == EntityState.Modified || u.State == EntityState.Deleted);\n\n    foreach (var entity in entities)\n    {\n        if (typeof(IHasTentant).IsAssignableFrom(entity.Entity.GetType())\n            && string.IsNullOrEmpty((entity.Entity as IHasTentant).TenantCode))\n        {\n            switch (entity.State)\n            {\n                // 自动设置租户Id\n                case EntityState.Added:\n                    entity.Property(nameof(IHasTentant.TenantCode)).CurrentValue = TenantCode;\n                    break;\n                // 排除租户Id\n                case EntityState.Modified:\n                    entity.Property(nameof(IHasTentant.TenantCode)).IsModified = false;\n                    break;\n                // 删除处理\n                case EntityState.Deleted:\n                    break;\n            }\n        }\n    }\n}\n```","source":"_posts/wtm多租户实现-增删改.md","raw":"---\ntitle: wtm多租户实现_增删改\nauthor: wuxinheng\ndescription: EF实现多租户操作数据填充\ntags:\n  - efcore\n  - saas\n  - 多租户\n  - EF数据过滤\n  - dotnet\n  - wtm\ncategories:\n  - dotnet\ndate: 2022-07-22 22:54:54\n---\nwtm源码解读_3.md 中数据补充有些其他问题。就是写代码的人不遵守wtm的原则来写可能会逃避掉数据补充方法。\n我们这里处理的方式可能粗暴点，直接重写datacontext中SaveChanges()\n\n```C#\npublic override int SaveChanges()\n{\n    // 多端数据过滤判断\n    if (!string.IsNullOrEmpty(TenantCode) && TenantCode != \"0\")\n        UpdateTenantCode();\n\n    return base.SaveChanges();\n}\n\npublic override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))\n{\n    //多端数据过滤判断\n    if (!string.IsNullOrEmpty(TenantCode) && TenantCode != \"0\")\n        UpdateTenantCode();\n\n    return await base.SaveChangesAsync(cancellationToken);\n}\nprivate void UpdateTenantCode()\n{\n\n    // 获取所有新增、更新、删除的实体\n    var entities = ChangeTracker.Entries().Where(u => u.State == EntityState.Added || u.State == EntityState.Modified || u.State == EntityState.Deleted);\n\n    foreach (var entity in entities)\n    {\n        if (typeof(IHasTentant).IsAssignableFrom(entity.Entity.GetType())\n            && string.IsNullOrEmpty((entity.Entity as IHasTentant).TenantCode))\n        {\n            switch (entity.State)\n            {\n                // 自动设置租户Id\n                case EntityState.Added:\n                    entity.Property(nameof(IHasTentant.TenantCode)).CurrentValue = TenantCode;\n                    break;\n                // 排除租户Id\n                case EntityState.Modified:\n                    entity.Property(nameof(IHasTentant.TenantCode)).IsModified = false;\n                    break;\n                // 删除处理\n                case EntityState.Deleted:\n                    break;\n            }\n        }\n    }\n}\n```","slug":"wtm多租户实现-增删改","published":1,"updated":"2023-09-24T07:38:31.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhu002xowtkfl0881qd","content":"<p>wtm源码解读_3.md 中数据补充有些其他问题。就是写代码的人不遵守wtm的原则来写可能会逃避掉数据补充方法。<br>我们这里处理的方式可能粗暴点，直接重写datacontext中SaveChanges()</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">int</span> <span class=\"title\">SaveChanges</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 多端数据过滤判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(TenantCode) &amp;&amp; TenantCode != <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">        UpdateTenantCode();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.SaveChanges();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">SaveChangesAsync</span>(<span class=\"params\">CancellationToken cancellationToken = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//多端数据过滤判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(TenantCode) &amp;&amp; TenantCode != <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">        UpdateTenantCode();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.SaveChangesAsync(cancellationToken);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateTenantCode</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取所有新增、更新、删除的实体</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> entities = ChangeTracker.Entries().Where(u =&gt; u.State == EntityState.Added || u.State == EntityState.Modified || u.State == EntityState.Deleted);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> entity <span class=\"keyword\">in</span> entities)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(entity.Entity.GetType())</span><br><span class=\"line\">            &amp;&amp; <span class=\"built_in\">string</span>.IsNullOrEmpty((entity.Entity <span class=\"keyword\">as</span> IHasTentant).TenantCode))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (entity.State)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 自动设置租户Id</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> EntityState.Added:</span><br><span class=\"line\">                    entity.Property(<span class=\"keyword\">nameof</span>(IHasTentant.TenantCode)).CurrentValue = TenantCode;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 排除租户Id</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> EntityState.Modified:</span><br><span class=\"line\">                    entity.Property(<span class=\"keyword\">nameof</span>(IHasTentant.TenantCode)).IsModified = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 删除处理</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> EntityState.Deleted:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>wtm源码解读_3.md 中数据补充有些其他问题。就是写代码的人不遵守wtm的原则来写可能会逃避掉数据补充方法。<br>我们这里处理的方式可能粗暴点，直接重写datacontext中SaveChanges()</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">int</span> <span class=\"title\">SaveChanges</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 多端数据过滤判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(TenantCode) &amp;&amp; TenantCode != <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">        UpdateTenantCode();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.SaveChanges();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">SaveChangesAsync</span>(<span class=\"params\">CancellationToken cancellationToken = <span class=\"literal\">default</span>(CancellationToken</span>))</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//多端数据过滤判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(TenantCode) &amp;&amp; TenantCode != <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">        UpdateTenantCode();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.SaveChangesAsync(cancellationToken);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateTenantCode</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取所有新增、更新、删除的实体</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> entities = ChangeTracker.Entries().Where(u =&gt; u.State == EntityState.Added || u.State == EntityState.Modified || u.State == EntityState.Deleted);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> entity <span class=\"keyword\">in</span> entities)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(entity.Entity.GetType())</span><br><span class=\"line\">            &amp;&amp; <span class=\"built_in\">string</span>.IsNullOrEmpty((entity.Entity <span class=\"keyword\">as</span> IHasTentant).TenantCode))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (entity.State)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 自动设置租户Id</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> EntityState.Added:</span><br><span class=\"line\">                    entity.Property(<span class=\"keyword\">nameof</span>(IHasTentant.TenantCode)).CurrentValue = TenantCode;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 排除租户Id</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> EntityState.Modified:</span><br><span class=\"line\">                    entity.Property(<span class=\"keyword\">nameof</span>(IHasTentant.TenantCode)).IsModified = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 删除处理</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> EntityState.Deleted:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtm多租户实现_增删改","path":"2022/07/22/wtm多租户实现-增删改/","eyeCatchImage":null,"excerpt":"EF实现多租户操作数据填充","date":{"_isAMomentObject":true,"_i":"2022-07-22T14:54:54.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-22T14:54:54.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","wtm","efcore","saas","多租户","EF数据过滤"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtm多租户实现_查询","author":"wuxinheng","description":"EF实现多租户查询过滤","date":"2022-07-22T14:54:39.000Z","_content":"感谢：[说都不会话了(sharding-core作者)](https://github.com/dotnetcore/sharding-core)\n参考：[![返回主页](https://www.cnblogs.com/skins/custom/images/logo.gif)](https://www.cnblogs.com/clis/)[芦荟柚子茶](https://www.cnblogs.com/clis/p/16501586.html)\n\n> 准确来说是EF的全局过滤器使用\n\n一直以来我是错的。DataContext的OnModelCreating其实是在初始化的时候执行。我还以为我每次调用db都会执行，唉~\nTenantCode获取请看wtm源码解读1、2\n\n```C#\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            // 基本注册\n            //builder.Entity<TestDelete>().HasQueryFilter(e => !e.IsDeleted);\n            \n            // 获取model中的类获取程序集，因为model跟datacontext不在一个文件夹下\n            Assembly assembly = typeof(AuditLog).Assembly;\n            // 通过model获取所有的实体类，并进行过滤\n            List<Type> entityTypes = assembly.GetTypes()\n                .Where(t => t.IsSubclassOf(typeof(BasePoco)) && !t.IsAbstract)\n                .ToList();\n\n            // 获取ConfigureFilters方法\n            MethodInfo? configureFilters = typeof(DataContext).GetMethod(\n                nameof(ConfigureFilters),\n                BindingFlags.Instance | BindingFlags.NonPublic\n            );\n\n            if (configureFilters == null) throw new ArgumentNullException(nameof(configureFilters));\n            // 循环注册\n            foreach (var entityType in entityTypes)\n            {\n                // 注册实体\n                modelBuilder.Entity(entityType);\n\n                // 注册筛选器\n                configureFilters\n                    .MakeGenericMethod(entityType)\n                    .Invoke(this, new object[] { modelBuilder, entityType });\n            }\n        }\n// 控制对象的是否忽略过滤，这句应该放在FrameworkContext中或者等级更高的基类中。\npublic bool IgnoreDeleteFilter { get; set; } = false;\n\n// 拼接表达式对象，进行注册筛选器。\nprotected virtual void ConfigureFilters<TEntity>(ModelBuilder builder, Type entityType)\n           where TEntity : class\n        {\n            // 剩下的是表达式树，我跟芦荟柚子茶一样，不太了解不敢乱说\n            // 重要的概念是@说都不会话了 跟我说的关键信息：\n            // 1.expression是延迟计算的\n            // 2.e只要expression用了局部变量\n            // 3.每次执行sql的时候局部变量是重新计算的\n            // 表达式短路（第一次听别人说。还是得跟大佬多接触，新奇）\n            // 在这还是非常感谢@说都不会话了\n            Expression<Func<TEntity, bool>>? expression = null;\n\n            if (typeof(IPersistPoco).IsAssignableFrom(entityType))\n            {\n                // 表达式短路\n                expression = e => IgnoreDeleteFilter || EF.Property<bool>(e, \"IsValid\");\n            }\n\n            if (typeof(IHasTentant).IsAssignableFrom(entityType))\n            {\n                // 表达式短路\n                Expression<Func<TEntity, bool>> tenantExpression = e =>IgnoreDeleteFilter || EF.Property<string>(e, \"TenantCode\") == TenantCode;\n                expression = expression == null ? tenantExpression : CombineExpressions(expression, tenantExpression);\n            }\n\n            if (expression == null) return;\n\n            builder.Entity<TEntity>().HasQueryFilter(expression);\n        }\n\nprotected virtual Expression<Func<T, bool>> CombineExpressions<T>(Expression<Func<T, bool>> expression1, Expression<Func<T, bool>> expression2)\n        {\n            var parameter = Expression.Parameter(typeof(T));\n\n            var leftVisitor = new ReplaceExpressionVisitor(expression1.Parameters[0], parameter);\n            var left = leftVisitor.Visit(expression1.Body);\n\n            var rightVisitor = new ReplaceExpressionVisitor(expression2.Parameters[0], parameter);\n            var right = rightVisitor.Visit(expression2.Body);\n\n            return Expression.Lambda<Func<T, bool>>(Expression.AndAlso(left, right), parameter);\n        }\nclass ReplaceExpressionVisitor : ExpressionVisitor\n{\n    private readonly Expression _oldValue;\n    private readonly Expression _newValue;\n\n    public ReplaceExpressionVisitor(Expression oldValue, Expression newValue)\n    {\n        _oldValue = oldValue;\n        _newValue = newValue;\n    }\n\n    public override Expression Visit(Expression? node)\n    {\n        if (node == _oldValue)\n        {\n            return _newValue;\n        }\n\n        return base.Visit(node)!;\n    }\n}\n```\n\n表达式短路,有意思\n\n```sql\nwhere 1=1 or tenant_id='123' 租户id不会生效\nwhere 1=2 or tenant_id='123' 租户id会生效\n--这里其实是通过IgnoreDeleteFilter来进行短路操作，默认为false sql：\n--false\nselect id,name,IsValid,TenantCode where (false or IsValid=1) and  (false or TenantCode=1)\n--true \nselect id,name,IsValid,TenantCode where (true or IsValid=1) and  (true or TenantCode=1)\n```\n\n","source":"_posts/wtm多租户实现-查询.md","raw":"---\ntitle: wtm多租户实现_查询\nauthor: wuxinheng\ndescription: EF实现多租户查询过滤\ntags:\n  - efcore\n  - saas\n  - 多租户\n  - EF数据过滤\n  - dotnet\n  - wtm\ncategories:\n  - dotnet\ndate: 2022-07-22 22:54:39\n---\n感谢：[说都不会话了(sharding-core作者)](https://github.com/dotnetcore/sharding-core)\n参考：[![返回主页](https://www.cnblogs.com/skins/custom/images/logo.gif)](https://www.cnblogs.com/clis/)[芦荟柚子茶](https://www.cnblogs.com/clis/p/16501586.html)\n\n> 准确来说是EF的全局过滤器使用\n\n一直以来我是错的。DataContext的OnModelCreating其实是在初始化的时候执行。我还以为我每次调用db都会执行，唉~\nTenantCode获取请看wtm源码解读1、2\n\n```C#\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            // 基本注册\n            //builder.Entity<TestDelete>().HasQueryFilter(e => !e.IsDeleted);\n            \n            // 获取model中的类获取程序集，因为model跟datacontext不在一个文件夹下\n            Assembly assembly = typeof(AuditLog).Assembly;\n            // 通过model获取所有的实体类，并进行过滤\n            List<Type> entityTypes = assembly.GetTypes()\n                .Where(t => t.IsSubclassOf(typeof(BasePoco)) && !t.IsAbstract)\n                .ToList();\n\n            // 获取ConfigureFilters方法\n            MethodInfo? configureFilters = typeof(DataContext).GetMethod(\n                nameof(ConfigureFilters),\n                BindingFlags.Instance | BindingFlags.NonPublic\n            );\n\n            if (configureFilters == null) throw new ArgumentNullException(nameof(configureFilters));\n            // 循环注册\n            foreach (var entityType in entityTypes)\n            {\n                // 注册实体\n                modelBuilder.Entity(entityType);\n\n                // 注册筛选器\n                configureFilters\n                    .MakeGenericMethod(entityType)\n                    .Invoke(this, new object[] { modelBuilder, entityType });\n            }\n        }\n// 控制对象的是否忽略过滤，这句应该放在FrameworkContext中或者等级更高的基类中。\npublic bool IgnoreDeleteFilter { get; set; } = false;\n\n// 拼接表达式对象，进行注册筛选器。\nprotected virtual void ConfigureFilters<TEntity>(ModelBuilder builder, Type entityType)\n           where TEntity : class\n        {\n            // 剩下的是表达式树，我跟芦荟柚子茶一样，不太了解不敢乱说\n            // 重要的概念是@说都不会话了 跟我说的关键信息：\n            // 1.expression是延迟计算的\n            // 2.e只要expression用了局部变量\n            // 3.每次执行sql的时候局部变量是重新计算的\n            // 表达式短路（第一次听别人说。还是得跟大佬多接触，新奇）\n            // 在这还是非常感谢@说都不会话了\n            Expression<Func<TEntity, bool>>? expression = null;\n\n            if (typeof(IPersistPoco).IsAssignableFrom(entityType))\n            {\n                // 表达式短路\n                expression = e => IgnoreDeleteFilter || EF.Property<bool>(e, \"IsValid\");\n            }\n\n            if (typeof(IHasTentant).IsAssignableFrom(entityType))\n            {\n                // 表达式短路\n                Expression<Func<TEntity, bool>> tenantExpression = e =>IgnoreDeleteFilter || EF.Property<string>(e, \"TenantCode\") == TenantCode;\n                expression = expression == null ? tenantExpression : CombineExpressions(expression, tenantExpression);\n            }\n\n            if (expression == null) return;\n\n            builder.Entity<TEntity>().HasQueryFilter(expression);\n        }\n\nprotected virtual Expression<Func<T, bool>> CombineExpressions<T>(Expression<Func<T, bool>> expression1, Expression<Func<T, bool>> expression2)\n        {\n            var parameter = Expression.Parameter(typeof(T));\n\n            var leftVisitor = new ReplaceExpressionVisitor(expression1.Parameters[0], parameter);\n            var left = leftVisitor.Visit(expression1.Body);\n\n            var rightVisitor = new ReplaceExpressionVisitor(expression2.Parameters[0], parameter);\n            var right = rightVisitor.Visit(expression2.Body);\n\n            return Expression.Lambda<Func<T, bool>>(Expression.AndAlso(left, right), parameter);\n        }\nclass ReplaceExpressionVisitor : ExpressionVisitor\n{\n    private readonly Expression _oldValue;\n    private readonly Expression _newValue;\n\n    public ReplaceExpressionVisitor(Expression oldValue, Expression newValue)\n    {\n        _oldValue = oldValue;\n        _newValue = newValue;\n    }\n\n    public override Expression Visit(Expression? node)\n    {\n        if (node == _oldValue)\n        {\n            return _newValue;\n        }\n\n        return base.Visit(node)!;\n    }\n}\n```\n\n表达式短路,有意思\n\n```sql\nwhere 1=1 or tenant_id='123' 租户id不会生效\nwhere 1=2 or tenant_id='123' 租户id会生效\n--这里其实是通过IgnoreDeleteFilter来进行短路操作，默认为false sql：\n--false\nselect id,name,IsValid,TenantCode where (false or IsValid=1) and  (false or TenantCode=1)\n--true \nselect id,name,IsValid,TenantCode where (true or IsValid=1) and  (true or TenantCode=1)\n```\n\n","slug":"wtm多租户实现-查询","published":1,"updated":"2023-09-24T07:38:31.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhv0030owtkbdj0c6ja","content":"<p>感谢：<a href=\"https://github.com/dotnetcore/sharding-core\">说都不会话了(sharding-core作者)</a><br>参考：<a href=\"https://www.cnblogs.com/clis/\"><img src=\"https://www.cnblogs.com/skins/custom/images/logo.gif\" alt=\"返回主页\"></a><a href=\"https://www.cnblogs.com/clis/p/16501586.html\">芦荟柚子茶</a></p>\n<blockquote>\n<p>准确来说是EF的全局过滤器使用</p>\n</blockquote>\n<p>一直以来我是错的。DataContext的OnModelCreating其实是在初始化的时候执行。我还以为我每次调用db都会执行，唉~<br>TenantCode获取请看wtm源码解读1、2</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder modelBuilder</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 基本注册</span></span><br><span class=\"line\">            <span class=\"comment\">//builder.Entity&lt;TestDelete&gt;().HasQueryFilter(e =&gt; !e.IsDeleted);</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 获取model中的类获取程序集，因为model跟datacontext不在一个文件夹下</span></span><br><span class=\"line\">            Assembly assembly = <span class=\"keyword\">typeof</span>(AuditLog).Assembly;</span><br><span class=\"line\">            <span class=\"comment\">// 通过model获取所有的实体类，并进行过滤</span></span><br><span class=\"line\">            List&lt;Type&gt; entityTypes = assembly.GetTypes()</span><br><span class=\"line\">                .Where(t =&gt; t.IsSubclassOf(<span class=\"keyword\">typeof</span>(BasePoco)) &amp;&amp; !t.IsAbstract)</span><br><span class=\"line\">                .ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取ConfigureFilters方法</span></span><br><span class=\"line\">            MethodInfo? configureFilters = <span class=\"keyword\">typeof</span>(DataContext).GetMethod(</span><br><span class=\"line\">                <span class=\"keyword\">nameof</span>(ConfigureFilters),</span><br><span class=\"line\">                BindingFlags.Instance | BindingFlags.NonPublic</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (configureFilters == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(configureFilters));</span><br><span class=\"line\">            <span class=\"comment\">// 循环注册</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> entityType <span class=\"keyword\">in</span> entityTypes)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 注册实体</span></span><br><span class=\"line\">                modelBuilder.Entity(entityType);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 注册筛选器</span></span><br><span class=\"line\">                configureFilters</span><br><span class=\"line\">                    .MakeGenericMethod(entityType)</span><br><span class=\"line\">                    .Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>[] &#123; modelBuilder, entityType &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">// 控制对象的是否忽略过滤，这句应该放在FrameworkContext中或者等级更高的基类中。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> IgnoreDeleteFilter &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接表达式对象，进行注册筛选器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureFilters</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">ModelBuilder builder, Type entityType</span>)</span></span><br><span class=\"line\"><span class=\"function\">           <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 剩下的是表达式树，我跟芦荟柚子茶一样，不太了解不敢乱说</span></span><br><span class=\"line\">            <span class=\"comment\">// 重要的概念是@说都不会话了 跟我说的关键信息：</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.expression是延迟计算的</span></span><br><span class=\"line\">            <span class=\"comment\">// 2.e只要expression用了局部变量</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.每次执行sql的时候局部变量是重新计算的</span></span><br><span class=\"line\">            <span class=\"comment\">// 表达式短路（第一次听别人说。还是得跟大佬多接触，新奇）</span></span><br><span class=\"line\">            <span class=\"comment\">// 在这还是非常感谢@说都不会话了</span></span><br><span class=\"line\">            Expression&lt;Func&lt;TEntity, <span class=\"built_in\">bool</span>&gt;&gt;? expression = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IPersistPoco).IsAssignableFrom(entityType))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 表达式短路</span></span><br><span class=\"line\">                expression = e =&gt; IgnoreDeleteFilter || EF.Property&lt;<span class=\"built_in\">bool</span>&gt;(e, <span class=\"string\">&quot;IsValid&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(entityType))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 表达式短路</span></span><br><span class=\"line\">                Expression&lt;Func&lt;TEntity, <span class=\"built_in\">bool</span>&gt;&gt; tenantExpression = e =&gt;IgnoreDeleteFilter || EF.Property&lt;<span class=\"built_in\">string</span>&gt;(e, <span class=\"string\">&quot;TenantCode&quot;</span>) == TenantCode;</span><br><span class=\"line\">                expression = expression == <span class=\"literal\">null</span> ? tenantExpression : CombineExpressions(expression, tenantExpression);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expression == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.Entity&lt;TEntity&gt;().HasQueryFilter(expression);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"title\">Expression</span>&lt;<span class=\"title\">Func</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">bool</span>&gt;&gt; <span class=\"title\">CombineExpressions</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression1, Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression2</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parameter = Expression.Parameter(<span class=\"keyword\">typeof</span>(T));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> leftVisitor = <span class=\"keyword\">new</span> ReplaceExpressionVisitor(expression1.Parameters[<span class=\"number\">0</span>], parameter);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> left = leftVisitor.Visit(expression1.Body);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> rightVisitor = <span class=\"keyword\">new</span> ReplaceExpressionVisitor(expression2.Parameters[<span class=\"number\">0</span>], parameter);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> right = rightVisitor.Visit(expression2.Body);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Expression.Lambda&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt;(Expression.AndAlso(left, right), parameter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceExpressionVisitor</span> : <span class=\"title\">ExpressionVisitor</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Expression _oldValue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Expression _newValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReplaceExpressionVisitor</span>(<span class=\"params\">Expression oldValue, Expression newValue</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _oldValue = oldValue;</span><br><span class=\"line\">        _newValue = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Expression <span class=\"title\">Visit</span>(<span class=\"params\">Expression? node</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == _oldValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _newValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.Visit(node)!;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表达式短路,有意思</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">or</span> tenant_id<span class=\"operator\">=</span><span class=\"string\">&#x27;123&#x27;</span> 租户id不会生效</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">or</span> tenant_id<span class=\"operator\">=</span><span class=\"string\">&#x27;123&#x27;</span> 租户id会生效</span><br><span class=\"line\"><span class=\"comment\">--这里其实是通过IgnoreDeleteFilter来进行短路操作，默认为false sql：</span></span><br><span class=\"line\"><span class=\"comment\">--false</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,IsValid,TenantCode <span class=\"keyword\">where</span> (<span class=\"literal\">false</span> <span class=\"keyword\">or</span> IsValid<span class=\"operator\">=</span><span class=\"number\">1</span>) <span class=\"keyword\">and</span>  (<span class=\"literal\">false</span> <span class=\"keyword\">or</span> TenantCode<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">--true </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,IsValid,TenantCode <span class=\"keyword\">where</span> (<span class=\"literal\">true</span> <span class=\"keyword\">or</span> IsValid<span class=\"operator\">=</span><span class=\"number\">1</span>) <span class=\"keyword\">and</span>  (<span class=\"literal\">true</span> <span class=\"keyword\">or</span> TenantCode<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>感谢：<a href=\"https://github.com/dotnetcore/sharding-core\">说都不会话了(sharding-core作者)</a><br>参考：<a href=\"https://www.cnblogs.com/clis/\"><img src=\"https://www.cnblogs.com/skins/custom/images/logo.gif\" alt=\"返回主页\"></a><a href=\"https://www.cnblogs.com/clis/p/16501586.html\">芦荟柚子茶</a></p>\n<blockquote>\n<p>准确来说是EF的全局过滤器使用</p>\n</blockquote>\n<p>一直以来我是错的。DataContext的OnModelCreating其实是在初始化的时候执行。我还以为我每次调用db都会执行，唉~<br>TenantCode获取请看wtm源码解读1、2</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder modelBuilder</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 基本注册</span></span><br><span class=\"line\">            <span class=\"comment\">//builder.Entity&lt;TestDelete&gt;().HasQueryFilter(e =&gt; !e.IsDeleted);</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 获取model中的类获取程序集，因为model跟datacontext不在一个文件夹下</span></span><br><span class=\"line\">            Assembly assembly = <span class=\"keyword\">typeof</span>(AuditLog).Assembly;</span><br><span class=\"line\">            <span class=\"comment\">// 通过model获取所有的实体类，并进行过滤</span></span><br><span class=\"line\">            List&lt;Type&gt; entityTypes = assembly.GetTypes()</span><br><span class=\"line\">                .Where(t =&gt; t.IsSubclassOf(<span class=\"keyword\">typeof</span>(BasePoco)) &amp;&amp; !t.IsAbstract)</span><br><span class=\"line\">                .ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取ConfigureFilters方法</span></span><br><span class=\"line\">            MethodInfo? configureFilters = <span class=\"keyword\">typeof</span>(DataContext).GetMethod(</span><br><span class=\"line\">                <span class=\"keyword\">nameof</span>(ConfigureFilters),</span><br><span class=\"line\">                BindingFlags.Instance | BindingFlags.NonPublic</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (configureFilters == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(configureFilters));</span><br><span class=\"line\">            <span class=\"comment\">// 循环注册</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> entityType <span class=\"keyword\">in</span> entityTypes)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 注册实体</span></span><br><span class=\"line\">                modelBuilder.Entity(entityType);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 注册筛选器</span></span><br><span class=\"line\">                configureFilters</span><br><span class=\"line\">                    .MakeGenericMethod(entityType)</span><br><span class=\"line\">                    .Invoke(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>[] &#123; modelBuilder, entityType &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">// 控制对象的是否忽略过滤，这句应该放在FrameworkContext中或者等级更高的基类中。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> IgnoreDeleteFilter &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接表达式对象，进行注册筛选器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureFilters</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\">ModelBuilder builder, Type entityType</span>)</span></span><br><span class=\"line\"><span class=\"function\">           <span class=\"keyword\">where</span> TEntity : <span class=\"keyword\">class</span></span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 剩下的是表达式树，我跟芦荟柚子茶一样，不太了解不敢乱说</span></span><br><span class=\"line\">            <span class=\"comment\">// 重要的概念是@说都不会话了 跟我说的关键信息：</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.expression是延迟计算的</span></span><br><span class=\"line\">            <span class=\"comment\">// 2.e只要expression用了局部变量</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.每次执行sql的时候局部变量是重新计算的</span></span><br><span class=\"line\">            <span class=\"comment\">// 表达式短路（第一次听别人说。还是得跟大佬多接触，新奇）</span></span><br><span class=\"line\">            <span class=\"comment\">// 在这还是非常感谢@说都不会话了</span></span><br><span class=\"line\">            Expression&lt;Func&lt;TEntity, <span class=\"built_in\">bool</span>&gt;&gt;? expression = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IPersistPoco).IsAssignableFrom(entityType))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 表达式短路</span></span><br><span class=\"line\">                expression = e =&gt; IgnoreDeleteFilter || EF.Property&lt;<span class=\"built_in\">bool</span>&gt;(e, <span class=\"string\">&quot;IsValid&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(entityType))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 表达式短路</span></span><br><span class=\"line\">                Expression&lt;Func&lt;TEntity, <span class=\"built_in\">bool</span>&gt;&gt; tenantExpression = e =&gt;IgnoreDeleteFilter || EF.Property&lt;<span class=\"built_in\">string</span>&gt;(e, <span class=\"string\">&quot;TenantCode&quot;</span>) == TenantCode;</span><br><span class=\"line\">                expression = expression == <span class=\"literal\">null</span> ? tenantExpression : CombineExpressions(expression, tenantExpression);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expression == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.Entity&lt;TEntity&gt;().HasQueryFilter(expression);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"title\">Expression</span>&lt;<span class=\"title\">Func</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">bool</span>&gt;&gt; <span class=\"title\">CombineExpressions</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression1, Expression&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt; expression2</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parameter = Expression.Parameter(<span class=\"keyword\">typeof</span>(T));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> leftVisitor = <span class=\"keyword\">new</span> ReplaceExpressionVisitor(expression1.Parameters[<span class=\"number\">0</span>], parameter);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> left = leftVisitor.Visit(expression1.Body);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> rightVisitor = <span class=\"keyword\">new</span> ReplaceExpressionVisitor(expression2.Parameters[<span class=\"number\">0</span>], parameter);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> right = rightVisitor.Visit(expression2.Body);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Expression.Lambda&lt;Func&lt;T, <span class=\"built_in\">bool</span>&gt;&gt;(Expression.AndAlso(left, right), parameter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceExpressionVisitor</span> : <span class=\"title\">ExpressionVisitor</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Expression _oldValue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Expression _newValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReplaceExpressionVisitor</span>(<span class=\"params\">Expression oldValue, Expression newValue</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _oldValue = oldValue;</span><br><span class=\"line\">        _newValue = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Expression <span class=\"title\">Visit</span>(<span class=\"params\">Expression? node</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == _oldValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _newValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.Visit(node)!;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表达式短路,有意思</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">or</span> tenant_id<span class=\"operator\">=</span><span class=\"string\">&#x27;123&#x27;</span> 租户id不会生效</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">or</span> tenant_id<span class=\"operator\">=</span><span class=\"string\">&#x27;123&#x27;</span> 租户id会生效</span><br><span class=\"line\"><span class=\"comment\">--这里其实是通过IgnoreDeleteFilter来进行短路操作，默认为false sql：</span></span><br><span class=\"line\"><span class=\"comment\">--false</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,IsValid,TenantCode <span class=\"keyword\">where</span> (<span class=\"literal\">false</span> <span class=\"keyword\">or</span> IsValid<span class=\"operator\">=</span><span class=\"number\">1</span>) <span class=\"keyword\">and</span>  (<span class=\"literal\">false</span> <span class=\"keyword\">or</span> TenantCode<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">--true </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,IsValid,TenantCode <span class=\"keyword\">where</span> (<span class=\"literal\">true</span> <span class=\"keyword\">or</span> IsValid<span class=\"operator\">=</span><span class=\"number\">1</span>) <span class=\"keyword\">and</span>  (<span class=\"literal\">true</span> <span class=\"keyword\">or</span> TenantCode<span class=\"operator\">=</span><span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://www.cnblogs.com/skins/custom/images/logo.gif","popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtm多租户实现_查询","path":"2022/07/22/wtm多租户实现-查询/","eyeCatchImage":"https://www.cnblogs.com/skins/custom/images/logo.gif","excerpt":"EF实现多租户查询过滤","date":{"_isAMomentObject":true,"_i":"2022-07-22T14:54:39.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-22T14:54:39.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","wtm","efcore","saas","多租户","EF数据过滤"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtm日志实现","author":"wuxinheng","date":"2022-07-22T15:08:00.000Z","description":"实现自己的系统日志","_content":"## wtm日志实现\n\n##### 日志\n\n命名空间：[Microsoft.Extensions.Logging](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging?view=dotnet-plat-ext-6.0&viewFallbackFrom=net-6.0)\n\n> 他们的关系是先由ILoggingBuilder配置日志程序,ILoggerFactory 根据日志类型（categoryName）调用 对应的 ILoggerProvider 获取 ILogger\n\n[ILogger](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.ilogger?view=dotnet-plat-ext-6.0)\n\n[ILoggerProvider](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerprovider?view=dotnet-plat-ext-6.0)\n\n[ILoggerFactory](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerfactory?view=dotnet-plat-ext-6.0)\n\n[ILoggingBuilder](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggingbuilder?view=dotnet-plat-ext-6.0)\n\n\n\n##### 过滤器（过滤器管道）\n\n> 过滤器也是一种特殊的管道\n\n![](../images/管道示意图.png)\n\n命名空间：[Microsoft.AspNetCore.Mvc.Filters](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters?view=aspnetcore-6.0)\n\n> OnAuthorization→OnResourceExecuting→创建控制器→OnActionExecuting→执行action业务→OnActionExecuted→OnResultExecuting→页面渲染加载→OnResultExecuted→OnResourceExecuted（不包括异常过滤器的情况下）\n\n[IAuthorizationFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iauthorizationfilter?view=aspnetcore-6.0)\n\n[IResourceFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresourcefilter?view=aspnetcore-6.0)\n\n[IActionFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iactionfilter?view=aspnetcore-6.0)\n\n[IResultFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresultfilter?view=aspnetcore-6.0)\n\n[IExceptionFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iexceptionfilter?view=aspnetcore-6.0)\n\nstartup\n\n```C#\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc(x =>\n\t{\n    \tx.Filters.Add<MyFilter>();\n\t});\n\n    services.AddLogging(builder =>\n    {\n        builder.ClearProviders();//清除系统日志\n        builder.AddMyLogger();//添加自己的日志\n    });\n}\n```\n\n过滤器记录\n\n```C#\npublic class MyFilter : IActionFilter, IResultFilter\n{\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n\n    }\n\n    public void OnActionExecuting(ActionExecutingContext context)\n        {\n            if (context.HttpContext.Items.ContainsKey(\"actionstarttime\") == false)\n            {\n                context.HttpContext.Items.Add(\"actionstarttime\", DateTime.Now);\n            }\n\n        }\n\n    public void OnResultExecuted(ResultExecutedContext context)\n    {\n\n        var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<MyLog>>();\n        var type = (context.ActionDescriptor as ControllerActionDescriptor).ControllerTypeInfo.AsType();\n        //方法信息\n        var method = (context.ActionDescriptor as ControllerActionDescriptor).MethodInfo;\n\n        MyLog myLog = new MyLog()\n        {\n            Message = new StringBuilder()\n                .Append(@$\"{type?.FullName ?? \"\"}\")\n                .Append(@$\"{method?.Name ?? \"\"}\")\n                .ToString(),\n            CurrentDateTime = DateTime.Now,\n            LogLevel = LogLevel.Debug,\n        };\n        var starttime = context.HttpContext.Items[\"actionstarttime\"] as DateTime?;\n        if (starttime != null)\n        {\n          var s = DateTime.Now.Subtract(starttime.Value).TotalSeconds;\n        }\n        if (logger != null)\n        {\n            logger.Log<MyLog>(LogLevel.Information, new EventId(), myLog, null, (a, b) =>\n            {\n                return a.ToString();\n            });\n\n        }\n    }\n\n    public void OnResultExecuting(ResultExecutingContext context)\n    {\n\n    }\n\n```\n\n日志实现\n\n```c#\n    public static class LoggerExtensions\n    {\n        public static ILoggingBuilder AddMyLogger(this ILoggingBuilder builder)\n        {\n            builder.AddConfiguration();\n            builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<ILoggerProvider, MyLoggerProvider>());\n            return builder;\n        }\n    }\n    public class MyLogger : ILogger\n    {\n\n        private readonly string categoryName;\n        private IServiceProvider sp;\n        private LoggerFilterOptions logConfig;\n\n        public MyLogger(string categoryName, LoggerFilterOptions logConfig, IServiceProvider sp)\n        {\n            this.categoryName = categoryName;\n            this.logConfig = logConfig;\n            this.sp = sp;\n        }\n        public IDisposable BeginScope<TState>(TState state) => null;\n\n        public bool IsEnabled(LogLevel logLevel)\n        {\n            return false;\n        }\n\n        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)\n        {\n            MyLog log = null;\n            // 如果泛型类型不是ActionLog\n            if (typeof(TState) != typeof(MyLog))\n            {\n\n                log = new MyLog\n                {\n                    Message = formatter?.Invoke(state, exception),\n                    CurrentDateTime = DateTime.Now,\n                    LogLevel = logLevel\n                };\n            }\n            else\n            {\n                // 隐式转换\n                log = state as MyLog;\n            }\n        }\n    }\n\n    public class MyLoggerProvider : ILoggerProvider\n    {\n        private IServiceProvider sp = null;\n        private LoggerFilterOptions logConfig;\n\n        public MyLoggerProvider(IOptionsMonitor<LoggerFilterOptions> _logConfig, IServiceProvider sp)\n        {\n            this.sp = sp;\n            logConfig = _logConfig.CurrentValue;\n        }\n        public ILogger CreateLogger(string categoryName)\n        {\n            return new MyLogger(categoryName, logConfig, sp);\n\n        }\n\n        public void Dispose() { }\n    }\n```\n\n","source":"_posts/wtm日志实现.md","raw":"---\ntitle: wtm日志实现\nauthor: wuxinheng\ndate: 2022-07-22 23:08:00\ndescription: 实现自己的系统日志\ntags:\n- 日志\n- dotnet\n- wtm\ncategories:\n- dotnet\n---\n## wtm日志实现\n\n##### 日志\n\n命名空间：[Microsoft.Extensions.Logging](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging?view=dotnet-plat-ext-6.0&viewFallbackFrom=net-6.0)\n\n> 他们的关系是先由ILoggingBuilder配置日志程序,ILoggerFactory 根据日志类型（categoryName）调用 对应的 ILoggerProvider 获取 ILogger\n\n[ILogger](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.ilogger?view=dotnet-plat-ext-6.0)\n\n[ILoggerProvider](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerprovider?view=dotnet-plat-ext-6.0)\n\n[ILoggerFactory](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerfactory?view=dotnet-plat-ext-6.0)\n\n[ILoggingBuilder](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggingbuilder?view=dotnet-plat-ext-6.0)\n\n\n\n##### 过滤器（过滤器管道）\n\n> 过滤器也是一种特殊的管道\n\n![](../images/管道示意图.png)\n\n命名空间：[Microsoft.AspNetCore.Mvc.Filters](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters?view=aspnetcore-6.0)\n\n> OnAuthorization→OnResourceExecuting→创建控制器→OnActionExecuting→执行action业务→OnActionExecuted→OnResultExecuting→页面渲染加载→OnResultExecuted→OnResourceExecuted（不包括异常过滤器的情况下）\n\n[IAuthorizationFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iauthorizationfilter?view=aspnetcore-6.0)\n\n[IResourceFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresourcefilter?view=aspnetcore-6.0)\n\n[IActionFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iactionfilter?view=aspnetcore-6.0)\n\n[IResultFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresultfilter?view=aspnetcore-6.0)\n\n[IExceptionFilter](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iexceptionfilter?view=aspnetcore-6.0)\n\nstartup\n\n```C#\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc(x =>\n\t{\n    \tx.Filters.Add<MyFilter>();\n\t});\n\n    services.AddLogging(builder =>\n    {\n        builder.ClearProviders();//清除系统日志\n        builder.AddMyLogger();//添加自己的日志\n    });\n}\n```\n\n过滤器记录\n\n```C#\npublic class MyFilter : IActionFilter, IResultFilter\n{\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n\n    }\n\n    public void OnActionExecuting(ActionExecutingContext context)\n        {\n            if (context.HttpContext.Items.ContainsKey(\"actionstarttime\") == false)\n            {\n                context.HttpContext.Items.Add(\"actionstarttime\", DateTime.Now);\n            }\n\n        }\n\n    public void OnResultExecuted(ResultExecutedContext context)\n    {\n\n        var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<MyLog>>();\n        var type = (context.ActionDescriptor as ControllerActionDescriptor).ControllerTypeInfo.AsType();\n        //方法信息\n        var method = (context.ActionDescriptor as ControllerActionDescriptor).MethodInfo;\n\n        MyLog myLog = new MyLog()\n        {\n            Message = new StringBuilder()\n                .Append(@$\"{type?.FullName ?? \"\"}\")\n                .Append(@$\"{method?.Name ?? \"\"}\")\n                .ToString(),\n            CurrentDateTime = DateTime.Now,\n            LogLevel = LogLevel.Debug,\n        };\n        var starttime = context.HttpContext.Items[\"actionstarttime\"] as DateTime?;\n        if (starttime != null)\n        {\n          var s = DateTime.Now.Subtract(starttime.Value).TotalSeconds;\n        }\n        if (logger != null)\n        {\n            logger.Log<MyLog>(LogLevel.Information, new EventId(), myLog, null, (a, b) =>\n            {\n                return a.ToString();\n            });\n\n        }\n    }\n\n    public void OnResultExecuting(ResultExecutingContext context)\n    {\n\n    }\n\n```\n\n日志实现\n\n```c#\n    public static class LoggerExtensions\n    {\n        public static ILoggingBuilder AddMyLogger(this ILoggingBuilder builder)\n        {\n            builder.AddConfiguration();\n            builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<ILoggerProvider, MyLoggerProvider>());\n            return builder;\n        }\n    }\n    public class MyLogger : ILogger\n    {\n\n        private readonly string categoryName;\n        private IServiceProvider sp;\n        private LoggerFilterOptions logConfig;\n\n        public MyLogger(string categoryName, LoggerFilterOptions logConfig, IServiceProvider sp)\n        {\n            this.categoryName = categoryName;\n            this.logConfig = logConfig;\n            this.sp = sp;\n        }\n        public IDisposable BeginScope<TState>(TState state) => null;\n\n        public bool IsEnabled(LogLevel logLevel)\n        {\n            return false;\n        }\n\n        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)\n        {\n            MyLog log = null;\n            // 如果泛型类型不是ActionLog\n            if (typeof(TState) != typeof(MyLog))\n            {\n\n                log = new MyLog\n                {\n                    Message = formatter?.Invoke(state, exception),\n                    CurrentDateTime = DateTime.Now,\n                    LogLevel = logLevel\n                };\n            }\n            else\n            {\n                // 隐式转换\n                log = state as MyLog;\n            }\n        }\n    }\n\n    public class MyLoggerProvider : ILoggerProvider\n    {\n        private IServiceProvider sp = null;\n        private LoggerFilterOptions logConfig;\n\n        public MyLoggerProvider(IOptionsMonitor<LoggerFilterOptions> _logConfig, IServiceProvider sp)\n        {\n            this.sp = sp;\n            logConfig = _logConfig.CurrentValue;\n        }\n        public ILogger CreateLogger(string categoryName)\n        {\n            return new MyLogger(categoryName, logConfig, sp);\n\n        }\n\n        public void Dispose() { }\n    }\n```\n\n","slug":"wtm日志实现","published":1,"updated":"2023-09-24T07:38:31.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhw0032owtk381zc2md","content":"<h2 id=\"wtm日志实现\"><a href=\"#wtm日志实现\" class=\"headerlink\" title=\"wtm日志实现\"></a>wtm日志实现</h2><h5 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h5><p>命名空间：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging?view=dotnet-plat-ext-6.0&viewFallbackFrom=net-6.0\">Microsoft.Extensions.Logging</a></p>\n<blockquote>\n<p>他们的关系是先由ILoggingBuilder配置日志程序,ILoggerFactory 根据日志类型（categoryName）调用 对应的 ILoggerProvider 获取 ILogger</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.ilogger?view=dotnet-plat-ext-6.0\">ILogger</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerprovider?view=dotnet-plat-ext-6.0\">ILoggerProvider</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerfactory?view=dotnet-plat-ext-6.0\">ILoggerFactory</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggingbuilder?view=dotnet-plat-ext-6.0\">ILoggingBuilder</a></p>\n<h5 id=\"过滤器（过滤器管道）\"><a href=\"#过滤器（过滤器管道）\" class=\"headerlink\" title=\"过滤器（过滤器管道）\"></a>过滤器（过滤器管道）</h5><blockquote>\n<p>过滤器也是一种特殊的管道</p>\n</blockquote>\n<p><img src=\"/../images/%E7%AE%A1%E9%81%93%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"></p>\n<p>命名空间：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters?view=aspnetcore-6.0\">Microsoft.AspNetCore.Mvc.Filters</a></p>\n<blockquote>\n<p>OnAuthorization→OnResourceExecuting→创建控制器→OnActionExecuting→执行action业务→OnActionExecuted→OnResultExecuting→页面渲染加载→OnResultExecuted→OnResourceExecuted（不包括异常过滤器的情况下）</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iauthorizationfilter?view=aspnetcore-6.0\">IAuthorizationFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresourcefilter?view=aspnetcore-6.0\">IResourceFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iactionfilter?view=aspnetcore-6.0\">IActionFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresultfilter?view=aspnetcore-6.0\">IResultFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iexceptionfilter?view=aspnetcore-6.0\">IExceptionFilter</a></p>\n<p>startup</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddMvc(x =&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    \tx.Filters.Add&lt;MyFilter&gt;();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddLogging(builder =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        builder.ClearProviders();<span class=\"comment\">//清除系统日志</span></span><br><span class=\"line\">        builder.AddMyLogger();<span class=\"comment\">//添加自己的日志</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤器记录</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> : <span class=\"title\">IActionFilter</span>, <span class=\"title\">IResultFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.HttpContext.Items.ContainsKey(<span class=\"string\">&quot;actionstarttime&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.HttpContext.Items.Add(<span class=\"string\">&quot;actionstarttime&quot;</span>, DateTime.Now);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResultExecuted</span>(<span class=\"params\">ResultExecutedContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> logger = context.HttpContext.RequestServices.GetRequiredService&lt;ILogger&lt;MyLog&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = (context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor).ControllerTypeInfo.AsType();</span><br><span class=\"line\">        <span class=\"comment\">//方法信息</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> method = (context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor).MethodInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyLog myLog = <span class=\"keyword\">new</span> MyLog()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Message = <span class=\"keyword\">new</span> StringBuilder()</span><br><span class=\"line\">                .Append(@<span class=\"string\">$&quot;<span class=\"subst\">&#123;type?.FullName ?? <span class=\"string\">&quot;&quot;</span>&#125;</span>&quot;</span>)</span><br><span class=\"line\">                .Append(@<span class=\"string\">$&quot;<span class=\"subst\">&#123;method?.Name ?? <span class=\"string\">&quot;&quot;</span>&#125;</span>&quot;</span>)</span><br><span class=\"line\">                .ToString(),</span><br><span class=\"line\">            CurrentDateTime = DateTime.Now,</span><br><span class=\"line\">            LogLevel = LogLevel.Debug,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> starttime = context.HttpContext.Items[<span class=\"string\">&quot;actionstarttime&quot;</span>] <span class=\"keyword\">as</span> DateTime?;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (starttime != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> s = DateTime.Now.Subtract(starttime.Value).TotalSeconds;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log&lt;MyLog&gt;(LogLevel.Information, <span class=\"keyword\">new</span> EventId(), myLog, <span class=\"literal\">null</span>, (a, b) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a.ToString();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResultExecuting</span>(<span class=\"params\">ResultExecutingContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>日志实现</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">LoggerExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoggingBuilder <span class=\"title\">AddMyLogger</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILoggingBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        builder.AddConfiguration();</span><br><span class=\"line\">        builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton&lt;ILoggerProvider, MyLoggerProvider&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLogger</span> : <span class=\"title\">ILogger</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> categoryName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IServiceProvider sp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoggerFilterOptions logConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLogger</span>(<span class=\"params\"><span class=\"built_in\">string</span> categoryName, LoggerFilterOptions logConfig, IServiceProvider sp</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.categoryName = categoryName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logConfig = logConfig;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sp = sp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IDisposable <span class=\"title\">BeginScope</span>&lt;<span class=\"title\">TState</span>&gt;(<span class=\"params\">TState state</span>)</span> =&gt; <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsEnabled</span>(<span class=\"params\">LogLevel logLevel</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Log</span>&lt;<span class=\"title\">TState</span>&gt;(<span class=\"params\">LogLevel logLevel, EventId eventId, TState state, Exception exception, Func&lt;TState, Exception, <span class=\"built_in\">string</span>&gt; formatter</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MyLog log = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果泛型类型不是ActionLog</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(TState) != <span class=\"keyword\">typeof</span>(MyLog))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            log = <span class=\"keyword\">new</span> MyLog</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Message = formatter?.Invoke(state, exception),</span><br><span class=\"line\">                CurrentDateTime = DateTime.Now,</span><br><span class=\"line\">                LogLevel = logLevel</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 隐式转换</span></span><br><span class=\"line\">            log = state <span class=\"keyword\">as</span> MyLog;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLoggerProvider</span> : <span class=\"title\">ILoggerProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IServiceProvider sp = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoggerFilterOptions logConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLoggerProvider</span>(<span class=\"params\">IOptionsMonitor&lt;LoggerFilterOptions&gt; _logConfig, IServiceProvider sp</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sp = sp;</span><br><span class=\"line\">        logConfig = _logConfig.CurrentValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ILogger <span class=\"title\">CreateLogger</span>(<span class=\"params\"><span class=\"built_in\">string</span> categoryName</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLogger(categoryName, logConfig, sp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wtm日志实现\"><a href=\"#wtm日志实现\" class=\"headerlink\" title=\"wtm日志实现\"></a>wtm日志实现</h2><h5 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h5><p>命名空间：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging?view=dotnet-plat-ext-6.0&viewFallbackFrom=net-6.0\">Microsoft.Extensions.Logging</a></p>\n<blockquote>\n<p>他们的关系是先由ILoggingBuilder配置日志程序,ILoggerFactory 根据日志类型（categoryName）调用 对应的 ILoggerProvider 获取 ILogger</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.ilogger?view=dotnet-plat-ext-6.0\">ILogger</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerprovider?view=dotnet-plat-ext-6.0\">ILoggerProvider</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggerfactory?view=dotnet-plat-ext-6.0\">ILoggerFactory</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.extensions.logging.iloggingbuilder?view=dotnet-plat-ext-6.0\">ILoggingBuilder</a></p>\n<h5 id=\"过滤器（过滤器管道）\"><a href=\"#过滤器（过滤器管道）\" class=\"headerlink\" title=\"过滤器（过滤器管道）\"></a>过滤器（过滤器管道）</h5><blockquote>\n<p>过滤器也是一种特殊的管道</p>\n</blockquote>\n<p><img src=\"/../images/%E7%AE%A1%E9%81%93%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"></p>\n<p>命名空间：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters?view=aspnetcore-6.0\">Microsoft.AspNetCore.Mvc.Filters</a></p>\n<blockquote>\n<p>OnAuthorization→OnResourceExecuting→创建控制器→OnActionExecuting→执行action业务→OnActionExecuted→OnResultExecuting→页面渲染加载→OnResultExecuted→OnResourceExecuted（不包括异常过滤器的情况下）</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iauthorizationfilter?view=aspnetcore-6.0\">IAuthorizationFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresourcefilter?view=aspnetcore-6.0\">IResourceFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iactionfilter?view=aspnetcore-6.0\">IActionFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresultfilter?view=aspnetcore-6.0\">IResultFilter</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iexceptionfilter?view=aspnetcore-6.0\">IExceptionFilter</a></p>\n<p>startup</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddMvc(x =&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    \tx.Filters.Add&lt;MyFilter&gt;();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddLogging(builder =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        builder.ClearProviders();<span class=\"comment\">//清除系统日志</span></span><br><span class=\"line\">        builder.AddMyLogger();<span class=\"comment\">//添加自己的日志</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤器记录</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> : <span class=\"title\">IActionFilter</span>, <span class=\"title\">IResultFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.HttpContext.Items.ContainsKey(<span class=\"string\">&quot;actionstarttime&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.HttpContext.Items.Add(<span class=\"string\">&quot;actionstarttime&quot;</span>, DateTime.Now);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResultExecuted</span>(<span class=\"params\">ResultExecutedContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> logger = context.HttpContext.RequestServices.GetRequiredService&lt;ILogger&lt;MyLog&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = (context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor).ControllerTypeInfo.AsType();</span><br><span class=\"line\">        <span class=\"comment\">//方法信息</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> method = (context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor).MethodInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyLog myLog = <span class=\"keyword\">new</span> MyLog()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Message = <span class=\"keyword\">new</span> StringBuilder()</span><br><span class=\"line\">                .Append(@<span class=\"string\">$&quot;<span class=\"subst\">&#123;type?.FullName ?? <span class=\"string\">&quot;&quot;</span>&#125;</span>&quot;</span>)</span><br><span class=\"line\">                .Append(@<span class=\"string\">$&quot;<span class=\"subst\">&#123;method?.Name ?? <span class=\"string\">&quot;&quot;</span>&#125;</span>&quot;</span>)</span><br><span class=\"line\">                .ToString(),</span><br><span class=\"line\">            CurrentDateTime = DateTime.Now,</span><br><span class=\"line\">            LogLevel = LogLevel.Debug,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> starttime = context.HttpContext.Items[<span class=\"string\">&quot;actionstarttime&quot;</span>] <span class=\"keyword\">as</span> DateTime?;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (starttime != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> s = DateTime.Now.Subtract(starttime.Value).TotalSeconds;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.Log&lt;MyLog&gt;(LogLevel.Information, <span class=\"keyword\">new</span> EventId(), myLog, <span class=\"literal\">null</span>, (a, b) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a.ToString();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResultExecuting</span>(<span class=\"params\">ResultExecutingContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>日志实现</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">LoggerExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoggingBuilder <span class=\"title\">AddMyLogger</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILoggingBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        builder.AddConfiguration();</span><br><span class=\"line\">        builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton&lt;ILoggerProvider, MyLoggerProvider&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLogger</span> : <span class=\"title\">ILogger</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> categoryName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IServiceProvider sp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoggerFilterOptions logConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLogger</span>(<span class=\"params\"><span class=\"built_in\">string</span> categoryName, LoggerFilterOptions logConfig, IServiceProvider sp</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.categoryName = categoryName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logConfig = logConfig;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sp = sp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IDisposable <span class=\"title\">BeginScope</span>&lt;<span class=\"title\">TState</span>&gt;(<span class=\"params\">TState state</span>)</span> =&gt; <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsEnabled</span>(<span class=\"params\">LogLevel logLevel</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Log</span>&lt;<span class=\"title\">TState</span>&gt;(<span class=\"params\">LogLevel logLevel, EventId eventId, TState state, Exception exception, Func&lt;TState, Exception, <span class=\"built_in\">string</span>&gt; formatter</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MyLog log = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果泛型类型不是ActionLog</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(TState) != <span class=\"keyword\">typeof</span>(MyLog))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            log = <span class=\"keyword\">new</span> MyLog</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Message = formatter?.Invoke(state, exception),</span><br><span class=\"line\">                CurrentDateTime = DateTime.Now,</span><br><span class=\"line\">                LogLevel = logLevel</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 隐式转换</span></span><br><span class=\"line\">            log = state <span class=\"keyword\">as</span> MyLog;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLoggerProvider</span> : <span class=\"title\">ILoggerProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IServiceProvider sp = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoggerFilterOptions logConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLoggerProvider</span>(<span class=\"params\">IOptionsMonitor&lt;LoggerFilterOptions&gt; _logConfig, IServiceProvider sp</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sp = sp;</span><br><span class=\"line\">        logConfig = _logConfig.CurrentValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ILogger <span class=\"title\">CreateLogger</span>(<span class=\"params\"><span class=\"built_in\">string</span> categoryName</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLogger(categoryName, logConfig, sp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/../images/%E7%AE%A1%E9%81%93%E7%A4%BA%E6%84%8F%E5%9B%BE.png","popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtm日志实现","path":"2022/07/22/wtm日志实现/","eyeCatchImage":"/../images/%E7%AE%A1%E9%81%93%E7%A4%BA%E6%84%8F%E5%9B%BE.png","excerpt":"实现自己的系统日志","date":{"_isAMomentObject":true,"_i":"2022-07-22T15:08:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-22T15:08:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","wtm","日志"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtm源码解读_1","author":"wuxinheng","date":"2022-07-22T14:53:08.000Z","description":"wtm源码解读_1","_content":"## wtm初始化激活\n\n1. 利用Startup.cs通过IServiceCollection对象的AddMvc()的MvcOptions对象来添加过滤器。\n\n   Startup.cs\n\n   ```c#\n   public void ConfigureServices(IServiceCollection services)\n   {\n       services.AddMvc(options =>\n       {\n           options.UseWtmMvcOptions();\n       });\n   }\n   ```\n\n   MvcOptionExtension.cs\n\n   ```c#\n   public static void UseWtmMvcOptions(this MvcOptions options)\n   {\n       // Filters\n       options.Filters.Add(new DataContextFilter());// 读写分离过滤\n       options.Filters.Add(new PrivilegeFilter());// 权限过滤\n       options.Filters.Add(new FrameworkFilter()); // 激活展示层面、VM层面WTMContext、FC对象\n   }\n   ```\n\n2. 通过FrameworkFilter.cs激活框架关键对象、添加审计日志\n\n   FrameworkFilter.cs\n\n   ```C#\n   public override void OnActionExecuting(ActionExecutingContext context)\n   {\n       var ctrl = context.Controller as IBaseController; // 逆变获取IBaseController对象\n       if (ctrl == null)\n       {\n           base.OnActionExecuting(context);\n           return;\n       }\n       // 给控制器层面上WTM初始化\n       context.SetWtmContext();\n       // 开始记录审计日志的开始时间\n       if (context.HttpContext.Items.ContainsKey(\"actionstarttime\") == false)\n       {\n           context.HttpContext.Items.Add(\"actionstarttime\", DateTime.Now);\n       }\n       var ctrlActDesc = context.ActionDescriptor as ControllerActionDescriptor;\n       var log = new SimpleLog();// 初始化log备用\n       var ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n       var actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n       var postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(HttpPostAttribute), false).Cast<HttpPostAttribute>().FirstOrDefault();\n       var validpostonly = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ValidateFormItemOnlyAttribute), false).Cast<ValidateFormItemOnlyAttribute>().FirstOrDefault();\n   \n       log.ITCode = ctrl.Wtm.LoginUserInfo?.ITCode ?? string.Empty;\n       //给日志的多语言属性赋值\n       log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;\n       log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == null ? string.Empty : \"[P]\");\n       log.ActionUrl = ctrl.BaseUrl;\n       log.IP = context.HttpContext.Connection.RemoteIpAddress.ToString();\n   \n       ctrl.Wtm.Log = log; //通过Wtm来传递Log\n       //初始化参数，简介给vm.wtm、以及其他属性赋值。妙！\n       foreach (var item in context.ActionArguments)\n       {\n           if (item.Value is BaseVM)\n           {\n               var model = item.Value as BaseVM;\n               model.Wtm = ctrl.Wtm;\n               model.FC = new Dictionary<string, object>();\n               model.CreatorAssembly = this.GetType().Assembly.FullName;\n               model.ControllerName = context.HttpContext.Request.Path;\n               try\n               {\n                   var f = context.HttpContext.Request.Form;\n                   foreach (var key in f.Keys)\n                   {\n                       if (model.FC.Keys.Contains(key) == false)\n                       {\n                           model.FC.Add(key, f[key]);\n                       }\n                   }\n                   if (context.HttpContext.Request.QueryString != QueryString.Empty)\n                   {\n                       foreach (var key in context.HttpContext.Request.Query.Keys)\n                       {\n                           if (model.FC.Keys.Contains(key) == false)\n                           {\n                               model.FC.Add(key, context.HttpContext.Request.Query[key]);\n                           }\n                       }\n                   }\n               }\n               catch { }\n   \n               if (ctrl is BaseApiController apictrl)\n               {\n                   //apictrl.TryValidateModel(model);\n                   if (context.HttpContext.Items.ContainsKey(\"DONOTUSE_REQUESTBODY\"))\n                   {\n                       string body = context.HttpContext.Items[\"DONOTUSE_REQUESTBODY\"].ToString();\n                       var joption = new JsonSerializerOptions();\n                       joption.Converters.Add(new BodyConverter());\n                       try\n                       {\n                           var obj = JsonSerializer.Deserialize<PostedBody>(body, joption);\n                           foreach (var field in obj.ProNames)\n                           {\n   \n                               model.FC.Add(field, \"\");\n                           }\n                       }\n                       catch { }\n                   }\n               }\n               //如果ViewModel T继承自IBaseBatchVM<BaseVM>，则自动为其中的ListVM和EditModel初始化数据\n               if (model is IBaseBatchVM<BaseVM> temp)\n               {\n                   if (temp.ListVM != null)\n                   {\n                       temp.ListVM.CopyContext(model);\n                       temp.ListVM.Ids = temp.Ids == null ? new List<string>() : temp.Ids.ToList();\n                       temp.ListVM.SearcherMode = ListVMSearchModeEnum.Batch;\n                       temp.ListVM.NeedPage = false;\n                   }\n                   if (temp.LinkedVM != null)\n                   {\n                       temp.LinkedVM.CopyContext(model);\n                   }\n                   if (temp.ListVM != null)\n                   {\n                       //绑定ListVM的OnAfterInitList事件，当ListVM的InitList完成时，自动将操作列移除\n                       temp.ListVM.OnAfterInitList += (self) =>\n                       {\n                           self.RemoveActionColumn();\n                           self.RemoveAction();\n                           self.AddErrorColumn();\n                       };\n                       if (temp.ListVM.Searcher != null)\n                       {\n                           var searcher = temp.ListVM.Searcher;\n                           searcher.CopyContext(model);\n                       }\n                       temp.ListVM.DoInitListVM();\n                   }\n                   temp.LinkedVM?.DoInit();\n               }\n               if (model is IBaseImport<BaseTemplateVM> tvm)\n               {\n                   var template = tvm.Template;\n                   template.CopyContext(model);\n                   template.DoReInit();\n                   var errorlist = tvm.ErrorListVM;\n                   errorlist.CopyContext(model);\n               }\n               if (model is IBasePagedListVM<TopBasePoco, ISearcher> lvm)\n               {\n                   var searcher = lvm.Searcher;\n                   searcher.CopyContext(lvm);\n                   if (ctrl is BaseController)\n                   {\n                       searcher.DoInit();\n                   }\n               }\n               model.Validate();\n               var invalid = ctrl.ModelState.Where(x => x.Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid).Select(x => x.Key).ToList();\n               if ((ctrl as ControllerBase).Request.Method.ToLower() == \"put\" || validpostonly != null)\n               {\n                   foreach (var v in invalid)\n                   {\n                       if (v?.StartsWith(\"Entity.\") == true)\n                       {\n                           Regex r = new Regex(\"(.*?)\\\\[.*?\\\\](.*?$)\");\n                           var m = r.Match(v);\n                           var check = v;\n                           if (m.Success)\n                           {\n                               check = m.Groups[1] + \"[0]\" + m.Groups[2];\n                           }\n                           if (model.FC.Keys.Any(x=>x.ToLower() == check.ToLower()) == false)\n                           {\n                               ctrl.ModelState.Remove(v);\n                           }\n                       }\n                   }\n               }\n               if (ctrl is BaseController)\n               {\n                   var reinit = model.GetType().GetTypeInfo().GetCustomAttributes(typeof(ReInitAttribute), false).Cast<ReInitAttribute>().SingleOrDefault();\n                   if (ctrl.ModelState.IsValid)\n                   {\n                       if (reinit != null && (reinit.ReInitMode == ReInitModes.SUCCESSONLY || reinit.ReInitMode == ReInitModes.ALWAYS))\n                       {\n                           model.DoReInit();\n                       }\n                   }\n                   else\n                   {\n                       if (reinit == null || (reinit.ReInitMode == ReInitModes.FAILEDONLY || reinit.ReInitMode == ReInitModes.ALWAYS))\n                       {\n                           model.DoReInit();\n                       }\n                   }\n               }\n   \n               //如果是子表外键验证错误，例如Entity.Majors[0].SchoolId为空这种错误，则忽略。因为框架会在添加修改的时候自动给外键赋值\n               var toremove = ctrl.ModelState.Select(x => x.Key).Where(x => Regex.IsMatch(x, \".*?\\\\[.*?\\\\]\\\\..*?id\", RegexOptions.IgnoreCase));\n               foreach (var r in toremove)\n               {\n                   ctrl.ModelState.Remove(r);\n               }\n           }\n   \n           if(item.Value is BaseSearcher se)\n           {\n               se.FC = new Dictionary<string, object>();\n               se.Wtm = ctrl.Wtm;\n               se.Validate();\n           }\n       }\n   \n       //忽略绑定List<xxx>由于前台传递空字符串造成的错误\n       base.OnActionExecuting(context);\n   }\n   \n   // 对请求之后的操作。我没细看，大该是对页面和样式做个处理\n   public override void OnActionExecuted(ActionExecutedContext context)\n           {\n               var ctrl = context.Controller as BaseController;\n               if (ctrl == null)\n               {\n                   base.OnActionExecuted(context);\n                   return;\n               }\n               ctrl.ViewData[\"DONOTUSE_COOKIEPRE\"] = ctrl.Wtm.ConfigInfo.CookiePre;\n               var ctrlActDesc = context.ActionDescriptor as ControllerActionDescriptor;\n               //get viewname\n               string viewName = \"\";\n               if(context.Result is PartialViewResult pvr)\n               {\n                   viewName = pvr.ViewName??\"\";\n                   if (viewName?.StartsWith(\"/\") == false)\n                   {\n                       var viewEngine = context.HttpContext.RequestServices.GetRequiredService<ICompositeViewEngine>();\n                       viewName = viewEngine.FindView(context, string.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, false)?.View?.Path;\n                   }\n               }\n               if (context.Result is ViewResult vr)\n               {\n                   viewName = vr.ViewName??\"\";\n                   if (viewName?.StartsWith(\"/\") == false)\n                   {\n                       var viewEngine = context.HttpContext.RequestServices.GetRequiredService<ICompositeViewEngine>();\n                       viewName = viewEngine.FindView(context, string.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, false)?.View?.Path;\n                   }\n               }\n               if (context.Result is PartialViewResult)\n               {\n                   var model = (context.Result as PartialViewResult).ViewData?.Model as BaseVM;\n                   if (model == null && (context.Result as PartialViewResult).Model == null && (context.Result as PartialViewResult).ViewData != null)\n                   {\n                       model = ctrl.Wtm.CreateVM<BaseVM>();\n                       model.CurrentView = viewName;\n                       (context.Result as PartialViewResult).ViewData.Model = model;\n                   }\n                   // 为所有 PartialView 加上最外层的 Div\n                   if (model != null)\n                   {\n                       model.CurrentView = viewName;\n                       string pagetitle = string.Empty;\n                       var menu = Utils.FindMenu(context.HttpContext.Request.Path,ctrl.GlobaInfo.AllMenus);\n                       if (menu == null)\n                       {\n                           var ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n                           var actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n                           if (actDes != null)\n                           {\n                               if (ctrlDes != null)\n                               {\n                                   pagetitle = ctrlDes.GetDescription(ctrl) + \" - \";\n                               }\n                               pagetitle += actDes.GetDescription(ctrl);\n                           }\n                       }\n                       else\n                       {\n                           if (menu.ParentId != null)\n                           {\n                               var pmenu = ctrl.GlobaInfo.AllMenus.Where(x => x.ID == menu.ParentId).FirstOrDefault();\n                               if (pmenu != null)\n                               {\n                                       pmenu.PageName = Core.CoreProgram._localizer?[pmenu.PageName];\n   \n                                   pagetitle = pmenu.PageName + \" - \";\n                               }\n                           }\n                               menu.PageName = Core.CoreProgram._localizer?[menu.PageName];\n                           pagetitle += menu.PageName;\n                       }\n                       if (string.IsNullOrEmpty(pagetitle) == false)\n                       {\n                           context.HttpContext.Response.Headers.Add(\"X-wtm-PageTitle\", Convert.ToBase64String(Encoding.UTF8.GetBytes(pagetitle)));\n                       }\n                       context.HttpContext.Response.Cookies.Append(\"divid\", model.ViewDivId);\n                   }\n               }\n               if (context.Result is ViewResult)\n               {\n                   var model = (context.Result as ViewResult).ViewData?.Model as BaseVM;\n                   if (model == null && (context.Result as ViewResult).Model == null && (context.Result as ViewResult).ViewData != null)\n                   {\n                       model = ctrl.Wtm.CreateVM<BaseVM>();\n                       model.CurrentView = viewName;\n                       (context.Result as ViewResult).ViewData.Model = model;\n                   }\n                  if (model != null)\n                   {\n                       model.CurrentView = viewName;\n                       context.HttpContext.Response.Cookies.Append(\"divid\", model?.ViewDivId);\n                   }\n               }\n               base.OnActionExecuted(context);\n           }\n   \n   // 对对日志其他信息进行补全，和日志记录\n   public override void OnResultExecuted(ResultExecutedContext context)\n   {\n       var ctrl = context.Controller as IBaseController;\n       if (ctrl == null)\n       {\n           base.OnResultExecuted(context);\n           return;\n       }\n       var ctrlActDesc = context.ActionDescriptor as ControllerActionDescriptor;\n       var nolog = ctrlActDesc.MethodInfo.IsDefined(typeof(NoLogAttribute), false) || ctrlActDesc.ControllerTypeInfo.IsDefined(typeof(NoLogAttribute), false);\n   \n       BaseVM model = null;\n       if (context.Result is ViewResult vr)\n       {\n           model = vr.Model as BaseVM;\n       }\n       if (context.Result is PartialViewResult pvr)\n       {\n           model = pvr.Model as BaseVM;\n           context.HttpContext.Response.WriteAsync($\"<script>ff.ResizeChart('{model?.ViewDivId}')</script>\");\n       }\n   \n       //如果是来自Error，则已经记录过日志，跳过\n       if (ctrlActDesc.ControllerName == \"_Framework\" && ctrlActDesc.ActionName == \"Error\")\n       {\n           return;\n       }\n       if ( nolog == false)\n       {\n               var log = new ActionLog();\n               var ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n               var actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n               var postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(HttpPostAttribute), false).Cast<HttpPostAttribute>().FirstOrDefault();\n   \n               log.LogType = context.Exception == null ? ActionLogTypesEnum.Normal : ActionLogTypesEnum.Exception;\n               log.ActionTime = DateTime.Now;\n               log.ITCode = ctrl.Wtm?.LoginUserInfo?.ITCode ?? string.Empty;\n               // 给日志的多语言属性赋值\n               log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;\n               log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == null ? string.Empty : \"[P]\");\n               log.ActionUrl = context.HttpContext.Request.Path;\n               log.IP = context.HttpContext.GetRemoteIpAddress();\n               log.Remark = context.Exception?.ToString() ?? string.Empty;\n               if (string.IsNullOrEmpty(log.Remark) == false && log.Remark.Length > 2000)\n               {\n                   log.Remark = log.Remark.Substring(0, 2000);\n               }\n           \t// 这里非常好，反正我没想到。利用请求上下文来记录action开始时间。保持了一致性。我之前是通过私有变量来计算，可能会存在问题。起码异步的时候有问题。\n               var starttime = context.HttpContext.Items[\"actionstarttime\"] as DateTime?;\n               if (starttime != null)\n               {\n                   log.Duration = DateTime.Now.Subtract(starttime.Value).TotalSeconds;\n               }\n               try\n               {\n               var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<ActionLog>>();\n               if (logger != null)\n               {\n                   // 此处用的是.net core的系统日志来实现。具体使用我在疫情期间也看过，具体文档可看：wtm日志实现.md\n                   logger.Log<ActionLog>(LogLevel.Information, new EventId(), log, null, (a, b) =>\n                   {\n                       return a.GetLogString();\n                   });\n               }\n               }\n               catch { }\n       }\n       if (context.Exception != null)\n       {\n           context.ExceptionHandled = true;\n           if (ctrl.Wtm.ConfigInfo.IsQuickDebug == true)\n           {\n               context.HttpContext.Response.WriteAsync(context.Exception.ToString());\n           }\n           else\n           {\n               context.HttpContext.Response.WriteAsync(MvcProgram._localizer[\"Sys.PageError\"]);\n           }\n       }\n       base.OnResultExecuted(context);\n   }\n   ```\n\n","source":"_posts/wtm源码解读-1.md","raw":"---\ntitle: wtm源码解读_1\nauthor: wuxinheng\ndate: 2022-07-22 22:53:08\ndescription: wtm源码解读_1\ntags:\n- efcore\n- saas\n- 多租户\n- dotnet\n- wtm\ncategories:\n- dotnet \n---\n## wtm初始化激活\n\n1. 利用Startup.cs通过IServiceCollection对象的AddMvc()的MvcOptions对象来添加过滤器。\n\n   Startup.cs\n\n   ```c#\n   public void ConfigureServices(IServiceCollection services)\n   {\n       services.AddMvc(options =>\n       {\n           options.UseWtmMvcOptions();\n       });\n   }\n   ```\n\n   MvcOptionExtension.cs\n\n   ```c#\n   public static void UseWtmMvcOptions(this MvcOptions options)\n   {\n       // Filters\n       options.Filters.Add(new DataContextFilter());// 读写分离过滤\n       options.Filters.Add(new PrivilegeFilter());// 权限过滤\n       options.Filters.Add(new FrameworkFilter()); // 激活展示层面、VM层面WTMContext、FC对象\n   }\n   ```\n\n2. 通过FrameworkFilter.cs激活框架关键对象、添加审计日志\n\n   FrameworkFilter.cs\n\n   ```C#\n   public override void OnActionExecuting(ActionExecutingContext context)\n   {\n       var ctrl = context.Controller as IBaseController; // 逆变获取IBaseController对象\n       if (ctrl == null)\n       {\n           base.OnActionExecuting(context);\n           return;\n       }\n       // 给控制器层面上WTM初始化\n       context.SetWtmContext();\n       // 开始记录审计日志的开始时间\n       if (context.HttpContext.Items.ContainsKey(\"actionstarttime\") == false)\n       {\n           context.HttpContext.Items.Add(\"actionstarttime\", DateTime.Now);\n       }\n       var ctrlActDesc = context.ActionDescriptor as ControllerActionDescriptor;\n       var log = new SimpleLog();// 初始化log备用\n       var ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n       var actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n       var postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(HttpPostAttribute), false).Cast<HttpPostAttribute>().FirstOrDefault();\n       var validpostonly = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ValidateFormItemOnlyAttribute), false).Cast<ValidateFormItemOnlyAttribute>().FirstOrDefault();\n   \n       log.ITCode = ctrl.Wtm.LoginUserInfo?.ITCode ?? string.Empty;\n       //给日志的多语言属性赋值\n       log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;\n       log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == null ? string.Empty : \"[P]\");\n       log.ActionUrl = ctrl.BaseUrl;\n       log.IP = context.HttpContext.Connection.RemoteIpAddress.ToString();\n   \n       ctrl.Wtm.Log = log; //通过Wtm来传递Log\n       //初始化参数，简介给vm.wtm、以及其他属性赋值。妙！\n       foreach (var item in context.ActionArguments)\n       {\n           if (item.Value is BaseVM)\n           {\n               var model = item.Value as BaseVM;\n               model.Wtm = ctrl.Wtm;\n               model.FC = new Dictionary<string, object>();\n               model.CreatorAssembly = this.GetType().Assembly.FullName;\n               model.ControllerName = context.HttpContext.Request.Path;\n               try\n               {\n                   var f = context.HttpContext.Request.Form;\n                   foreach (var key in f.Keys)\n                   {\n                       if (model.FC.Keys.Contains(key) == false)\n                       {\n                           model.FC.Add(key, f[key]);\n                       }\n                   }\n                   if (context.HttpContext.Request.QueryString != QueryString.Empty)\n                   {\n                       foreach (var key in context.HttpContext.Request.Query.Keys)\n                       {\n                           if (model.FC.Keys.Contains(key) == false)\n                           {\n                               model.FC.Add(key, context.HttpContext.Request.Query[key]);\n                           }\n                       }\n                   }\n               }\n               catch { }\n   \n               if (ctrl is BaseApiController apictrl)\n               {\n                   //apictrl.TryValidateModel(model);\n                   if (context.HttpContext.Items.ContainsKey(\"DONOTUSE_REQUESTBODY\"))\n                   {\n                       string body = context.HttpContext.Items[\"DONOTUSE_REQUESTBODY\"].ToString();\n                       var joption = new JsonSerializerOptions();\n                       joption.Converters.Add(new BodyConverter());\n                       try\n                       {\n                           var obj = JsonSerializer.Deserialize<PostedBody>(body, joption);\n                           foreach (var field in obj.ProNames)\n                           {\n   \n                               model.FC.Add(field, \"\");\n                           }\n                       }\n                       catch { }\n                   }\n               }\n               //如果ViewModel T继承自IBaseBatchVM<BaseVM>，则自动为其中的ListVM和EditModel初始化数据\n               if (model is IBaseBatchVM<BaseVM> temp)\n               {\n                   if (temp.ListVM != null)\n                   {\n                       temp.ListVM.CopyContext(model);\n                       temp.ListVM.Ids = temp.Ids == null ? new List<string>() : temp.Ids.ToList();\n                       temp.ListVM.SearcherMode = ListVMSearchModeEnum.Batch;\n                       temp.ListVM.NeedPage = false;\n                   }\n                   if (temp.LinkedVM != null)\n                   {\n                       temp.LinkedVM.CopyContext(model);\n                   }\n                   if (temp.ListVM != null)\n                   {\n                       //绑定ListVM的OnAfterInitList事件，当ListVM的InitList完成时，自动将操作列移除\n                       temp.ListVM.OnAfterInitList += (self) =>\n                       {\n                           self.RemoveActionColumn();\n                           self.RemoveAction();\n                           self.AddErrorColumn();\n                       };\n                       if (temp.ListVM.Searcher != null)\n                       {\n                           var searcher = temp.ListVM.Searcher;\n                           searcher.CopyContext(model);\n                       }\n                       temp.ListVM.DoInitListVM();\n                   }\n                   temp.LinkedVM?.DoInit();\n               }\n               if (model is IBaseImport<BaseTemplateVM> tvm)\n               {\n                   var template = tvm.Template;\n                   template.CopyContext(model);\n                   template.DoReInit();\n                   var errorlist = tvm.ErrorListVM;\n                   errorlist.CopyContext(model);\n               }\n               if (model is IBasePagedListVM<TopBasePoco, ISearcher> lvm)\n               {\n                   var searcher = lvm.Searcher;\n                   searcher.CopyContext(lvm);\n                   if (ctrl is BaseController)\n                   {\n                       searcher.DoInit();\n                   }\n               }\n               model.Validate();\n               var invalid = ctrl.ModelState.Where(x => x.Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid).Select(x => x.Key).ToList();\n               if ((ctrl as ControllerBase).Request.Method.ToLower() == \"put\" || validpostonly != null)\n               {\n                   foreach (var v in invalid)\n                   {\n                       if (v?.StartsWith(\"Entity.\") == true)\n                       {\n                           Regex r = new Regex(\"(.*?)\\\\[.*?\\\\](.*?$)\");\n                           var m = r.Match(v);\n                           var check = v;\n                           if (m.Success)\n                           {\n                               check = m.Groups[1] + \"[0]\" + m.Groups[2];\n                           }\n                           if (model.FC.Keys.Any(x=>x.ToLower() == check.ToLower()) == false)\n                           {\n                               ctrl.ModelState.Remove(v);\n                           }\n                       }\n                   }\n               }\n               if (ctrl is BaseController)\n               {\n                   var reinit = model.GetType().GetTypeInfo().GetCustomAttributes(typeof(ReInitAttribute), false).Cast<ReInitAttribute>().SingleOrDefault();\n                   if (ctrl.ModelState.IsValid)\n                   {\n                       if (reinit != null && (reinit.ReInitMode == ReInitModes.SUCCESSONLY || reinit.ReInitMode == ReInitModes.ALWAYS))\n                       {\n                           model.DoReInit();\n                       }\n                   }\n                   else\n                   {\n                       if (reinit == null || (reinit.ReInitMode == ReInitModes.FAILEDONLY || reinit.ReInitMode == ReInitModes.ALWAYS))\n                       {\n                           model.DoReInit();\n                       }\n                   }\n               }\n   \n               //如果是子表外键验证错误，例如Entity.Majors[0].SchoolId为空这种错误，则忽略。因为框架会在添加修改的时候自动给外键赋值\n               var toremove = ctrl.ModelState.Select(x => x.Key).Where(x => Regex.IsMatch(x, \".*?\\\\[.*?\\\\]\\\\..*?id\", RegexOptions.IgnoreCase));\n               foreach (var r in toremove)\n               {\n                   ctrl.ModelState.Remove(r);\n               }\n           }\n   \n           if(item.Value is BaseSearcher se)\n           {\n               se.FC = new Dictionary<string, object>();\n               se.Wtm = ctrl.Wtm;\n               se.Validate();\n           }\n       }\n   \n       //忽略绑定List<xxx>由于前台传递空字符串造成的错误\n       base.OnActionExecuting(context);\n   }\n   \n   // 对请求之后的操作。我没细看，大该是对页面和样式做个处理\n   public override void OnActionExecuted(ActionExecutedContext context)\n           {\n               var ctrl = context.Controller as BaseController;\n               if (ctrl == null)\n               {\n                   base.OnActionExecuted(context);\n                   return;\n               }\n               ctrl.ViewData[\"DONOTUSE_COOKIEPRE\"] = ctrl.Wtm.ConfigInfo.CookiePre;\n               var ctrlActDesc = context.ActionDescriptor as ControllerActionDescriptor;\n               //get viewname\n               string viewName = \"\";\n               if(context.Result is PartialViewResult pvr)\n               {\n                   viewName = pvr.ViewName??\"\";\n                   if (viewName?.StartsWith(\"/\") == false)\n                   {\n                       var viewEngine = context.HttpContext.RequestServices.GetRequiredService<ICompositeViewEngine>();\n                       viewName = viewEngine.FindView(context, string.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, false)?.View?.Path;\n                   }\n               }\n               if (context.Result is ViewResult vr)\n               {\n                   viewName = vr.ViewName??\"\";\n                   if (viewName?.StartsWith(\"/\") == false)\n                   {\n                       var viewEngine = context.HttpContext.RequestServices.GetRequiredService<ICompositeViewEngine>();\n                       viewName = viewEngine.FindView(context, string.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, false)?.View?.Path;\n                   }\n               }\n               if (context.Result is PartialViewResult)\n               {\n                   var model = (context.Result as PartialViewResult).ViewData?.Model as BaseVM;\n                   if (model == null && (context.Result as PartialViewResult).Model == null && (context.Result as PartialViewResult).ViewData != null)\n                   {\n                       model = ctrl.Wtm.CreateVM<BaseVM>();\n                       model.CurrentView = viewName;\n                       (context.Result as PartialViewResult).ViewData.Model = model;\n                   }\n                   // 为所有 PartialView 加上最外层的 Div\n                   if (model != null)\n                   {\n                       model.CurrentView = viewName;\n                       string pagetitle = string.Empty;\n                       var menu = Utils.FindMenu(context.HttpContext.Request.Path,ctrl.GlobaInfo.AllMenus);\n                       if (menu == null)\n                       {\n                           var ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n                           var actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n                           if (actDes != null)\n                           {\n                               if (ctrlDes != null)\n                               {\n                                   pagetitle = ctrlDes.GetDescription(ctrl) + \" - \";\n                               }\n                               pagetitle += actDes.GetDescription(ctrl);\n                           }\n                       }\n                       else\n                       {\n                           if (menu.ParentId != null)\n                           {\n                               var pmenu = ctrl.GlobaInfo.AllMenus.Where(x => x.ID == menu.ParentId).FirstOrDefault();\n                               if (pmenu != null)\n                               {\n                                       pmenu.PageName = Core.CoreProgram._localizer?[pmenu.PageName];\n   \n                                   pagetitle = pmenu.PageName + \" - \";\n                               }\n                           }\n                               menu.PageName = Core.CoreProgram._localizer?[menu.PageName];\n                           pagetitle += menu.PageName;\n                       }\n                       if (string.IsNullOrEmpty(pagetitle) == false)\n                       {\n                           context.HttpContext.Response.Headers.Add(\"X-wtm-PageTitle\", Convert.ToBase64String(Encoding.UTF8.GetBytes(pagetitle)));\n                       }\n                       context.HttpContext.Response.Cookies.Append(\"divid\", model.ViewDivId);\n                   }\n               }\n               if (context.Result is ViewResult)\n               {\n                   var model = (context.Result as ViewResult).ViewData?.Model as BaseVM;\n                   if (model == null && (context.Result as ViewResult).Model == null && (context.Result as ViewResult).ViewData != null)\n                   {\n                       model = ctrl.Wtm.CreateVM<BaseVM>();\n                       model.CurrentView = viewName;\n                       (context.Result as ViewResult).ViewData.Model = model;\n                   }\n                  if (model != null)\n                   {\n                       model.CurrentView = viewName;\n                       context.HttpContext.Response.Cookies.Append(\"divid\", model?.ViewDivId);\n                   }\n               }\n               base.OnActionExecuted(context);\n           }\n   \n   // 对对日志其他信息进行补全，和日志记录\n   public override void OnResultExecuted(ResultExecutedContext context)\n   {\n       var ctrl = context.Controller as IBaseController;\n       if (ctrl == null)\n       {\n           base.OnResultExecuted(context);\n           return;\n       }\n       var ctrlActDesc = context.ActionDescriptor as ControllerActionDescriptor;\n       var nolog = ctrlActDesc.MethodInfo.IsDefined(typeof(NoLogAttribute), false) || ctrlActDesc.ControllerTypeInfo.IsDefined(typeof(NoLogAttribute), false);\n   \n       BaseVM model = null;\n       if (context.Result is ViewResult vr)\n       {\n           model = vr.Model as BaseVM;\n       }\n       if (context.Result is PartialViewResult pvr)\n       {\n           model = pvr.Model as BaseVM;\n           context.HttpContext.Response.WriteAsync($\"<script>ff.ResizeChart('{model?.ViewDivId}')</script>\");\n       }\n   \n       //如果是来自Error，则已经记录过日志，跳过\n       if (ctrlActDesc.ControllerName == \"_Framework\" && ctrlActDesc.ActionName == \"Error\")\n       {\n           return;\n       }\n       if ( nolog == false)\n       {\n               var log = new ActionLog();\n               var ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n               var actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(ActionDescriptionAttribute), false).Cast<ActionDescriptionAttribute>().FirstOrDefault();\n               var postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(typeof(HttpPostAttribute), false).Cast<HttpPostAttribute>().FirstOrDefault();\n   \n               log.LogType = context.Exception == null ? ActionLogTypesEnum.Normal : ActionLogTypesEnum.Exception;\n               log.ActionTime = DateTime.Now;\n               log.ITCode = ctrl.Wtm?.LoginUserInfo?.ITCode ?? string.Empty;\n               // 给日志的多语言属性赋值\n               log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;\n               log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == null ? string.Empty : \"[P]\");\n               log.ActionUrl = context.HttpContext.Request.Path;\n               log.IP = context.HttpContext.GetRemoteIpAddress();\n               log.Remark = context.Exception?.ToString() ?? string.Empty;\n               if (string.IsNullOrEmpty(log.Remark) == false && log.Remark.Length > 2000)\n               {\n                   log.Remark = log.Remark.Substring(0, 2000);\n               }\n           \t// 这里非常好，反正我没想到。利用请求上下文来记录action开始时间。保持了一致性。我之前是通过私有变量来计算，可能会存在问题。起码异步的时候有问题。\n               var starttime = context.HttpContext.Items[\"actionstarttime\"] as DateTime?;\n               if (starttime != null)\n               {\n                   log.Duration = DateTime.Now.Subtract(starttime.Value).TotalSeconds;\n               }\n               try\n               {\n               var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<ActionLog>>();\n               if (logger != null)\n               {\n                   // 此处用的是.net core的系统日志来实现。具体使用我在疫情期间也看过，具体文档可看：wtm日志实现.md\n                   logger.Log<ActionLog>(LogLevel.Information, new EventId(), log, null, (a, b) =>\n                   {\n                       return a.GetLogString();\n                   });\n               }\n               }\n               catch { }\n       }\n       if (context.Exception != null)\n       {\n           context.ExceptionHandled = true;\n           if (ctrl.Wtm.ConfigInfo.IsQuickDebug == true)\n           {\n               context.HttpContext.Response.WriteAsync(context.Exception.ToString());\n           }\n           else\n           {\n               context.HttpContext.Response.WriteAsync(MvcProgram._localizer[\"Sys.PageError\"]);\n           }\n       }\n       base.OnResultExecuted(context);\n   }\n   ```\n\n","slug":"wtm源码解读-1","published":1,"updated":"2023-09-24T07:38:31.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhw0036owtk7yg3f96a","content":"<h2 id=\"wtm初始化激活\"><a href=\"#wtm初始化激活\" class=\"headerlink\" title=\"wtm初始化激活\"></a>wtm初始化激活</h2><ol>\n<li><p>利用Startup.cs通过IServiceCollection对象的AddMvc()的MvcOptions对象来添加过滤器。</p>\n<p>Startup.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddMvc(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.UseWtmMvcOptions();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MvcOptionExtension.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseWtmMvcOptions</span>(<span class=\"params\"><span class=\"keyword\">this</span> MvcOptions options</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Filters</span></span><br><span class=\"line\">    options.Filters.Add(<span class=\"keyword\">new</span> DataContextFilter());<span class=\"comment\">// 读写分离过滤</span></span><br><span class=\"line\">    options.Filters.Add(<span class=\"keyword\">new</span> PrivilegeFilter());<span class=\"comment\">// 权限过滤</span></span><br><span class=\"line\">    options.Filters.Add(<span class=\"keyword\">new</span> FrameworkFilter()); <span class=\"comment\">// 激活展示层面、VM层面WTMContext、FC对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过FrameworkFilter.cs激活框架关键对象、添加审计日志</p>\n<p>FrameworkFilter.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrl = context.Controller <span class=\"keyword\">as</span> IBaseController; <span class=\"comment\">// 逆变获取IBaseController对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctrl == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnActionExecuting(context);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 给控制器层面上WTM初始化</span></span><br><span class=\"line\">    context.SetWtmContext();</span><br><span class=\"line\">    <span class=\"comment\">// 开始记录审计日志的开始时间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.HttpContext.Items.ContainsKey(<span class=\"string\">&quot;actionstarttime&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.HttpContext.Items.Add(<span class=\"string\">&quot;actionstarttime&quot;</span>, DateTime.Now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrlActDesc = context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> SimpleLog();<span class=\"comment\">// 初始化log备用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(HttpPostAttribute), <span class=\"literal\">false</span>).Cast&lt;HttpPostAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> validpostonly = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ValidateFormItemOnlyAttribute), <span class=\"literal\">false</span>).Cast&lt;ValidateFormItemOnlyAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">    log.ITCode = ctrl.Wtm.LoginUserInfo?.ITCode ?? <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"comment\">//给日志的多语言属性赋值</span></span><br><span class=\"line\">    log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;</span><br><span class=\"line\">    log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == <span class=\"literal\">null</span> ? <span class=\"built_in\">string</span>.Empty : <span class=\"string\">&quot;[P]&quot;</span>);</span><br><span class=\"line\">    log.ActionUrl = ctrl.BaseUrl;</span><br><span class=\"line\">    log.IP = context.HttpContext.Connection.RemoteIpAddress.ToString();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctrl.Wtm.Log = log; <span class=\"comment\">//通过Wtm来传递Log</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化参数，简介给vm.wtm、以及其他属性赋值。妙！</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> context.ActionArguments)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.Value <span class=\"keyword\">is</span> BaseVM)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> model = item.Value <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">            model.Wtm = ctrl.Wtm;</span><br><span class=\"line\">            model.FC = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">            model.CreatorAssembly = <span class=\"keyword\">this</span>.GetType().Assembly.FullName;</span><br><span class=\"line\">            model.ControllerName = context.HttpContext.Request.Path;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> f = context.HttpContext.Request.Form;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> f.Keys)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (model.FC.Keys.Contains(key) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        model.FC.Add(key, f[key]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (context.HttpContext.Request.QueryString != QueryString.Empty)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> context.HttpContext.Request.Query.Keys)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (model.FC.Keys.Contains(key) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            model.FC.Add(key, context.HttpContext.Request.Query[key]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctrl <span class=\"keyword\">is</span> BaseApiController apictrl)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//apictrl.TryValidateModel(model);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (context.HttpContext.Items.ContainsKey(<span class=\"string\">&quot;DONOTUSE_REQUESTBODY&quot;</span>))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> body = context.HttpContext.Items[<span class=\"string\">&quot;DONOTUSE_REQUESTBODY&quot;</span>].ToString();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> joption = <span class=\"keyword\">new</span> JsonSerializerOptions();</span><br><span class=\"line\">                    joption.Converters.Add(<span class=\"keyword\">new</span> BodyConverter());</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> obj = JsonSerializer.Deserialize&lt;PostedBody&gt;(body, joption);</span><br><span class=\"line\">                        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> field <span class=\"keyword\">in</span> obj.ProNames)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            model.FC.Add(field, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果ViewModel T继承自IBaseBatchVM&lt;BaseVM&gt;，则自动为其中的ListVM和EditModel初始化数据</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (model <span class=\"keyword\">is</span> IBaseBatchVM&lt;BaseVM&gt; temp)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.ListVM != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    temp.ListVM.CopyContext(model);</span><br><span class=\"line\">                    temp.ListVM.Ids = temp.Ids == <span class=\"literal\">null</span> ? <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;() : temp.Ids.ToList();</span><br><span class=\"line\">                    temp.ListVM.SearcherMode = ListVMSearchModeEnum.Batch;</span><br><span class=\"line\">                    temp.ListVM.NeedPage = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.LinkedVM != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    temp.LinkedVM.CopyContext(model);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.ListVM != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//绑定ListVM的OnAfterInitList事件，当ListVM的InitList完成时，自动将操作列移除</span></span><br><span class=\"line\">                    temp.ListVM.OnAfterInitList += (self) =&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        self.RemoveActionColumn();</span><br><span class=\"line\">                        self.RemoveAction();</span><br><span class=\"line\">                        self.AddErrorColumn();</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp.ListVM.Searcher != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> searcher = temp.ListVM.Searcher;</span><br><span class=\"line\">                        searcher.CopyContext(model);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp.ListVM.DoInitListVM();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp.LinkedVM?.DoInit();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (model <span class=\"keyword\">is</span> IBaseImport&lt;BaseTemplateVM&gt; tvm)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> template = tvm.Template;</span><br><span class=\"line\">                template.CopyContext(model);</span><br><span class=\"line\">                template.DoReInit();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> errorlist = tvm.ErrorListVM;</span><br><span class=\"line\">                errorlist.CopyContext(model);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (model <span class=\"keyword\">is</span> IBasePagedListVM&lt;TopBasePoco, ISearcher&gt; lvm)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> searcher = lvm.Searcher;</span><br><span class=\"line\">                searcher.CopyContext(lvm);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ctrl <span class=\"keyword\">is</span> BaseController)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    searcher.DoInit();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            model.Validate();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> invalid = ctrl.ModelState.Where(x =&gt; x.Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid).Select(x =&gt; x.Key).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((ctrl <span class=\"keyword\">as</span> ControllerBase).Request.Method.ToLower() == <span class=\"string\">&quot;put&quot;</span> || validpostonly != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> v <span class=\"keyword\">in</span> invalid)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v?.StartsWith(<span class=\"string\">&quot;Entity.&quot;</span>) == <span class=\"literal\">true</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Regex r = <span class=\"keyword\">new</span> Regex(<span class=\"string\">&quot;(.*?)\\\\[.*?\\\\](.*?$)&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> m = r.Match(v);</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> check = v;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (m.Success)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            check = m.Groups[<span class=\"number\">1</span>] + <span class=\"string\">&quot;[0]&quot;</span> + m.Groups[<span class=\"number\">2</span>];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (model.FC.Keys.Any(x=&gt;x.ToLower() == check.ToLower()) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            ctrl.ModelState.Remove(v);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctrl <span class=\"keyword\">is</span> BaseController)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> reinit = model.GetType().GetTypeInfo().GetCustomAttributes(<span class=\"keyword\">typeof</span>(ReInitAttribute), <span class=\"literal\">false</span>).Cast&lt;ReInitAttribute&gt;().SingleOrDefault();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ctrl.ModelState.IsValid)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (reinit != <span class=\"literal\">null</span> &amp;&amp; (reinit.ReInitMode == ReInitModes.SUCCESSONLY || reinit.ReInitMode == ReInitModes.ALWAYS))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        model.DoReInit();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (reinit == <span class=\"literal\">null</span> || (reinit.ReInitMode == ReInitModes.FAILEDONLY || reinit.ReInitMode == ReInitModes.ALWAYS))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        model.DoReInit();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果是子表外键验证错误，例如Entity.Majors[0].SchoolId为空这种错误，则忽略。因为框架会在添加修改的时候自动给外键赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> toremove = ctrl.ModelState.Select(x =&gt; x.Key).Where(x =&gt; Regex.IsMatch(x, <span class=\"string\">&quot;.*?\\\\[.*?\\\\]\\\\..*?id&quot;</span>, RegexOptions.IgnoreCase));</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> toremove)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ctrl.ModelState.Remove(r);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.Value <span class=\"keyword\">is</span> BaseSearcher se)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            se.FC = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">            se.Wtm = ctrl.Wtm;</span><br><span class=\"line\">            se.Validate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//忽略绑定List&lt;xxx&gt;由于前台传递空字符串造成的错误</span></span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnActionExecuting(context);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对请求之后的操作。我没细看，大该是对页面和样式做个处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctrl = context.Controller <span class=\"keyword\">as</span> BaseController;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctrl == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">base</span>.OnActionExecuted(context);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ctrl.ViewData[<span class=\"string\">&quot;DONOTUSE_COOKIEPRE&quot;</span>] = ctrl.Wtm.ConfigInfo.CookiePre;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctrlActDesc = context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor;</span><br><span class=\"line\">            <span class=\"comment\">//get viewname</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> viewName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(context.Result <span class=\"keyword\">is</span> PartialViewResult pvr)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                viewName = pvr.ViewName??<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (viewName?.StartsWith(<span class=\"string\">&quot;/&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> viewEngine = context.HttpContext.RequestServices.GetRequiredService&lt;ICompositeViewEngine&gt;();</span><br><span class=\"line\">                    viewName = viewEngine.FindView(context, <span class=\"built_in\">string</span>.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, <span class=\"literal\">false</span>)?.View?.Path;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> ViewResult vr)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                viewName = vr.ViewName??<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (viewName?.StartsWith(<span class=\"string\">&quot;/&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> viewEngine = context.HttpContext.RequestServices.GetRequiredService&lt;ICompositeViewEngine&gt;();</span><br><span class=\"line\">                    viewName = viewEngine.FindView(context, <span class=\"built_in\">string</span>.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, <span class=\"literal\">false</span>)?.View?.Path;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> PartialViewResult)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> model = (context.Result <span class=\"keyword\">as</span> PartialViewResult).ViewData?.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> PartialViewResult).Model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> PartialViewResult).ViewData != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model = ctrl.Wtm.CreateVM&lt;BaseVM&gt;();</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    (context.Result <span class=\"keyword\">as</span> PartialViewResult).ViewData.Model = model;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 为所有 PartialView 加上最外层的 Div</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (model != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> pagetitle = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> menu = Utils.FindMenu(context.HttpContext.Request.Path,ctrl.GlobaInfo.AllMenus);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (menu == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (actDes != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ctrlDes != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                pagetitle = ctrlDes.GetDescription(ctrl) + <span class=\"string\">&quot; - &quot;</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            pagetitle += actDes.GetDescription(ctrl);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (menu.ParentId != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> pmenu = ctrl.GlobaInfo.AllMenus.Where(x =&gt; x.ID == menu.ParentId).FirstOrDefault();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (pmenu != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                    pmenu.PageName = Core.CoreProgram._localizer?[pmenu.PageName];</span><br><span class=\"line\"></span><br><span class=\"line\">                                pagetitle = pmenu.PageName + <span class=\"string\">&quot; - &quot;</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                            menu.PageName = Core.CoreProgram._localizer?[menu.PageName];</span><br><span class=\"line\">                        pagetitle += menu.PageName;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(pagetitle) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        context.HttpContext.Response.Headers.Add(<span class=\"string\">&quot;X-wtm-PageTitle&quot;</span>, Convert.ToBase64String(Encoding.UTF8.GetBytes(pagetitle)));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    context.HttpContext.Response.Cookies.Append(<span class=\"string\">&quot;divid&quot;</span>, model.ViewDivId);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> ViewResult)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> model = (context.Result <span class=\"keyword\">as</span> ViewResult).ViewData?.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> ViewResult).Model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> ViewResult).ViewData != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model = ctrl.Wtm.CreateVM&lt;BaseVM&gt;();</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    (context.Result <span class=\"keyword\">as</span> ViewResult).ViewData.Model = model;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (model != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    context.HttpContext.Response.Cookies.Append(<span class=\"string\">&quot;divid&quot;</span>, model?.ViewDivId);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnActionExecuted(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对对日志其他信息进行补全，和日志记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResultExecuted</span>(<span class=\"params\">ResultExecutedContext context</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrl = context.Controller <span class=\"keyword\">as</span> IBaseController;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctrl == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnResultExecuted(context);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrlActDesc = context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nolog = ctrlActDesc.MethodInfo.IsDefined(<span class=\"keyword\">typeof</span>(NoLogAttribute), <span class=\"literal\">false</span>) || ctrlActDesc.ControllerTypeInfo.IsDefined(<span class=\"keyword\">typeof</span>(NoLogAttribute), <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    BaseVM model = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> ViewResult vr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        model = vr.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> PartialViewResult pvr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        model = pvr.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;&lt;script&gt;ff.ResizeChart(&#x27;<span class=\"subst\">&#123;model?.ViewDivId&#125;</span>&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是来自Error，则已经记录过日志，跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctrlActDesc.ControllerName == <span class=\"string\">&quot;_Framework&quot;</span> &amp;&amp; ctrlActDesc.ActionName == <span class=\"string\">&quot;Error&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( nolog == <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> ActionLog();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(HttpPostAttribute), <span class=\"literal\">false</span>).Cast&lt;HttpPostAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">            log.LogType = context.Exception == <span class=\"literal\">null</span> ? ActionLogTypesEnum.Normal : ActionLogTypesEnum.Exception;</span><br><span class=\"line\">            log.ActionTime = DateTime.Now;</span><br><span class=\"line\">            log.ITCode = ctrl.Wtm?.LoginUserInfo?.ITCode ?? <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">            <span class=\"comment\">// 给日志的多语言属性赋值</span></span><br><span class=\"line\">            log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;</span><br><span class=\"line\">            log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == <span class=\"literal\">null</span> ? <span class=\"built_in\">string</span>.Empty : <span class=\"string\">&quot;[P]&quot;</span>);</span><br><span class=\"line\">            log.ActionUrl = context.HttpContext.Request.Path;</span><br><span class=\"line\">            log.IP = context.HttpContext.GetRemoteIpAddress();</span><br><span class=\"line\">            log.Remark = context.Exception?.ToString() ?? <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(log.Remark) == <span class=\"literal\">false</span> &amp;&amp; log.Remark.Length &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                log.Remark = log.Remark.Substring(<span class=\"number\">0</span>, <span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        \t<span class=\"comment\">// 这里非常好，反正我没想到。利用请求上下文来记录action开始时间。保持了一致性。我之前是通过私有变量来计算，可能会存在问题。起码异步的时候有问题。</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> starttime = context.HttpContext.Items[<span class=\"string\">&quot;actionstarttime&quot;</span>] <span class=\"keyword\">as</span> DateTime?;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (starttime != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                log.Duration = DateTime.Now.Subtract(starttime.Value).TotalSeconds;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> logger = context.HttpContext.RequestServices.GetRequiredService&lt;ILogger&lt;ActionLog&gt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 此处用的是.net core的系统日志来实现。具体使用我在疫情期间也看过，具体文档可看：wtm日志实现.md</span></span><br><span class=\"line\">                logger.Log&lt;ActionLog&gt;(LogLevel.Information, <span class=\"keyword\">new</span> EventId(), log, <span class=\"literal\">null</span>, (a, b) =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> a.GetLogString();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Exception != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.ExceptionHandled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctrl.Wtm.ConfigInfo.IsQuickDebug == <span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(context.Exception.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(MvcProgram._localizer[<span class=\"string\">&quot;Sys.PageError&quot;</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnResultExecuted(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wtm初始化激活\"><a href=\"#wtm初始化激活\" class=\"headerlink\" title=\"wtm初始化激活\"></a>wtm初始化激活</h2><ol>\n<li><p>利用Startup.cs通过IServiceCollection对象的AddMvc()的MvcOptions对象来添加过滤器。</p>\n<p>Startup.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddMvc(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.UseWtmMvcOptions();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MvcOptionExtension.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseWtmMvcOptions</span>(<span class=\"params\"><span class=\"keyword\">this</span> MvcOptions options</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Filters</span></span><br><span class=\"line\">    options.Filters.Add(<span class=\"keyword\">new</span> DataContextFilter());<span class=\"comment\">// 读写分离过滤</span></span><br><span class=\"line\">    options.Filters.Add(<span class=\"keyword\">new</span> PrivilegeFilter());<span class=\"comment\">// 权限过滤</span></span><br><span class=\"line\">    options.Filters.Add(<span class=\"keyword\">new</span> FrameworkFilter()); <span class=\"comment\">// 激活展示层面、VM层面WTMContext、FC对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过FrameworkFilter.cs激活框架关键对象、添加审计日志</p>\n<p>FrameworkFilter.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrl = context.Controller <span class=\"keyword\">as</span> IBaseController; <span class=\"comment\">// 逆变获取IBaseController对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctrl == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnActionExecuting(context);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 给控制器层面上WTM初始化</span></span><br><span class=\"line\">    context.SetWtmContext();</span><br><span class=\"line\">    <span class=\"comment\">// 开始记录审计日志的开始时间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.HttpContext.Items.ContainsKey(<span class=\"string\">&quot;actionstarttime&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.HttpContext.Items.Add(<span class=\"string\">&quot;actionstarttime&quot;</span>, DateTime.Now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrlActDesc = context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> SimpleLog();<span class=\"comment\">// 初始化log备用</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(HttpPostAttribute), <span class=\"literal\">false</span>).Cast&lt;HttpPostAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> validpostonly = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ValidateFormItemOnlyAttribute), <span class=\"literal\">false</span>).Cast&lt;ValidateFormItemOnlyAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">    log.ITCode = ctrl.Wtm.LoginUserInfo?.ITCode ?? <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"comment\">//给日志的多语言属性赋值</span></span><br><span class=\"line\">    log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;</span><br><span class=\"line\">    log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == <span class=\"literal\">null</span> ? <span class=\"built_in\">string</span>.Empty : <span class=\"string\">&quot;[P]&quot;</span>);</span><br><span class=\"line\">    log.ActionUrl = ctrl.BaseUrl;</span><br><span class=\"line\">    log.IP = context.HttpContext.Connection.RemoteIpAddress.ToString();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctrl.Wtm.Log = log; <span class=\"comment\">//通过Wtm来传递Log</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化参数，简介给vm.wtm、以及其他属性赋值。妙！</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> context.ActionArguments)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.Value <span class=\"keyword\">is</span> BaseVM)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> model = item.Value <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">            model.Wtm = ctrl.Wtm;</span><br><span class=\"line\">            model.FC = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">            model.CreatorAssembly = <span class=\"keyword\">this</span>.GetType().Assembly.FullName;</span><br><span class=\"line\">            model.ControllerName = context.HttpContext.Request.Path;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> f = context.HttpContext.Request.Form;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> f.Keys)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (model.FC.Keys.Contains(key) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        model.FC.Add(key, f[key]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (context.HttpContext.Request.QueryString != QueryString.Empty)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> context.HttpContext.Request.Query.Keys)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (model.FC.Keys.Contains(key) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            model.FC.Add(key, context.HttpContext.Request.Query[key]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctrl <span class=\"keyword\">is</span> BaseApiController apictrl)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//apictrl.TryValidateModel(model);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (context.HttpContext.Items.ContainsKey(<span class=\"string\">&quot;DONOTUSE_REQUESTBODY&quot;</span>))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> body = context.HttpContext.Items[<span class=\"string\">&quot;DONOTUSE_REQUESTBODY&quot;</span>].ToString();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> joption = <span class=\"keyword\">new</span> JsonSerializerOptions();</span><br><span class=\"line\">                    joption.Converters.Add(<span class=\"keyword\">new</span> BodyConverter());</span><br><span class=\"line\">                    <span class=\"keyword\">try</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> obj = JsonSerializer.Deserialize&lt;PostedBody&gt;(body, joption);</span><br><span class=\"line\">                        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> field <span class=\"keyword\">in</span> obj.ProNames)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            model.FC.Add(field, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果ViewModel T继承自IBaseBatchVM&lt;BaseVM&gt;，则自动为其中的ListVM和EditModel初始化数据</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (model <span class=\"keyword\">is</span> IBaseBatchVM&lt;BaseVM&gt; temp)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.ListVM != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    temp.ListVM.CopyContext(model);</span><br><span class=\"line\">                    temp.ListVM.Ids = temp.Ids == <span class=\"literal\">null</span> ? <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;() : temp.Ids.ToList();</span><br><span class=\"line\">                    temp.ListVM.SearcherMode = ListVMSearchModeEnum.Batch;</span><br><span class=\"line\">                    temp.ListVM.NeedPage = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.LinkedVM != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    temp.LinkedVM.CopyContext(model);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.ListVM != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//绑定ListVM的OnAfterInitList事件，当ListVM的InitList完成时，自动将操作列移除</span></span><br><span class=\"line\">                    temp.ListVM.OnAfterInitList += (self) =&gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        self.RemoveActionColumn();</span><br><span class=\"line\">                        self.RemoveAction();</span><br><span class=\"line\">                        self.AddErrorColumn();</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp.ListVM.Searcher != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> searcher = temp.ListVM.Searcher;</span><br><span class=\"line\">                        searcher.CopyContext(model);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    temp.ListVM.DoInitListVM();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp.LinkedVM?.DoInit();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (model <span class=\"keyword\">is</span> IBaseImport&lt;BaseTemplateVM&gt; tvm)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> template = tvm.Template;</span><br><span class=\"line\">                template.CopyContext(model);</span><br><span class=\"line\">                template.DoReInit();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> errorlist = tvm.ErrorListVM;</span><br><span class=\"line\">                errorlist.CopyContext(model);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (model <span class=\"keyword\">is</span> IBasePagedListVM&lt;TopBasePoco, ISearcher&gt; lvm)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> searcher = lvm.Searcher;</span><br><span class=\"line\">                searcher.CopyContext(lvm);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ctrl <span class=\"keyword\">is</span> BaseController)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    searcher.DoInit();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            model.Validate();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> invalid = ctrl.ModelState.Where(x =&gt; x.Value.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid).Select(x =&gt; x.Key).ToList();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((ctrl <span class=\"keyword\">as</span> ControllerBase).Request.Method.ToLower() == <span class=\"string\">&quot;put&quot;</span> || validpostonly != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> v <span class=\"keyword\">in</span> invalid)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v?.StartsWith(<span class=\"string\">&quot;Entity.&quot;</span>) == <span class=\"literal\">true</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Regex r = <span class=\"keyword\">new</span> Regex(<span class=\"string\">&quot;(.*?)\\\\[.*?\\\\](.*?$)&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> m = r.Match(v);</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> check = v;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (m.Success)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            check = m.Groups[<span class=\"number\">1</span>] + <span class=\"string\">&quot;[0]&quot;</span> + m.Groups[<span class=\"number\">2</span>];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (model.FC.Keys.Any(x=&gt;x.ToLower() == check.ToLower()) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            ctrl.ModelState.Remove(v);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctrl <span class=\"keyword\">is</span> BaseController)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> reinit = model.GetType().GetTypeInfo().GetCustomAttributes(<span class=\"keyword\">typeof</span>(ReInitAttribute), <span class=\"literal\">false</span>).Cast&lt;ReInitAttribute&gt;().SingleOrDefault();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ctrl.ModelState.IsValid)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (reinit != <span class=\"literal\">null</span> &amp;&amp; (reinit.ReInitMode == ReInitModes.SUCCESSONLY || reinit.ReInitMode == ReInitModes.ALWAYS))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        model.DoReInit();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (reinit == <span class=\"literal\">null</span> || (reinit.ReInitMode == ReInitModes.FAILEDONLY || reinit.ReInitMode == ReInitModes.ALWAYS))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        model.DoReInit();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果是子表外键验证错误，例如Entity.Majors[0].SchoolId为空这种错误，则忽略。因为框架会在添加修改的时候自动给外键赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> toremove = ctrl.ModelState.Select(x =&gt; x.Key).Where(x =&gt; Regex.IsMatch(x, <span class=\"string\">&quot;.*?\\\\[.*?\\\\]\\\\..*?id&quot;</span>, RegexOptions.IgnoreCase));</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> r <span class=\"keyword\">in</span> toremove)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ctrl.ModelState.Remove(r);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.Value <span class=\"keyword\">is</span> BaseSearcher se)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            se.FC = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">            se.Wtm = ctrl.Wtm;</span><br><span class=\"line\">            se.Validate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//忽略绑定List&lt;xxx&gt;由于前台传递空字符串造成的错误</span></span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnActionExecuting(context);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对请求之后的操作。我没细看，大该是对页面和样式做个处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctrl = context.Controller <span class=\"keyword\">as</span> BaseController;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ctrl == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">base</span>.OnActionExecuted(context);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ctrl.ViewData[<span class=\"string\">&quot;DONOTUSE_COOKIEPRE&quot;</span>] = ctrl.Wtm.ConfigInfo.CookiePre;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctrlActDesc = context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor;</span><br><span class=\"line\">            <span class=\"comment\">//get viewname</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> viewName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(context.Result <span class=\"keyword\">is</span> PartialViewResult pvr)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                viewName = pvr.ViewName??<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (viewName?.StartsWith(<span class=\"string\">&quot;/&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> viewEngine = context.HttpContext.RequestServices.GetRequiredService&lt;ICompositeViewEngine&gt;();</span><br><span class=\"line\">                    viewName = viewEngine.FindView(context, <span class=\"built_in\">string</span>.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, <span class=\"literal\">false</span>)?.View?.Path;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> ViewResult vr)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                viewName = vr.ViewName??<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (viewName?.StartsWith(<span class=\"string\">&quot;/&quot;</span>) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> viewEngine = context.HttpContext.RequestServices.GetRequiredService&lt;ICompositeViewEngine&gt;();</span><br><span class=\"line\">                    viewName = viewEngine.FindView(context, <span class=\"built_in\">string</span>.IsNullOrEmpty(viewName) ? ctrlActDesc.ActionName : viewName, <span class=\"literal\">false</span>)?.View?.Path;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> PartialViewResult)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> model = (context.Result <span class=\"keyword\">as</span> PartialViewResult).ViewData?.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> PartialViewResult).Model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> PartialViewResult).ViewData != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model = ctrl.Wtm.CreateVM&lt;BaseVM&gt;();</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    (context.Result <span class=\"keyword\">as</span> PartialViewResult).ViewData.Model = model;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 为所有 PartialView 加上最外层的 Div</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (model != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> pagetitle = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> menu = Utils.FindMenu(context.HttpContext.Request.Path,ctrl.GlobaInfo.AllMenus);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (menu == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (actDes != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ctrlDes != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                pagetitle = ctrlDes.GetDescription(ctrl) + <span class=\"string\">&quot; - &quot;</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            pagetitle += actDes.GetDescription(ctrl);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (menu.ParentId != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> pmenu = ctrl.GlobaInfo.AllMenus.Where(x =&gt; x.ID == menu.ParentId).FirstOrDefault();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (pmenu != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                    pmenu.PageName = Core.CoreProgram._localizer?[pmenu.PageName];</span><br><span class=\"line\"></span><br><span class=\"line\">                                pagetitle = pmenu.PageName + <span class=\"string\">&quot; - &quot;</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                            menu.PageName = Core.CoreProgram._localizer?[menu.PageName];</span><br><span class=\"line\">                        pagetitle += menu.PageName;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(pagetitle) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        context.HttpContext.Response.Headers.Add(<span class=\"string\">&quot;X-wtm-PageTitle&quot;</span>, Convert.ToBase64String(Encoding.UTF8.GetBytes(pagetitle)));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    context.HttpContext.Response.Cookies.Append(<span class=\"string\">&quot;divid&quot;</span>, model.ViewDivId);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> ViewResult)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> model = (context.Result <span class=\"keyword\">as</span> ViewResult).ViewData?.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> ViewResult).Model == <span class=\"literal\">null</span> &amp;&amp; (context.Result <span class=\"keyword\">as</span> ViewResult).ViewData != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model = ctrl.Wtm.CreateVM&lt;BaseVM&gt;();</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    (context.Result <span class=\"keyword\">as</span> ViewResult).ViewData.Model = model;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (model != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    model.CurrentView = viewName;</span><br><span class=\"line\">                    context.HttpContext.Response.Cookies.Append(<span class=\"string\">&quot;divid&quot;</span>, model?.ViewDivId);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">base</span>.OnActionExecuted(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对对日志其他信息进行补全，和日志记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnResultExecuted</span>(<span class=\"params\">ResultExecutedContext context</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrl = context.Controller <span class=\"keyword\">as</span> IBaseController;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctrl == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnResultExecuted(context);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctrlActDesc = context.ActionDescriptor <span class=\"keyword\">as</span> ControllerActionDescriptor;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nolog = ctrlActDesc.MethodInfo.IsDefined(<span class=\"keyword\">typeof</span>(NoLogAttribute), <span class=\"literal\">false</span>) || ctrlActDesc.ControllerTypeInfo.IsDefined(<span class=\"keyword\">typeof</span>(NoLogAttribute), <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    BaseVM model = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> ViewResult vr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        model = vr.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Result <span class=\"keyword\">is</span> PartialViewResult pvr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        model = pvr.Model <span class=\"keyword\">as</span> BaseVM;</span><br><span class=\"line\">        context.HttpContext.Response.WriteAsync(<span class=\"string\">$&quot;&lt;script&gt;ff.ResizeChart(&#x27;<span class=\"subst\">&#123;model?.ViewDivId&#125;</span>&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是来自Error，则已经记录过日志，跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctrlActDesc.ControllerName == <span class=\"string\">&quot;_Framework&quot;</span> &amp;&amp; ctrlActDesc.ActionName == <span class=\"string\">&quot;Error&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( nolog == <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> ActionLog();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctrlDes = ctrlActDesc.ControllerTypeInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> actDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(ActionDescriptionAttribute), <span class=\"literal\">false</span>).Cast&lt;ActionDescriptionAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> postDes = ctrlActDesc.MethodInfo.GetCustomAttributes(<span class=\"keyword\">typeof</span>(HttpPostAttribute), <span class=\"literal\">false</span>).Cast&lt;HttpPostAttribute&gt;().FirstOrDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">            log.LogType = context.Exception == <span class=\"literal\">null</span> ? ActionLogTypesEnum.Normal : ActionLogTypesEnum.Exception;</span><br><span class=\"line\">            log.ActionTime = DateTime.Now;</span><br><span class=\"line\">            log.ITCode = ctrl.Wtm?.LoginUserInfo?.ITCode ?? <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">            <span class=\"comment\">// 给日志的多语言属性赋值</span></span><br><span class=\"line\">            log.ModuleName = ctrlDes?.GetDescription(ctrl) ?? ctrlActDesc.ControllerName;</span><br><span class=\"line\">            log.ActionName = actDes?.GetDescription(ctrl) ?? ctrlActDesc.ActionName + (postDes == <span class=\"literal\">null</span> ? <span class=\"built_in\">string</span>.Empty : <span class=\"string\">&quot;[P]&quot;</span>);</span><br><span class=\"line\">            log.ActionUrl = context.HttpContext.Request.Path;</span><br><span class=\"line\">            log.IP = context.HttpContext.GetRemoteIpAddress();</span><br><span class=\"line\">            log.Remark = context.Exception?.ToString() ?? <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(log.Remark) == <span class=\"literal\">false</span> &amp;&amp; log.Remark.Length &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                log.Remark = log.Remark.Substring(<span class=\"number\">0</span>, <span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        \t<span class=\"comment\">// 这里非常好，反正我没想到。利用请求上下文来记录action开始时间。保持了一致性。我之前是通过私有变量来计算，可能会存在问题。起码异步的时候有问题。</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> starttime = context.HttpContext.Items[<span class=\"string\">&quot;actionstarttime&quot;</span>] <span class=\"keyword\">as</span> DateTime?;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (starttime != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                log.Duration = DateTime.Now.Subtract(starttime.Value).TotalSeconds;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> logger = context.HttpContext.RequestServices.GetRequiredService&lt;ILogger&lt;ActionLog&gt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 此处用的是.net core的系统日志来实现。具体使用我在疫情期间也看过，具体文档可看：wtm日志实现.md</span></span><br><span class=\"line\">                logger.Log&lt;ActionLog&gt;(LogLevel.Information, <span class=\"keyword\">new</span> EventId(), log, <span class=\"literal\">null</span>, (a, b) =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> a.GetLogString();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Exception != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        context.ExceptionHandled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctrl.Wtm.ConfigInfo.IsQuickDebug == <span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(context.Exception.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.HttpContext.Response.WriteAsync(MvcProgram._localizer[<span class=\"string\">&quot;Sys.PageError&quot;</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnResultExecuted(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtm源码解读_1","path":"2022/07/22/wtm源码解读-1/","eyeCatchImage":null,"excerpt":"wtm源码解读_1","date":{"_isAMomentObject":true,"_i":"2022-07-22T14:53:08.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-22T14:53:08.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","wtm","efcore","saas","多租户"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtm源码解读_3","author":"wuxinheng","date":"2022-07-22T14:54:13.000Z","description":"wtm源码解读_3","_content":"wtm根据模型会生成一下几个vm对象，vm可能就是mvc、mvvm、里面的模型、试图。\n这里可以简单理解为支撑视图的基本类\n\nBaseBatchVM：批量修改\n\n```C#\n public class BaseBatchVM<TModel, TLinkModel> : BaseVM, IBaseBatchVM<TLinkModel> where TModel : TopBasePoco,new() \nwhere TLinkModel : BaseVM\n```\n\nBaseImportVM：导入\n\n```C#\n    public class BaseImportVM<T, P> : BaseVM, IBaseImport<T>\n        where T : BaseTemplateVM, new()\n        where P : TopBasePoco, new()\n```\n\nBasePagedListVM：列表\n\n```C#\npublic class BasePagedListVM<TModel, TSearcher> : BaseVM, IBasePagedListVM<TModel, TSearcher>\n        where TModel : TopBasePoco\n        where TSearcher : BaseSearcher\n```\n\nBaseSearcher：查询对象\n\nBaseCRUDVM：CRUD对象\n\n```C#\npublic class BaseCRUDVM<TModel> : BaseVM, IBaseCRUDVM<TModel> where TModel : TopBasePoco, new()\n```\n\n因为需要对CRUD进行修改，这里对BaseCRUDVM来进行查看，继承BaseCRUDVM的类，并自动进行重写\n\n```C#\nprotected override void InitVM()\n{\n\t// 初始化数据，可供页面使用\n}\n\npublic override void DoAdd()\n{\n    base.DoAdd();\n}\n\npublic override void DoEdit(bool updateAllFields = false)\n{\n    base.DoEdit(updateAllFields);\n}\n\npublic override void DoDelete()\n{\n    base.DoDelete();\n}\n```\n\nDoAdd\n\n```C#\npublic virtual void DoAdd()\n{\n\t// 对实体进行操作，补充审计字段、租户id\n    DoAddPrepare();\n    //删除不需要的附件\n    if (DeletedFileIds != null && DeletedFileIds.Count > 0 && Wtm.ServiceProvider != null)\n    {\n        var fp = Wtm.ServiceProvider.GetRequiredService<WtmFileProvider>();\n\n        foreach (var item in DeletedFileIds)\n        {\n            fp.DeleteFile(item.ToString(), DC);\n        }\n    }\n    DC.SaveChanges();\n}\n```\n\nDoEdit\n\n```C#\n/// <summary>\n/// 修改，进行默认的修改操作。子类如有自定义操作应重载本函数\n/// </summary>\n/// <param name=\"updateAllFields\">为true时，框架会更新当前Entity的全部值，为false时，框架会检查Request.Form里的key，只更新表单提交的字段</param>\npublic virtual void DoEdit(bool updateAllFields = false)\n        {\n    \t    // 应该和DoAdd, 对实体进行操作，补充审计字段\n            DoEditPrepare(updateAllFields);\n\n            try\n            {\n                DC.SaveChanges();\n            }\n            catch\n            {\n                MSD.AddModelError(\" \", Localizer[\"Sys.EditFailed\"]);\n            }\n            //删除不需要的附件\n            if (DeletedFileIds != null && DeletedFileIds.Count > 0 && Wtm.ServiceProvider != null)\n            {\n                var fp = Wtm.ServiceProvider.GetRequiredService<WtmFileProvider>();\n\n                foreach (var item in DeletedFileIds)\n                {\n                    fp.DeleteFile(item.ToString(), DC.ReCreate());\n                }\n            }\n\n        }\n```\n\nDoDelete\n\n```C#\n/// <summary>\n/// 删除，进行默认的删除操作。子类如有自定义操作应重载本函数\n/// </summary>\npublic virtual void DoDelete()\n{\n    //如果是PersistPoco，则把IsValid设为false，并不进行物理删除\n    if (typeof(IPersistPoco).IsAssignableFrom(typeof(TModel)))\n    {\n        FC.Add(\"Entity.IsValid\", 0);\n        (Entity as IPersistPoco).IsValid = false;\n\n        var pros = typeof(TModel).GetAllProperties();\n        //如果包含List<PersistPoco>，将子表IsValid也设置为false\n        var fas = pros.Where(x => typeof(IEnumerable<IPersistPoco>).IsAssignableFrom(x.PropertyType)).ToList();\n        foreach (var f in fas)\n        {\n            f.SetValue(Entity, f.PropertyType.GetConstructor(Type.EmptyTypes).Invoke(null));\n        }\n\n        DoEditPrepare(false);\n        DC.SaveChanges();\n    }\n    //如果是普通的TopBasePoco，则进行物理删除\n    else if (typeof(TModel).GetTypeInfo().IsSubclassOf(typeof(TopBasePoco)))\n    {\n        DoRealDelete();\n    }\n}\n```\n\n以上代码补充少量注释\n\n重点看一下DoAdd()中的DoAddPrepare()\n\n```c#\nprivate void DoAddPrepare()\n        {\n            var pros = typeof(TModel).GetAllProperties();\n            //将所有TopBasePoco的属性赋空值，防止添加关联的重复内容\n            if (typeof(TModel) != typeof(FileAttachment))\n            {\n                foreach (var pro in pros)\n                {\n                    if (pro.PropertyType.GetTypeInfo().IsSubclassOf(typeof(TopBasePoco)))\n                    {\n                        pro.SetValue(Entity, null);\n                    }\n                }\n            }\n            //自动设定添加日期和添加人\n            if (typeof(IBasePoco).IsAssignableFrom(typeof(TModel)))\n            {\n                IBasePoco ent = Entity as IBasePoco;\n                if (ent.CreateTime == null)\n                {\n                    ent.CreateTime = DateTime.Now;\n                }\n                if (string.IsNullOrEmpty(ent.CreateBy))\n                {\n                    ent.CreateBy = LoginUserInfo?.ITCode;\n                }\n            }\n            //自动设定租户id,这也是我在新版代码中看到的，根据我项目实际情况改了下判断继承类型\n            if (typeof(IHasTentant).IsAssignableFrom(typeof(TModel)))\n            {\n                IHasTentant ent = Entity as IHasTentant;\n                ent.TenantCode = LoginUserInfo?.TenantCode;\n            }\n            if (typeof(IPersistPoco).IsAssignableFrom(typeof(TModel)))\n            {\n                (Entity as IPersistPoco).IsValid = true;\n            }\n\n            #region 更新子表\n            foreach (var pro in pros)\n            {\n                //找到类型为List<xxx>的字段\n                if (pro.PropertyType.GenericTypeArguments.Count() > 0)\n                {\n                    //获取xxx的类型\n                    var ftype = pro.PropertyType.GenericTypeArguments.First();\n                    //如果xxx继承自TopBasePoco\n                    if (ftype.IsSubclassOf(typeof(TopBasePoco)))\n                    {\n                        //界面传过来的子表数据\n                        IEnumerable<TopBasePoco> list = pro.GetValue(Entity) as IEnumerable<TopBasePoco>;\n                        if (list != null && list.Count() > 0)\n                        {\n                            string fkname = DC.GetFKName<TModel>(pro.Name);\n                            var itemPros = ftype.GetAllProperties();\n\n                            bool found = false;\n                            foreach (var newitem in list)\n                            {\n                                foreach (var itempro in itemPros)\n                                {\n                                    if (itempro.PropertyType.IsSubclassOf(typeof(TopBasePoco)))\n                                    {\n                                        itempro.SetValue(newitem, null);\n                                    }\n                                    if (!string.IsNullOrEmpty(fkname))\n                                    {\n                                        if (itempro.Name.ToLower() == fkname.ToLower())\n                                        {\n                                            try\n                                            {\n                                                itempro.SetValue(newitem, Entity.GetID());\n                                                found = true;\n                                            }\n                                            catch { }\n                                        }\n                                    }\n                                }\n                            }\n                            //如果没有找到相应的外建字段，则可能是多对多的关系，或者做了特殊的设定，这种情况框架无法支持，直接退出本次循环\n                            if (found == false)\n                            {\n                                continue;\n                            }\n                            //循环页面传过来的子表数据,自动设定添加日期和添加人\n                            foreach (var newitem in list)\n                            {\n                                var subtype = newitem.GetType();\n                                if (typeof(IBasePoco).IsAssignableFrom(subtype))\n                                {\n                                    IBasePoco ent = newitem as IBasePoco;\n                                    if (ent.CreateTime == null)\n                                    {\n                                        ent.CreateTime = DateTime.Now;\n                                    }\n                                    if (string.IsNullOrEmpty(ent.CreateBy))\n                                    {\n                                        ent.CreateBy = LoginUserInfo?.ITCode;\n                                    }\n                                }\n                                // 同样\n                                if (typeof(IHasTentant).IsAssignableFrom(typeof(TModel)))\n                                {\n                                    IHasTentant ent = Entity as IHasTentant;\n                                    ent.TenantCode = LoginUserInfo?.TenantCode;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            #endregion\n\n\n            //添加数据\n            DC.Set<TModel>().Add(Entity);\n\n        }\n```\n\n这里已经看到了一部分的数据补充。但是感觉还是不全。这个我们项目中重写了SaveChanges(),详见《wtm多租户实现_增删改》.md","source":"_posts/wtm源码解读-3.md","raw":"---\ntitle: wtm源码解读_3\nauthor: wuxinheng\ndate: 2022-07-22 22:54:13\ndescription: wtm源码解读_3\ntags:\n- efcore\n- saas\n- 多租户\n- dotnet\n- wtm\ncategories:\n- dotnet\n---\nwtm根据模型会生成一下几个vm对象，vm可能就是mvc、mvvm、里面的模型、试图。\n这里可以简单理解为支撑视图的基本类\n\nBaseBatchVM：批量修改\n\n```C#\n public class BaseBatchVM<TModel, TLinkModel> : BaseVM, IBaseBatchVM<TLinkModel> where TModel : TopBasePoco,new() \nwhere TLinkModel : BaseVM\n```\n\nBaseImportVM：导入\n\n```C#\n    public class BaseImportVM<T, P> : BaseVM, IBaseImport<T>\n        where T : BaseTemplateVM, new()\n        where P : TopBasePoco, new()\n```\n\nBasePagedListVM：列表\n\n```C#\npublic class BasePagedListVM<TModel, TSearcher> : BaseVM, IBasePagedListVM<TModel, TSearcher>\n        where TModel : TopBasePoco\n        where TSearcher : BaseSearcher\n```\n\nBaseSearcher：查询对象\n\nBaseCRUDVM：CRUD对象\n\n```C#\npublic class BaseCRUDVM<TModel> : BaseVM, IBaseCRUDVM<TModel> where TModel : TopBasePoco, new()\n```\n\n因为需要对CRUD进行修改，这里对BaseCRUDVM来进行查看，继承BaseCRUDVM的类，并自动进行重写\n\n```C#\nprotected override void InitVM()\n{\n\t// 初始化数据，可供页面使用\n}\n\npublic override void DoAdd()\n{\n    base.DoAdd();\n}\n\npublic override void DoEdit(bool updateAllFields = false)\n{\n    base.DoEdit(updateAllFields);\n}\n\npublic override void DoDelete()\n{\n    base.DoDelete();\n}\n```\n\nDoAdd\n\n```C#\npublic virtual void DoAdd()\n{\n\t// 对实体进行操作，补充审计字段、租户id\n    DoAddPrepare();\n    //删除不需要的附件\n    if (DeletedFileIds != null && DeletedFileIds.Count > 0 && Wtm.ServiceProvider != null)\n    {\n        var fp = Wtm.ServiceProvider.GetRequiredService<WtmFileProvider>();\n\n        foreach (var item in DeletedFileIds)\n        {\n            fp.DeleteFile(item.ToString(), DC);\n        }\n    }\n    DC.SaveChanges();\n}\n```\n\nDoEdit\n\n```C#\n/// <summary>\n/// 修改，进行默认的修改操作。子类如有自定义操作应重载本函数\n/// </summary>\n/// <param name=\"updateAllFields\">为true时，框架会更新当前Entity的全部值，为false时，框架会检查Request.Form里的key，只更新表单提交的字段</param>\npublic virtual void DoEdit(bool updateAllFields = false)\n        {\n    \t    // 应该和DoAdd, 对实体进行操作，补充审计字段\n            DoEditPrepare(updateAllFields);\n\n            try\n            {\n                DC.SaveChanges();\n            }\n            catch\n            {\n                MSD.AddModelError(\" \", Localizer[\"Sys.EditFailed\"]);\n            }\n            //删除不需要的附件\n            if (DeletedFileIds != null && DeletedFileIds.Count > 0 && Wtm.ServiceProvider != null)\n            {\n                var fp = Wtm.ServiceProvider.GetRequiredService<WtmFileProvider>();\n\n                foreach (var item in DeletedFileIds)\n                {\n                    fp.DeleteFile(item.ToString(), DC.ReCreate());\n                }\n            }\n\n        }\n```\n\nDoDelete\n\n```C#\n/// <summary>\n/// 删除，进行默认的删除操作。子类如有自定义操作应重载本函数\n/// </summary>\npublic virtual void DoDelete()\n{\n    //如果是PersistPoco，则把IsValid设为false，并不进行物理删除\n    if (typeof(IPersistPoco).IsAssignableFrom(typeof(TModel)))\n    {\n        FC.Add(\"Entity.IsValid\", 0);\n        (Entity as IPersistPoco).IsValid = false;\n\n        var pros = typeof(TModel).GetAllProperties();\n        //如果包含List<PersistPoco>，将子表IsValid也设置为false\n        var fas = pros.Where(x => typeof(IEnumerable<IPersistPoco>).IsAssignableFrom(x.PropertyType)).ToList();\n        foreach (var f in fas)\n        {\n            f.SetValue(Entity, f.PropertyType.GetConstructor(Type.EmptyTypes).Invoke(null));\n        }\n\n        DoEditPrepare(false);\n        DC.SaveChanges();\n    }\n    //如果是普通的TopBasePoco，则进行物理删除\n    else if (typeof(TModel).GetTypeInfo().IsSubclassOf(typeof(TopBasePoco)))\n    {\n        DoRealDelete();\n    }\n}\n```\n\n以上代码补充少量注释\n\n重点看一下DoAdd()中的DoAddPrepare()\n\n```c#\nprivate void DoAddPrepare()\n        {\n            var pros = typeof(TModel).GetAllProperties();\n            //将所有TopBasePoco的属性赋空值，防止添加关联的重复内容\n            if (typeof(TModel) != typeof(FileAttachment))\n            {\n                foreach (var pro in pros)\n                {\n                    if (pro.PropertyType.GetTypeInfo().IsSubclassOf(typeof(TopBasePoco)))\n                    {\n                        pro.SetValue(Entity, null);\n                    }\n                }\n            }\n            //自动设定添加日期和添加人\n            if (typeof(IBasePoco).IsAssignableFrom(typeof(TModel)))\n            {\n                IBasePoco ent = Entity as IBasePoco;\n                if (ent.CreateTime == null)\n                {\n                    ent.CreateTime = DateTime.Now;\n                }\n                if (string.IsNullOrEmpty(ent.CreateBy))\n                {\n                    ent.CreateBy = LoginUserInfo?.ITCode;\n                }\n            }\n            //自动设定租户id,这也是我在新版代码中看到的，根据我项目实际情况改了下判断继承类型\n            if (typeof(IHasTentant).IsAssignableFrom(typeof(TModel)))\n            {\n                IHasTentant ent = Entity as IHasTentant;\n                ent.TenantCode = LoginUserInfo?.TenantCode;\n            }\n            if (typeof(IPersistPoco).IsAssignableFrom(typeof(TModel)))\n            {\n                (Entity as IPersistPoco).IsValid = true;\n            }\n\n            #region 更新子表\n            foreach (var pro in pros)\n            {\n                //找到类型为List<xxx>的字段\n                if (pro.PropertyType.GenericTypeArguments.Count() > 0)\n                {\n                    //获取xxx的类型\n                    var ftype = pro.PropertyType.GenericTypeArguments.First();\n                    //如果xxx继承自TopBasePoco\n                    if (ftype.IsSubclassOf(typeof(TopBasePoco)))\n                    {\n                        //界面传过来的子表数据\n                        IEnumerable<TopBasePoco> list = pro.GetValue(Entity) as IEnumerable<TopBasePoco>;\n                        if (list != null && list.Count() > 0)\n                        {\n                            string fkname = DC.GetFKName<TModel>(pro.Name);\n                            var itemPros = ftype.GetAllProperties();\n\n                            bool found = false;\n                            foreach (var newitem in list)\n                            {\n                                foreach (var itempro in itemPros)\n                                {\n                                    if (itempro.PropertyType.IsSubclassOf(typeof(TopBasePoco)))\n                                    {\n                                        itempro.SetValue(newitem, null);\n                                    }\n                                    if (!string.IsNullOrEmpty(fkname))\n                                    {\n                                        if (itempro.Name.ToLower() == fkname.ToLower())\n                                        {\n                                            try\n                                            {\n                                                itempro.SetValue(newitem, Entity.GetID());\n                                                found = true;\n                                            }\n                                            catch { }\n                                        }\n                                    }\n                                }\n                            }\n                            //如果没有找到相应的外建字段，则可能是多对多的关系，或者做了特殊的设定，这种情况框架无法支持，直接退出本次循环\n                            if (found == false)\n                            {\n                                continue;\n                            }\n                            //循环页面传过来的子表数据,自动设定添加日期和添加人\n                            foreach (var newitem in list)\n                            {\n                                var subtype = newitem.GetType();\n                                if (typeof(IBasePoco).IsAssignableFrom(subtype))\n                                {\n                                    IBasePoco ent = newitem as IBasePoco;\n                                    if (ent.CreateTime == null)\n                                    {\n                                        ent.CreateTime = DateTime.Now;\n                                    }\n                                    if (string.IsNullOrEmpty(ent.CreateBy))\n                                    {\n                                        ent.CreateBy = LoginUserInfo?.ITCode;\n                                    }\n                                }\n                                // 同样\n                                if (typeof(IHasTentant).IsAssignableFrom(typeof(TModel)))\n                                {\n                                    IHasTentant ent = Entity as IHasTentant;\n                                    ent.TenantCode = LoginUserInfo?.TenantCode;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            #endregion\n\n\n            //添加数据\n            DC.Set<TModel>().Add(Entity);\n\n        }\n```\n\n这里已经看到了一部分的数据补充。但是感觉还是不全。这个我们项目中重写了SaveChanges(),详见《wtm多租户实现_增删改》.md","slug":"wtm源码解读-3","published":1,"updated":"2023-09-24T07:38:31.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhx0038owtk7ue4c9ns","content":"<p>wtm根据模型会生成一下几个vm对象，vm可能就是mvc、mvvm、里面的模型、试图。<br>这里可以简单理解为支撑视图的基本类</p>\n<p>BaseBatchVM：批量修改</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseBatchVM</span>&lt;<span class=\"title\">TModel</span>, <span class=\"title\">TLinkModel</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBaseBatchVM</span>&lt;<span class=\"title\">TLinkModel</span>&gt; <span class=\"keyword\">where</span> <span class=\"title\">TModel</span> : <span class=\"title\">TopBasePoco</span>,<span class=\"title\">new</span>() </span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"title\">TLinkModel</span> : <span class=\"title\">BaseVM</span></span><br></pre></td></tr></table></figure>\n\n<p>BaseImportVM：导入</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseImportVM</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">P</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBaseImport</span>&lt;<span class=\"title\">T</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">where</span> <span class=\"title\">T</span> : <span class=\"title\">BaseTemplateVM</span>, <span class=\"title\">new</span>()</span><br><span class=\"line\">    <span class=\"keyword\">where</span> <span class=\"title\">P</span> : <span class=\"title\">TopBasePoco</span>, <span class=\"title\">new</span>()</span><br></pre></td></tr></table></figure>\n\n<p>BasePagedListVM：列表</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BasePagedListVM</span>&lt;<span class=\"title\">TModel</span>, <span class=\"title\">TSearcher</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBasePagedListVM</span>&lt;<span class=\"title\">TModel</span>, <span class=\"title\">TSearcher</span>&gt;</span><br><span class=\"line\">        <span class=\"keyword\">where</span> <span class=\"title\">TModel</span> : <span class=\"title\">TopBasePoco</span></span><br><span class=\"line\">        <span class=\"keyword\">where</span> <span class=\"title\">TSearcher</span> : <span class=\"title\">BaseSearcher</span></span><br></pre></td></tr></table></figure>\n\n<p>BaseSearcher：查询对象</p>\n<p>BaseCRUDVM：CRUD对象</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseCRUDVM</span>&lt;<span class=\"title\">TModel</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBaseCRUDVM</span>&lt;<span class=\"title\">TModel</span>&gt; <span class=\"keyword\">where</span> <span class=\"title\">TModel</span> : <span class=\"title\">TopBasePoco</span>, <span class=\"title\">new</span>()</span><br></pre></td></tr></table></figure>\n\n<p>因为需要对CRUD进行修改，这里对BaseCRUDVM来进行查看，继承BaseCRUDVM的类，并自动进行重写</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">InitVM</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化数据，可供页面使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">DoAdd</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.DoAdd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">DoEdit</span>(<span class=\"params\"><span class=\"built_in\">bool</span> updateAllFields = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.DoEdit(updateAllFields);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">DoDelete</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.DoDelete();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DoAdd</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">DoAdd</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 对实体进行操作，补充审计字段、租户id</span></span><br><span class=\"line\">    DoAddPrepare();</span><br><span class=\"line\">    <span class=\"comment\">//删除不需要的附件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DeletedFileIds != <span class=\"literal\">null</span> &amp;&amp; DeletedFileIds.Count &gt; <span class=\"number\">0</span> &amp;&amp; Wtm.ServiceProvider != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fp = Wtm.ServiceProvider.GetRequiredService&lt;WtmFileProvider&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> DeletedFileIds)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fp.DeleteFile(item.ToString(), DC);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DC.SaveChanges();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DoEdit</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 修改，进行默认的修改操作。子类如有自定义操作应重载本函数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;updateAllFields&quot;&gt;</span>为true时，框架会更新当前Entity的全部值，为false时，框架会检查Request.Form里的key，只更新表单提交的字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">DoEdit</span>(<span class=\"params\"><span class=\"built_in\">bool</span> updateAllFields = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    \t    <span class=\"comment\">// 应该和DoAdd, 对实体进行操作，补充审计字段</span></span><br><span class=\"line\">            DoEditPrepare(updateAllFields);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DC.SaveChanges();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                MSD.AddModelError(<span class=\"string\">&quot; &quot;</span>, Localizer[<span class=\"string\">&quot;Sys.EditFailed&quot;</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//删除不需要的附件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (DeletedFileIds != <span class=\"literal\">null</span> &amp;&amp; DeletedFileIds.Count &gt; <span class=\"number\">0</span> &amp;&amp; Wtm.ServiceProvider != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> fp = Wtm.ServiceProvider.GetRequiredService&lt;WtmFileProvider&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> DeletedFileIds)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fp.DeleteFile(item.ToString(), DC.ReCreate());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>DoDelete</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 删除，进行默认的删除操作。子类如有自定义操作应重载本函数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">DoDelete</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是PersistPoco，则把IsValid设为false，并不进行物理删除</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IPersistPoco).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FC.Add(<span class=\"string\">&quot;Entity.IsValid&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        (Entity <span class=\"keyword\">as</span> IPersistPoco).IsValid = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> pros = <span class=\"keyword\">typeof</span>(TModel).GetAllProperties();</span><br><span class=\"line\">        <span class=\"comment\">//如果包含List&lt;PersistPoco&gt;，将子表IsValid也设置为false</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fas = pros.Where(x =&gt; <span class=\"keyword\">typeof</span>(IEnumerable&lt;IPersistPoco&gt;).IsAssignableFrom(x.PropertyType)).ToList();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> f <span class=\"keyword\">in</span> fas)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f.SetValue(Entity, f.PropertyType.GetConstructor(Type.EmptyTypes).Invoke(<span class=\"literal\">null</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        DoEditPrepare(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        DC.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是普通的TopBasePoco，则进行物理删除</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(TModel).GetTypeInfo().IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DoRealDelete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码补充少量注释</p>\n<p>重点看一下DoAdd()中的DoAddPrepare()</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">DoAddPrepare</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pros = <span class=\"keyword\">typeof</span>(TModel).GetAllProperties();</span><br><span class=\"line\">            <span class=\"comment\">//将所有TopBasePoco的属性赋空值，防止添加关联的重复内容</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(TModel) != <span class=\"keyword\">typeof</span>(FileAttachment))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> pro <span class=\"keyword\">in</span> pros)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pro.PropertyType.GetTypeInfo().IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        pro.SetValue(Entity, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//自动设定添加日期和添加人</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IBasePoco).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IBasePoco ent = Entity <span class=\"keyword\">as</span> IBasePoco;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ent.CreateTime == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ent.CreateTime = DateTime.Now;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(ent.CreateBy))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ent.CreateBy = LoginUserInfo?.ITCode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//自动设定租户id,这也是我在新版代码中看到的，根据我项目实际情况改了下判断继承类型</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IHasTentant ent = Entity <span class=\"keyword\">as</span> IHasTentant;</span><br><span class=\"line\">                ent.TenantCode = LoginUserInfo?.TenantCode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IPersistPoco).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                (Entity <span class=\"keyword\">as</span> IPersistPoco).IsValid = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">#<span class=\"keyword\">region</span> 更新子表</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> pro <span class=\"keyword\">in</span> pros)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到类型为List&lt;xxx&gt;的字段</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pro.PropertyType.GenericTypeArguments.Count() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取xxx的类型</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> ftype = pro.PropertyType.GenericTypeArguments.First();</span><br><span class=\"line\">                    <span class=\"comment\">//如果xxx继承自TopBasePoco</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ftype.IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//界面传过来的子表数据</span></span><br><span class=\"line\">                        IEnumerable&lt;TopBasePoco&gt; list = pro.GetValue(Entity) <span class=\"keyword\">as</span> IEnumerable&lt;TopBasePoco&gt;;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (list != <span class=\"literal\">null</span> &amp;&amp; list.Count() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">string</span> fkname = DC.GetFKName&lt;TModel&gt;(pro.Name);</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> itemPros = ftype.GetAllProperties();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"built_in\">bool</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> newitem <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> itempro <span class=\"keyword\">in</span> itemPros)</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (itempro.PropertyType.IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        itempro.SetValue(newitem, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(fkname))</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (itempro.Name.ToLower() == fkname.ToLower())</span><br><span class=\"line\">                                        &#123;</span><br><span class=\"line\">                                            <span class=\"keyword\">try</span></span><br><span class=\"line\">                                            &#123;</span><br><span class=\"line\">                                                itempro.SetValue(newitem, Entity.GetID());</span><br><span class=\"line\">                                                found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                            <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">//如果没有找到相应的外建字段，则可能是多对多的关系，或者做了特殊的设定，这种情况框架无法支持，直接退出本次循环</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (found == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">//循环页面传过来的子表数据,自动设定添加日期和添加人</span></span><br><span class=\"line\">                            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> newitem <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">var</span> subtype = newitem.GetType();</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IBasePoco).IsAssignableFrom(subtype))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    IBasePoco ent = newitem <span class=\"keyword\">as</span> IBasePoco;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (ent.CreateTime == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        ent.CreateTime = DateTime.Now;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(ent.CreateBy))</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        ent.CreateBy = LoginUserInfo?.ITCode;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"comment\">// 同样</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    IHasTentant ent = Entity <span class=\"keyword\">as</span> IHasTentant;</span><br><span class=\"line\">                                    ent.TenantCode = LoginUserInfo?.TenantCode;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//添加数据</span></span><br><span class=\"line\">            DC.Set&lt;TModel&gt;().Add(Entity);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里已经看到了一部分的数据补充。但是感觉还是不全。这个我们项目中重写了SaveChanges(),详见《wtm多租户实现_增删改》.md</p>\n","site":{"data":{}},"excerpt":"","more":"<p>wtm根据模型会生成一下几个vm对象，vm可能就是mvc、mvvm、里面的模型、试图。<br>这里可以简单理解为支撑视图的基本类</p>\n<p>BaseBatchVM：批量修改</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseBatchVM</span>&lt;<span class=\"title\">TModel</span>, <span class=\"title\">TLinkModel</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBaseBatchVM</span>&lt;<span class=\"title\">TLinkModel</span>&gt; <span class=\"keyword\">where</span> <span class=\"title\">TModel</span> : <span class=\"title\">TopBasePoco</span>,<span class=\"title\">new</span>() </span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"title\">TLinkModel</span> : <span class=\"title\">BaseVM</span></span><br></pre></td></tr></table></figure>\n\n<p>BaseImportVM：导入</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseImportVM</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">P</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBaseImport</span>&lt;<span class=\"title\">T</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">where</span> <span class=\"title\">T</span> : <span class=\"title\">BaseTemplateVM</span>, <span class=\"title\">new</span>()</span><br><span class=\"line\">    <span class=\"keyword\">where</span> <span class=\"title\">P</span> : <span class=\"title\">TopBasePoco</span>, <span class=\"title\">new</span>()</span><br></pre></td></tr></table></figure>\n\n<p>BasePagedListVM：列表</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BasePagedListVM</span>&lt;<span class=\"title\">TModel</span>, <span class=\"title\">TSearcher</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBasePagedListVM</span>&lt;<span class=\"title\">TModel</span>, <span class=\"title\">TSearcher</span>&gt;</span><br><span class=\"line\">        <span class=\"keyword\">where</span> <span class=\"title\">TModel</span> : <span class=\"title\">TopBasePoco</span></span><br><span class=\"line\">        <span class=\"keyword\">where</span> <span class=\"title\">TSearcher</span> : <span class=\"title\">BaseSearcher</span></span><br></pre></td></tr></table></figure>\n\n<p>BaseSearcher：查询对象</p>\n<p>BaseCRUDVM：CRUD对象</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseCRUDVM</span>&lt;<span class=\"title\">TModel</span>&gt; : <span class=\"title\">BaseVM</span>, <span class=\"title\">IBaseCRUDVM</span>&lt;<span class=\"title\">TModel</span>&gt; <span class=\"keyword\">where</span> <span class=\"title\">TModel</span> : <span class=\"title\">TopBasePoco</span>, <span class=\"title\">new</span>()</span><br></pre></td></tr></table></figure>\n\n<p>因为需要对CRUD进行修改，这里对BaseCRUDVM来进行查看，继承BaseCRUDVM的类，并自动进行重写</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">InitVM</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化数据，可供页面使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">DoAdd</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.DoAdd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">DoEdit</span>(<span class=\"params\"><span class=\"built_in\">bool</span> updateAllFields = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.DoEdit(updateAllFields);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">DoDelete</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.DoDelete();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DoAdd</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">DoAdd</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 对实体进行操作，补充审计字段、租户id</span></span><br><span class=\"line\">    DoAddPrepare();</span><br><span class=\"line\">    <span class=\"comment\">//删除不需要的附件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DeletedFileIds != <span class=\"literal\">null</span> &amp;&amp; DeletedFileIds.Count &gt; <span class=\"number\">0</span> &amp;&amp; Wtm.ServiceProvider != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fp = Wtm.ServiceProvider.GetRequiredService&lt;WtmFileProvider&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> DeletedFileIds)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fp.DeleteFile(item.ToString(), DC);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DC.SaveChanges();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DoEdit</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 修改，进行默认的修改操作。子类如有自定义操作应重载本函数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;updateAllFields&quot;&gt;</span>为true时，框架会更新当前Entity的全部值，为false时，框架会检查Request.Form里的key，只更新表单提交的字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">DoEdit</span>(<span class=\"params\"><span class=\"built_in\">bool</span> updateAllFields = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    \t    <span class=\"comment\">// 应该和DoAdd, 对实体进行操作，补充审计字段</span></span><br><span class=\"line\">            DoEditPrepare(updateAllFields);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DC.SaveChanges();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                MSD.AddModelError(<span class=\"string\">&quot; &quot;</span>, Localizer[<span class=\"string\">&quot;Sys.EditFailed&quot;</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//删除不需要的附件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (DeletedFileIds != <span class=\"literal\">null</span> &amp;&amp; DeletedFileIds.Count &gt; <span class=\"number\">0</span> &amp;&amp; Wtm.ServiceProvider != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> fp = Wtm.ServiceProvider.GetRequiredService&lt;WtmFileProvider&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> DeletedFileIds)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fp.DeleteFile(item.ToString(), DC.ReCreate());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>DoDelete</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 删除，进行默认的删除操作。子类如有自定义操作应重载本函数</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">DoDelete</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果是PersistPoco，则把IsValid设为false，并不进行物理删除</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IPersistPoco).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FC.Add(<span class=\"string\">&quot;Entity.IsValid&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        (Entity <span class=\"keyword\">as</span> IPersistPoco).IsValid = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> pros = <span class=\"keyword\">typeof</span>(TModel).GetAllProperties();</span><br><span class=\"line\">        <span class=\"comment\">//如果包含List&lt;PersistPoco&gt;，将子表IsValid也设置为false</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fas = pros.Where(x =&gt; <span class=\"keyword\">typeof</span>(IEnumerable&lt;IPersistPoco&gt;).IsAssignableFrom(x.PropertyType)).ToList();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> f <span class=\"keyword\">in</span> fas)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f.SetValue(Entity, f.PropertyType.GetConstructor(Type.EmptyTypes).Invoke(<span class=\"literal\">null</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        DoEditPrepare(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        DC.SaveChanges();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是普通的TopBasePoco，则进行物理删除</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(TModel).GetTypeInfo().IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DoRealDelete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码补充少量注释</p>\n<p>重点看一下DoAdd()中的DoAddPrepare()</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">DoAddPrepare</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> pros = <span class=\"keyword\">typeof</span>(TModel).GetAllProperties();</span><br><span class=\"line\">            <span class=\"comment\">//将所有TopBasePoco的属性赋空值，防止添加关联的重复内容</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(TModel) != <span class=\"keyword\">typeof</span>(FileAttachment))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> pro <span class=\"keyword\">in</span> pros)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pro.PropertyType.GetTypeInfo().IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        pro.SetValue(Entity, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//自动设定添加日期和添加人</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IBasePoco).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IBasePoco ent = Entity <span class=\"keyword\">as</span> IBasePoco;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ent.CreateTime == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ent.CreateTime = DateTime.Now;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(ent.CreateBy))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ent.CreateBy = LoginUserInfo?.ITCode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//自动设定租户id,这也是我在新版代码中看到的，根据我项目实际情况改了下判断继承类型</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IHasTentant ent = Entity <span class=\"keyword\">as</span> IHasTentant;</span><br><span class=\"line\">                ent.TenantCode = LoginUserInfo?.TenantCode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IPersistPoco).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                (Entity <span class=\"keyword\">as</span> IPersistPoco).IsValid = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">#<span class=\"keyword\">region</span> 更新子表</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> pro <span class=\"keyword\">in</span> pros)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到类型为List&lt;xxx&gt;的字段</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pro.PropertyType.GenericTypeArguments.Count() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取xxx的类型</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> ftype = pro.PropertyType.GenericTypeArguments.First();</span><br><span class=\"line\">                    <span class=\"comment\">//如果xxx继承自TopBasePoco</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ftype.IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//界面传过来的子表数据</span></span><br><span class=\"line\">                        IEnumerable&lt;TopBasePoco&gt; list = pro.GetValue(Entity) <span class=\"keyword\">as</span> IEnumerable&lt;TopBasePoco&gt;;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (list != <span class=\"literal\">null</span> &amp;&amp; list.Count() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">string</span> fkname = DC.GetFKName&lt;TModel&gt;(pro.Name);</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> itemPros = ftype.GetAllProperties();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"built_in\">bool</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> newitem <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> itempro <span class=\"keyword\">in</span> itemPros)</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (itempro.PropertyType.IsSubclassOf(<span class=\"keyword\">typeof</span>(TopBasePoco)))</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        itempro.SetValue(newitem, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(fkname))</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">if</span> (itempro.Name.ToLower() == fkname.ToLower())</span><br><span class=\"line\">                                        &#123;</span><br><span class=\"line\">                                            <span class=\"keyword\">try</span></span><br><span class=\"line\">                                            &#123;</span><br><span class=\"line\">                                                itempro.SetValue(newitem, Entity.GetID());</span><br><span class=\"line\">                                                found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                            <span class=\"keyword\">catch</span> &#123; &#125;</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">//如果没有找到相应的外建字段，则可能是多对多的关系，或者做了特殊的设定，这种情况框架无法支持，直接退出本次循环</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (found == <span class=\"literal\">false</span>)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">//循环页面传过来的子表数据,自动设定添加日期和添加人</span></span><br><span class=\"line\">                            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> newitem <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">var</span> subtype = newitem.GetType();</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IBasePoco).IsAssignableFrom(subtype))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    IBasePoco ent = newitem <span class=\"keyword\">as</span> IBasePoco;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (ent.CreateTime == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        ent.CreateTime = DateTime.Now;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(ent.CreateBy))</span><br><span class=\"line\">                                    &#123;</span><br><span class=\"line\">                                        ent.CreateBy = LoginUserInfo?.ITCode;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"comment\">// 同样</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IHasTentant).IsAssignableFrom(<span class=\"keyword\">typeof</span>(TModel)))</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    IHasTentant ent = Entity <span class=\"keyword\">as</span> IHasTentant;</span><br><span class=\"line\">                                    ent.TenantCode = LoginUserInfo?.TenantCode;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//添加数据</span></span><br><span class=\"line\">            DC.Set&lt;TModel&gt;().Add(Entity);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里已经看到了一部分的数据补充。但是感觉还是不全。这个我们项目中重写了SaveChanges(),详见《wtm多租户实现_增删改》.md</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtm源码解读_3","path":"2022/07/22/wtm源码解读-3/","eyeCatchImage":null,"excerpt":"wtm源码解读_3","date":{"_isAMomentObject":true,"_i":"2022-07-22T14:54:13.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-22T14:54:13.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","wtm","efcore","saas","多租户"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtm源码解读_2","author":"wuxinheng","date":"2022-07-22T14:53:35.000Z","description":"wtm源码解读_2","_content":"### wtm第一次创建DC\n\n1. 找到DC\n\n   WTMContext.cs\n\n   ```C#\n   // 这个代码让我回到了19刚出来工作写的VB.net\n   // 具体不清楚为什么要这么写，可能是之前的代码懒得改。\n   // public IDataContext DC{get;set;} 有什么区别吗？大学老师也是这么教的。\n   // 大佬懂得求指教。\n   private IDataContext _dc;\n   public IDataContext DC\n   {\n       get\n       {\n           if (_dc == null)\n           {\n               _dc = this.CreateDC(); // 进入话题，看CreateDC()\n           }\n           return _dc;\n       }\n       set\n       {\n           _dc = value;\n       }\n   }\n   \n   ```\n\n   CreateDC()：这里贴的是最新版的代码\n\n   ```C#\n   public virtual IDataContext CreateDC(bool isLog = false, string cskey = null, bool logerror = true)\n   {\n       string cs = cskey ?? CurrentCS;\n       string tenantCode = null;\n   \t// 获取所有的租户\n       var tenants = GlobaInfo.AllTenant ?? new List<FrameworkTenant>();\n       string tc = _loginUserInfo?.CurrentTenant;\n       // 通过域名来获取租户\n       if (tc == null && HttpContext?.Request?.Host != null)\n               {\n                   tc = tenants.Where(x => x.TDomain != null && x.TDomain.ToLower() == HttpContext.Request.Host.ToString().ToLower()).Select(x => x.TCode).FirstOrDefault();\n               }\n       // 通过_loginUserInfo来获取租户，这里因该是考虑到域名下其他租户的登录\n       // 我现在需要的就是这一步。_loginUserInfo.TenantCode已经有了，但是代入数据库，数据库初始化有点问题\n       if (tc != null)\n               {\n                   var item = tenants.Where(x => x.TCode == tc).FirstOrDefault();\n                   tenantCode = tc;\n                   //如果租户指定了数据库，则返回\n                   if (string.IsNullOrEmpty(cs) && item?.IsUsingDB == true)\n                   {\n                       return item.CreateDC(this);\n                   }\n               }\n   \n       if (isLog == true)\n               {\n                   if (ConfigInfo.Connections?.Where(x => x.Key.ToLower() == \"defaultlog\").FirstOrDefault() != null)\n                   {\n                       cs = \"defaultlog\";\n                   }\n               }\n       if (string.IsNullOrEmpty(cs))\n       {\n           cs = \"default\";\n       }\n       // 在原来的代码里面没有上面的内容。这里就怎么说呢，讲究人做讲究事。哈哈\n       // 我事直接通过CreateDC()传参来传递tenantCode，进而实例化\n       // 这里就是比较优雅通过对象的来进行操作，后面我也该成这样了\n       var rv = ConfigInfo.Connections.Where(x => x.Key.ToLower() == cs.ToLower()).FirstOrDefault().CreateDC();\n       rv.IsDebug = ConfigInfo.IsQuickDebug;\n       // 设置tenantCode给DataContext _tenantCode赋值,这里成功把值传到dbcontext\n       rv.SetTenantCode(tenantCode);\n       if (logerror == true)\n       {\n           rv.SetLoggerFactory(_loggerFactory);\n       }\n       return rv;\n   }\n   ```","source":"_posts/wtm源码解读-2.md","raw":"---\ntitle: wtm源码解读_2\nauthor: wuxinheng\ndate: 2022-07-22 22:53:35\ndescription: wtm源码解读_2\ntags:\n- efcore\n- saas\n- 多租户\n- dotnet\n- wtm\ncategories:\n- dotnet\n---\n### wtm第一次创建DC\n\n1. 找到DC\n\n   WTMContext.cs\n\n   ```C#\n   // 这个代码让我回到了19刚出来工作写的VB.net\n   // 具体不清楚为什么要这么写，可能是之前的代码懒得改。\n   // public IDataContext DC{get;set;} 有什么区别吗？大学老师也是这么教的。\n   // 大佬懂得求指教。\n   private IDataContext _dc;\n   public IDataContext DC\n   {\n       get\n       {\n           if (_dc == null)\n           {\n               _dc = this.CreateDC(); // 进入话题，看CreateDC()\n           }\n           return _dc;\n       }\n       set\n       {\n           _dc = value;\n       }\n   }\n   \n   ```\n\n   CreateDC()：这里贴的是最新版的代码\n\n   ```C#\n   public virtual IDataContext CreateDC(bool isLog = false, string cskey = null, bool logerror = true)\n   {\n       string cs = cskey ?? CurrentCS;\n       string tenantCode = null;\n   \t// 获取所有的租户\n       var tenants = GlobaInfo.AllTenant ?? new List<FrameworkTenant>();\n       string tc = _loginUserInfo?.CurrentTenant;\n       // 通过域名来获取租户\n       if (tc == null && HttpContext?.Request?.Host != null)\n               {\n                   tc = tenants.Where(x => x.TDomain != null && x.TDomain.ToLower() == HttpContext.Request.Host.ToString().ToLower()).Select(x => x.TCode).FirstOrDefault();\n               }\n       // 通过_loginUserInfo来获取租户，这里因该是考虑到域名下其他租户的登录\n       // 我现在需要的就是这一步。_loginUserInfo.TenantCode已经有了，但是代入数据库，数据库初始化有点问题\n       if (tc != null)\n               {\n                   var item = tenants.Where(x => x.TCode == tc).FirstOrDefault();\n                   tenantCode = tc;\n                   //如果租户指定了数据库，则返回\n                   if (string.IsNullOrEmpty(cs) && item?.IsUsingDB == true)\n                   {\n                       return item.CreateDC(this);\n                   }\n               }\n   \n       if (isLog == true)\n               {\n                   if (ConfigInfo.Connections?.Where(x => x.Key.ToLower() == \"defaultlog\").FirstOrDefault() != null)\n                   {\n                       cs = \"defaultlog\";\n                   }\n               }\n       if (string.IsNullOrEmpty(cs))\n       {\n           cs = \"default\";\n       }\n       // 在原来的代码里面没有上面的内容。这里就怎么说呢，讲究人做讲究事。哈哈\n       // 我事直接通过CreateDC()传参来传递tenantCode，进而实例化\n       // 这里就是比较优雅通过对象的来进行操作，后面我也该成这样了\n       var rv = ConfigInfo.Connections.Where(x => x.Key.ToLower() == cs.ToLower()).FirstOrDefault().CreateDC();\n       rv.IsDebug = ConfigInfo.IsQuickDebug;\n       // 设置tenantCode给DataContext _tenantCode赋值,这里成功把值传到dbcontext\n       rv.SetTenantCode(tenantCode);\n       if (logerror == true)\n       {\n           rv.SetLoggerFactory(_loggerFactory);\n       }\n       return rv;\n   }\n   ```","slug":"wtm源码解读-2","published":1,"updated":"2023-09-24T07:38:31.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhx003bowtkdl975ef3","content":"<h3 id=\"wtm第一次创建DC\"><a href=\"#wtm第一次创建DC\" class=\"headerlink\" title=\"wtm第一次创建DC\"></a>wtm第一次创建DC</h3><ol>\n<li><p>找到DC</p>\n<p>WTMContext.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个代码让我回到了19刚出来工作写的VB.net</span></span><br><span class=\"line\"><span class=\"comment\">// 具体不清楚为什么要这么写，可能是之前的代码懒得改。</span></span><br><span class=\"line\"><span class=\"comment\">// public IDataContext DC&#123;get;set;&#125; 有什么区别吗？大学老师也是这么教的。</span></span><br><span class=\"line\"><span class=\"comment\">// 大佬懂得求指教。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> IDataContext _dc;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IDataContext DC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_dc == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _dc = <span class=\"keyword\">this</span>.CreateDC(); <span class=\"comment\">// 进入话题，看CreateDC()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _dc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _dc = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>CreateDC()：这里贴的是最新版的代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> IDataContext <span class=\"title\">CreateDC</span>(<span class=\"params\"><span class=\"built_in\">bool</span> isLog = <span class=\"literal\">false</span>, <span class=\"built_in\">string</span> cskey = <span class=\"literal\">null</span>, <span class=\"built_in\">bool</span> logerror = <span class=\"literal\">true</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> cs = cskey ?? CurrentCS;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tenantCode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取所有的租户</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tenants = GlobaInfo.AllTenant ?? <span class=\"keyword\">new</span> List&lt;FrameworkTenant&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tc = _loginUserInfo?.CurrentTenant;</span><br><span class=\"line\">    <span class=\"comment\">// 通过域名来获取租户</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tc == <span class=\"literal\">null</span> &amp;&amp; HttpContext?.Request?.Host != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tc = tenants.Where(x =&gt; x.TDomain != <span class=\"literal\">null</span> &amp;&amp; x.TDomain.ToLower() == HttpContext.Request.Host.ToString().ToLower()).Select(x =&gt; x.TCode).FirstOrDefault();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过_loginUserInfo来获取租户，这里因该是考虑到域名下其他租户的登录</span></span><br><span class=\"line\">    <span class=\"comment\">// 我现在需要的就是这一步。_loginUserInfo.TenantCode已经有了，但是代入数据库，数据库初始化有点问题</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tc != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> item = tenants.Where(x =&gt; x.TCode == tc).FirstOrDefault();</span><br><span class=\"line\">                tenantCode = tc;</span><br><span class=\"line\">                <span class=\"comment\">//如果租户指定了数据库，则返回</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(cs) &amp;&amp; item?.IsUsingDB == <span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item.CreateDC(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLog == <span class=\"literal\">true</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ConfigInfo.Connections?.Where(x =&gt; x.Key.ToLower() == <span class=\"string\">&quot;defaultlog&quot;</span>).FirstOrDefault() != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    cs = <span class=\"string\">&quot;defaultlog&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(cs))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cs = <span class=\"string\">&quot;default&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在原来的代码里面没有上面的内容。这里就怎么说呢，讲究人做讲究事。哈哈</span></span><br><span class=\"line\">    <span class=\"comment\">// 我事直接通过CreateDC()传参来传递tenantCode，进而实例化</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里就是比较优雅通过对象的来进行操作，后面我也该成这样了</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rv = ConfigInfo.Connections.Where(x =&gt; x.Key.ToLower() == cs.ToLower()).FirstOrDefault().CreateDC();</span><br><span class=\"line\">    rv.IsDebug = ConfigInfo.IsQuickDebug;</span><br><span class=\"line\">    <span class=\"comment\">// 设置tenantCode给DataContext _tenantCode赋值,这里成功把值传到dbcontext</span></span><br><span class=\"line\">    rv.SetTenantCode(tenantCode);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logerror == <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rv.SetLoggerFactory(_loggerFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"wtm第一次创建DC\"><a href=\"#wtm第一次创建DC\" class=\"headerlink\" title=\"wtm第一次创建DC\"></a>wtm第一次创建DC</h3><ol>\n<li><p>找到DC</p>\n<p>WTMContext.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个代码让我回到了19刚出来工作写的VB.net</span></span><br><span class=\"line\"><span class=\"comment\">// 具体不清楚为什么要这么写，可能是之前的代码懒得改。</span></span><br><span class=\"line\"><span class=\"comment\">// public IDataContext DC&#123;get;set;&#125; 有什么区别吗？大学老师也是这么教的。</span></span><br><span class=\"line\"><span class=\"comment\">// 大佬懂得求指教。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> IDataContext _dc;</span><br><span class=\"line\"><span class=\"keyword\">public</span> IDataContext DC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_dc == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _dc = <span class=\"keyword\">this</span>.CreateDC(); <span class=\"comment\">// 进入话题，看CreateDC()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _dc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _dc = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>CreateDC()：这里贴的是最新版的代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> IDataContext <span class=\"title\">CreateDC</span>(<span class=\"params\"><span class=\"built_in\">bool</span> isLog = <span class=\"literal\">false</span>, <span class=\"built_in\">string</span> cskey = <span class=\"literal\">null</span>, <span class=\"built_in\">bool</span> logerror = <span class=\"literal\">true</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> cs = cskey ?? CurrentCS;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tenantCode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取所有的租户</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tenants = GlobaInfo.AllTenant ?? <span class=\"keyword\">new</span> List&lt;FrameworkTenant&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> tc = _loginUserInfo?.CurrentTenant;</span><br><span class=\"line\">    <span class=\"comment\">// 通过域名来获取租户</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tc == <span class=\"literal\">null</span> &amp;&amp; HttpContext?.Request?.Host != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tc = tenants.Where(x =&gt; x.TDomain != <span class=\"literal\">null</span> &amp;&amp; x.TDomain.ToLower() == HttpContext.Request.Host.ToString().ToLower()).Select(x =&gt; x.TCode).FirstOrDefault();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过_loginUserInfo来获取租户，这里因该是考虑到域名下其他租户的登录</span></span><br><span class=\"line\">    <span class=\"comment\">// 我现在需要的就是这一步。_loginUserInfo.TenantCode已经有了，但是代入数据库，数据库初始化有点问题</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tc != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> item = tenants.Where(x =&gt; x.TCode == tc).FirstOrDefault();</span><br><span class=\"line\">                tenantCode = tc;</span><br><span class=\"line\">                <span class=\"comment\">//如果租户指定了数据库，则返回</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(cs) &amp;&amp; item?.IsUsingDB == <span class=\"literal\">true</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item.CreateDC(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLog == <span class=\"literal\">true</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ConfigInfo.Connections?.Where(x =&gt; x.Key.ToLower() == <span class=\"string\">&quot;defaultlog&quot;</span>).FirstOrDefault() != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    cs = <span class=\"string\">&quot;defaultlog&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(cs))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cs = <span class=\"string\">&quot;default&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在原来的代码里面没有上面的内容。这里就怎么说呢，讲究人做讲究事。哈哈</span></span><br><span class=\"line\">    <span class=\"comment\">// 我事直接通过CreateDC()传参来传递tenantCode，进而实例化</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里就是比较优雅通过对象的来进行操作，后面我也该成这样了</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rv = ConfigInfo.Connections.Where(x =&gt; x.Key.ToLower() == cs.ToLower()).FirstOrDefault().CreateDC();</span><br><span class=\"line\">    rv.IsDebug = ConfigInfo.IsQuickDebug;</span><br><span class=\"line\">    <span class=\"comment\">// 设置tenantCode给DataContext _tenantCode赋值,这里成功把值传到dbcontext</span></span><br><span class=\"line\">    rv.SetTenantCode(tenantCode);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logerror == <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rv.SetLoggerFactory(_loggerFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtm源码解读_2","path":"2022/07/22/wtm源码解读-2/","eyeCatchImage":null,"excerpt":"wtm源码解读_2","date":{"_isAMomentObject":true,"_i":"2022-07-22T14:53:35.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-22T14:53:35.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["dotnet","wtm","efcore","saas","多租户"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"wtm血泪","author":"wuxinheng","date":"2022-07-22T14:52:32.000Z","description":"我们做了什么？","_content":"\n## 前言\n\n最开始是领导推荐。具体使用之后会感觉wtm好像孙悟空用金箍棒给唐僧画的圈。也可能是之前写代码随意惯了。突然这样倒是有点像叛逆的少年觉得这个框架不怎么样。后面我们也写了很多功能。我去了解源码。突然觉的这个框架越用越香。我们实在21年冬天开始使用时并没有多租户。但是在阅读源码时发现竟然有TenantCode的存在。可能那个时候wtm已经在规划多租户了。\n\n可能我们遇见wtm不是在最好的时候吧。我们就利用wtm来做了一个多租户的项目，使用共享数据库的方式来实现。本来领导已经实现好了，今年突然发现个乌龙。项目确实可以通过租户id来进行过滤，但是登录另一个租户时服务器的租户id被更新掉了。因为这里是通过单例来存贮租户id的。还好项目还没上线\n\n悲伤的故事就这样开始了,我开始参照wtm新版本的多租户开始改造项目，为了记录这个过程。我写了wtm源码解读其实也就一点点源码，冰山一角。\n\nps:一部分源码是之前的版本，新版本代码我会说明\n\n","source":"_posts/wtm血泪.md","raw":"---\ntitle: wtm血泪\nauthor: wuxinheng\ndate: 2022-07-22 22:52:32\ndescription: 我们做了什么？\ntags:\n- wtm\ncategories:\n- dotnet\n---\n\n## 前言\n\n最开始是领导推荐。具体使用之后会感觉wtm好像孙悟空用金箍棒给唐僧画的圈。也可能是之前写代码随意惯了。突然这样倒是有点像叛逆的少年觉得这个框架不怎么样。后面我们也写了很多功能。我去了解源码。突然觉的这个框架越用越香。我们实在21年冬天开始使用时并没有多租户。但是在阅读源码时发现竟然有TenantCode的存在。可能那个时候wtm已经在规划多租户了。\n\n可能我们遇见wtm不是在最好的时候吧。我们就利用wtm来做了一个多租户的项目，使用共享数据库的方式来实现。本来领导已经实现好了，今年突然发现个乌龙。项目确实可以通过租户id来进行过滤，但是登录另一个租户时服务器的租户id被更新掉了。因为这里是通过单例来存贮租户id的。还好项目还没上线\n\n悲伤的故事就这样开始了,我开始参照wtm新版本的多租户开始改造项目，为了记录这个过程。我写了wtm源码解读其实也就一点点源码，冰山一角。\n\nps:一部分源码是之前的版本，新版本代码我会说明\n\n","slug":"wtm血泪","published":1,"updated":"2023-09-24T07:38:31.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhy003eowtkgrjjc0z6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最开始是领导推荐。具体使用之后会感觉wtm好像孙悟空用金箍棒给唐僧画的圈。也可能是之前写代码随意惯了。突然这样倒是有点像叛逆的少年觉得这个框架不怎么样。后面我们也写了很多功能。我去了解源码。突然觉的这个框架越用越香。我们实在21年冬天开始使用时并没有多租户。但是在阅读源码时发现竟然有TenantCode的存在。可能那个时候wtm已经在规划多租户了。</p>\n<p>可能我们遇见wtm不是在最好的时候吧。我们就利用wtm来做了一个多租户的项目，使用共享数据库的方式来实现。本来领导已经实现好了，今年突然发现个乌龙。项目确实可以通过租户id来进行过滤，但是登录另一个租户时服务器的租户id被更新掉了。因为这里是通过单例来存贮租户id的。还好项目还没上线</p>\n<p>悲伤的故事就这样开始了,我开始参照wtm新版本的多租户开始改造项目，为了记录这个过程。我写了wtm源码解读其实也就一点点源码，冰山一角。</p>\n<p>ps:一部分源码是之前的版本，新版本代码我会说明</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最开始是领导推荐。具体使用之后会感觉wtm好像孙悟空用金箍棒给唐僧画的圈。也可能是之前写代码随意惯了。突然这样倒是有点像叛逆的少年觉得这个框架不怎么样。后面我们也写了很多功能。我去了解源码。突然觉的这个框架越用越香。我们实在21年冬天开始使用时并没有多租户。但是在阅读源码时发现竟然有TenantCode的存在。可能那个时候wtm已经在规划多租户了。</p>\n<p>可能我们遇见wtm不是在最好的时候吧。我们就利用wtm来做了一个多租户的项目，使用共享数据库的方式来实现。本来领导已经实现好了，今年突然发现个乌龙。项目确实可以通过租户id来进行过滤，但是登录另一个租户时服务器的租户id被更新掉了。因为这里是通过单例来存贮租户id的。还好项目还没上线</p>\n<p>悲伤的故事就这样开始了,我开始参照wtm新版本的多租户开始改造项目，为了记录这个过程。我写了wtm源码解读其实也就一点点源码，冰山一角。</p>\n<p>ps:一部分源码是之前的版本，新版本代码我会说明</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"wtm血泪","path":"2022/07/22/wtm血泪/","eyeCatchImage":null,"excerpt":"我们做了什么？","date":{"_isAMomentObject":true,"_i":"2022-07-22T14:52:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-07-22T14:52:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"dotnet","tags":["wtm"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"设计模式-责任链-管道","author":"wuxinheng","date":"2022-08-02T06:29:43.000Z","description":"代码片段","_content":"\n```\nnamespace PipelineCode\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // 手写管道、责任链模式\n            Emplyee emplyee = new Emplyee();\n            PipeLine pipeLine = new PipeLine();\n            SetRemarkService basicValve = new SetRemarkService();\n            pipeLine.SetBasic(basicValve);\n            pipeLine.Add<SetNameService>();\n            pipeLine.Add<SetAgeService>();\n            pipeLine.GetFirst().Invoke(emplyee);\n            Console.ReadLine();\n        }\n    }\n\n    /// <summary>\n    /// 阀门接口\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    public interface IService<T>\n    {\n        public IService<T> GetNext();\n        public void SetNext(IService<T> v);\n        public void Invoke(T t);\n\n    }\n\n    /// <summary>\n    /// 传递对象\n    /// </summary>\n    public class Emplyee\n    {\n        public string Name { get; set; }\n        public string Age { get; set; }\n        public string Remark { get; set; }\n    }\n\n    /// <summary>\n    /// Name 阀门\n    /// </summary>\n    public class SetNameService : IService<Emplyee>\n    {\n        IService<Emplyee> _next;\n        public IService<Emplyee> GetNext()\n        {\n            return _next;\n        }\n\n        public void Invoke(Emplyee t)\n        {\n            Console.WriteLine(\"第1次name\");\n            t.Name = \"第一次name\";\n            _next?.Invoke(t);\n            Console.WriteLine(\"第1次name\");\n\n        }\n\n        public void SetNext(IService<Emplyee> v)\n        {\n            _next = v;\n        }\n    }\n\n    /// <summary>\n    /// Age 阀门\n    /// </summary>\n    public class SetAgeService : IService<Emplyee>\n    {\n        IService<Emplyee> _next;\n        public IService<Emplyee> GetNext()\n        {\n            return _next;\n        }\n\n        public void Invoke(Emplyee t)\n        {\n            Console.WriteLine(\"第2次age\");\n            t.Age = \"第一次age\";\n            _next?.Invoke(t);\n            Console.WriteLine(\"第2次age\");\n        }\n\n        public void SetNext(IService<Emplyee> v)\n        {\n            _next = v;\n        }\n    }\n\n    /// <summary>\n    /// Remark 阀门\n    /// </summary>\n    public class SetRemarkService : IService<Emplyee>\n    {\n        IService<Emplyee> _next;\n        public IService<Emplyee> GetNext()\n        {\n            return _next;\n        }\n\n        public void Invoke(Emplyee t)\n        {\n            Console.WriteLine(\"第3次remark\");\n            t.Remark = \"第一次remark\";\n            _next?.Invoke(t);\n            Console.WriteLine(\"第3次remark\");\n        }\n\n        public void SetNext(IService<Emplyee> v)\n        {\n            _next = v;\n        }\n    }\n\n    /// <summary>\n    /// 管道接口\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    public interface IPipeLine<T>\n    {\n        IService<T> GetFirst();\n        IService<T> GetBasic();\n        void SetBasic(IService<T> v);\n        void Add<Service>();\n    }\n\n    /// <summary>\n    /// 管道类\n    /// </summary>\n    public class PipeLine : IPipeLine<Emplyee>\n    {\n        private IService<Emplyee> _firstValve;\n        private IService<Emplyee> _basicValve;\n\n        public void Add<T>()\n        {\n            var curr = Activator.CreateInstance(typeof(T)) as IService<Emplyee>;\n            if (_firstValve == null)\n            {\n                _firstValve = curr;\n\n                _firstValve.SetNext(_basicValve);\n            }\n            else\n            {\n                IService<Emplyee> current = _firstValve;\n                while (current != null)\n                {\n                    if (current.GetNext() == _basicValve)\n                    {\n                        curr.SetNext(_basicValve);\n                        current.SetNext(curr);\n                        break;\n                    }\n                    current = current.GetNext();\n                }\n            }\n        }\n\n        public IService<Emplyee> GetBasic()\n        {\n            return _basicValve;\n        }\n\n        public IService<Emplyee> GetFirst()\n        {\n            return _firstValve;\n        }\n\n        public void SetBasic(IService<Emplyee> v)\n        {\n            _basicValve = v;\n        }\n\n\n\n    }\n}\n```\n\n\n","source":"_posts/设计模式-责任链-管道.md","raw":"---\ntitle: 设计模式-责任链-管道\nauthor: wuxinheng\ndate: 2022-08-02 14:29:43\ndescription: 代码片段\ncategories:\n  - 代码片段\ntags:\n- 我爱写代码\n- dotnet\n- 代码片段\n---\n\n```\nnamespace PipelineCode\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // 手写管道、责任链模式\n            Emplyee emplyee = new Emplyee();\n            PipeLine pipeLine = new PipeLine();\n            SetRemarkService basicValve = new SetRemarkService();\n            pipeLine.SetBasic(basicValve);\n            pipeLine.Add<SetNameService>();\n            pipeLine.Add<SetAgeService>();\n            pipeLine.GetFirst().Invoke(emplyee);\n            Console.ReadLine();\n        }\n    }\n\n    /// <summary>\n    /// 阀门接口\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    public interface IService<T>\n    {\n        public IService<T> GetNext();\n        public void SetNext(IService<T> v);\n        public void Invoke(T t);\n\n    }\n\n    /// <summary>\n    /// 传递对象\n    /// </summary>\n    public class Emplyee\n    {\n        public string Name { get; set; }\n        public string Age { get; set; }\n        public string Remark { get; set; }\n    }\n\n    /// <summary>\n    /// Name 阀门\n    /// </summary>\n    public class SetNameService : IService<Emplyee>\n    {\n        IService<Emplyee> _next;\n        public IService<Emplyee> GetNext()\n        {\n            return _next;\n        }\n\n        public void Invoke(Emplyee t)\n        {\n            Console.WriteLine(\"第1次name\");\n            t.Name = \"第一次name\";\n            _next?.Invoke(t);\n            Console.WriteLine(\"第1次name\");\n\n        }\n\n        public void SetNext(IService<Emplyee> v)\n        {\n            _next = v;\n        }\n    }\n\n    /// <summary>\n    /// Age 阀门\n    /// </summary>\n    public class SetAgeService : IService<Emplyee>\n    {\n        IService<Emplyee> _next;\n        public IService<Emplyee> GetNext()\n        {\n            return _next;\n        }\n\n        public void Invoke(Emplyee t)\n        {\n            Console.WriteLine(\"第2次age\");\n            t.Age = \"第一次age\";\n            _next?.Invoke(t);\n            Console.WriteLine(\"第2次age\");\n        }\n\n        public void SetNext(IService<Emplyee> v)\n        {\n            _next = v;\n        }\n    }\n\n    /// <summary>\n    /// Remark 阀门\n    /// </summary>\n    public class SetRemarkService : IService<Emplyee>\n    {\n        IService<Emplyee> _next;\n        public IService<Emplyee> GetNext()\n        {\n            return _next;\n        }\n\n        public void Invoke(Emplyee t)\n        {\n            Console.WriteLine(\"第3次remark\");\n            t.Remark = \"第一次remark\";\n            _next?.Invoke(t);\n            Console.WriteLine(\"第3次remark\");\n        }\n\n        public void SetNext(IService<Emplyee> v)\n        {\n            _next = v;\n        }\n    }\n\n    /// <summary>\n    /// 管道接口\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    public interface IPipeLine<T>\n    {\n        IService<T> GetFirst();\n        IService<T> GetBasic();\n        void SetBasic(IService<T> v);\n        void Add<Service>();\n    }\n\n    /// <summary>\n    /// 管道类\n    /// </summary>\n    public class PipeLine : IPipeLine<Emplyee>\n    {\n        private IService<Emplyee> _firstValve;\n        private IService<Emplyee> _basicValve;\n\n        public void Add<T>()\n        {\n            var curr = Activator.CreateInstance(typeof(T)) as IService<Emplyee>;\n            if (_firstValve == null)\n            {\n                _firstValve = curr;\n\n                _firstValve.SetNext(_basicValve);\n            }\n            else\n            {\n                IService<Emplyee> current = _firstValve;\n                while (current != null)\n                {\n                    if (current.GetNext() == _basicValve)\n                    {\n                        curr.SetNext(_basicValve);\n                        current.SetNext(curr);\n                        break;\n                    }\n                    current = current.GetNext();\n                }\n            }\n        }\n\n        public IService<Emplyee> GetBasic()\n        {\n            return _basicValve;\n        }\n\n        public IService<Emplyee> GetFirst()\n        {\n            return _firstValve;\n        }\n\n        public void SetBasic(IService<Emplyee> v)\n        {\n            _basicValve = v;\n        }\n\n\n\n    }\n}\n```\n\n\n","slug":"设计模式-责任链-管道","published":1,"updated":"2023-09-24T07:38:31.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmx5hzhz003howtk1anph7g9","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace PipelineCode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Program</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main(string[] args)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // 手写管道、责任链模式</span><br><span class=\"line\">            Emplyee emplyee = new Emplyee();</span><br><span class=\"line\">            PipeLine pipeLine = new PipeLine();</span><br><span class=\"line\">            SetRemarkService basicValve = new SetRemarkService();</span><br><span class=\"line\">            pipeLine.SetBasic(basicValve);</span><br><span class=\"line\">            pipeLine.Add&lt;SetNameService&gt;();</span><br><span class=\"line\">            pipeLine.Add&lt;SetAgeService&gt;();</span><br><span class=\"line\">            pipeLine.GetFirst().Invoke(emplyee);</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 阀门接口</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span><br><span class=\"line\">    public interface IService&lt;T&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public IService&lt;T&gt; GetNext();</span><br><span class=\"line\">        public void SetNext(IService&lt;T&gt; v);</span><br><span class=\"line\">        public void Invoke(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 传递对象</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class Emplyee</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public string Name &#123; get; set; &#125;</span><br><span class=\"line\">        public string Age &#123; get; set; &#125;</span><br><span class=\"line\">        public string Remark &#123; get; set; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Name 阀门</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class SetNameService : IService&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;Emplyee&gt; _next;</span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetNext()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Invoke(Emplyee t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(&quot;第1次name&quot;);</span><br><span class=\"line\">            t.Name = &quot;第一次name&quot;;</span><br><span class=\"line\">            _next?.Invoke(t);</span><br><span class=\"line\">            Console.WriteLine(&quot;第1次name&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetNext(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _next = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Age 阀门</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class SetAgeService : IService&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;Emplyee&gt; _next;</span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetNext()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Invoke(Emplyee t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(&quot;第2次age&quot;);</span><br><span class=\"line\">            t.Age = &quot;第一次age&quot;;</span><br><span class=\"line\">            _next?.Invoke(t);</span><br><span class=\"line\">            Console.WriteLine(&quot;第2次age&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetNext(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _next = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Remark 阀门</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class SetRemarkService : IService&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;Emplyee&gt; _next;</span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetNext()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Invoke(Emplyee t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(&quot;第3次remark&quot;);</span><br><span class=\"line\">            t.Remark = &quot;第一次remark&quot;;</span><br><span class=\"line\">            _next?.Invoke(t);</span><br><span class=\"line\">            Console.WriteLine(&quot;第3次remark&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetNext(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _next = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 管道接口</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span><br><span class=\"line\">    public interface IPipeLine&lt;T&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;T&gt; GetFirst();</span><br><span class=\"line\">        IService&lt;T&gt; GetBasic();</span><br><span class=\"line\">        void SetBasic(IService&lt;T&gt; v);</span><br><span class=\"line\">        void Add&lt;Service&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 管道类</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class PipeLine : IPipeLine&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private IService&lt;Emplyee&gt; _firstValve;</span><br><span class=\"line\">        private IService&lt;Emplyee&gt; _basicValve;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Add&lt;T&gt;()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var curr = Activator.CreateInstance(typeof(T)) as IService&lt;Emplyee&gt;;</span><br><span class=\"line\">            if (_firstValve == null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _firstValve = curr;</span><br><span class=\"line\"></span><br><span class=\"line\">                _firstValve.SetNext(_basicValve);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IService&lt;Emplyee&gt; current = _firstValve;</span><br><span class=\"line\">                while (current != null)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if (current.GetNext() == _basicValve)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        curr.SetNext(_basicValve);</span><br><span class=\"line\">                        current.SetNext(curr);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    current = current.GetNext();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetBasic()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _basicValve;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetFirst()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _firstValve;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetBasic(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _basicValve = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace PipelineCode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Program</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main(string[] args)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // 手写管道、责任链模式</span><br><span class=\"line\">            Emplyee emplyee = new Emplyee();</span><br><span class=\"line\">            PipeLine pipeLine = new PipeLine();</span><br><span class=\"line\">            SetRemarkService basicValve = new SetRemarkService();</span><br><span class=\"line\">            pipeLine.SetBasic(basicValve);</span><br><span class=\"line\">            pipeLine.Add&lt;SetNameService&gt;();</span><br><span class=\"line\">            pipeLine.Add&lt;SetAgeService&gt;();</span><br><span class=\"line\">            pipeLine.GetFirst().Invoke(emplyee);</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 阀门接口</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span><br><span class=\"line\">    public interface IService&lt;T&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public IService&lt;T&gt; GetNext();</span><br><span class=\"line\">        public void SetNext(IService&lt;T&gt; v);</span><br><span class=\"line\">        public void Invoke(T t);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 传递对象</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class Emplyee</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public string Name &#123; get; set; &#125;</span><br><span class=\"line\">        public string Age &#123; get; set; &#125;</span><br><span class=\"line\">        public string Remark &#123; get; set; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Name 阀门</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class SetNameService : IService&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;Emplyee&gt; _next;</span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetNext()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Invoke(Emplyee t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(&quot;第1次name&quot;);</span><br><span class=\"line\">            t.Name = &quot;第一次name&quot;;</span><br><span class=\"line\">            _next?.Invoke(t);</span><br><span class=\"line\">            Console.WriteLine(&quot;第1次name&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetNext(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _next = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Age 阀门</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class SetAgeService : IService&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;Emplyee&gt; _next;</span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetNext()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Invoke(Emplyee t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(&quot;第2次age&quot;);</span><br><span class=\"line\">            t.Age = &quot;第一次age&quot;;</span><br><span class=\"line\">            _next?.Invoke(t);</span><br><span class=\"line\">            Console.WriteLine(&quot;第2次age&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetNext(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _next = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Remark 阀门</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class SetRemarkService : IService&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;Emplyee&gt; _next;</span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetNext()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Invoke(Emplyee t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(&quot;第3次remark&quot;);</span><br><span class=\"line\">            t.Remark = &quot;第一次remark&quot;;</span><br><span class=\"line\">            _next?.Invoke(t);</span><br><span class=\"line\">            Console.WriteLine(&quot;第3次remark&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetNext(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _next = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 管道接口</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span><br><span class=\"line\">    public interface IPipeLine&lt;T&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IService&lt;T&gt; GetFirst();</span><br><span class=\"line\">        IService&lt;T&gt; GetBasic();</span><br><span class=\"line\">        void SetBasic(IService&lt;T&gt; v);</span><br><span class=\"line\">        void Add&lt;Service&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 管道类</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public class PipeLine : IPipeLine&lt;Emplyee&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private IService&lt;Emplyee&gt; _firstValve;</span><br><span class=\"line\">        private IService&lt;Emplyee&gt; _basicValve;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void Add&lt;T&gt;()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var curr = Activator.CreateInstance(typeof(T)) as IService&lt;Emplyee&gt;;</span><br><span class=\"line\">            if (_firstValve == null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _firstValve = curr;</span><br><span class=\"line\"></span><br><span class=\"line\">                _firstValve.SetNext(_basicValve);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                IService&lt;Emplyee&gt; current = _firstValve;</span><br><span class=\"line\">                while (current != null)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if (current.GetNext() == _basicValve)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        curr.SetNext(_basicValve);</span><br><span class=\"line\">                        current.SetNext(curr);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    current = current.GetNext();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetBasic()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _basicValve;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IService&lt;Emplyee&gt; GetFirst()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return _firstValve;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void SetBasic(IService&lt;Emplyee&gt; v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _basicValve = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Sep 24 2023 15:38:31 GMT+0800 (中国标准时间)","title":"设计模式-责任链-管道","path":"2022/08/02/设计模式-责任链-管道/","eyeCatchImage":null,"excerpt":"代码片段","date":{"_isAMomentObject":true,"_i":"2022-08-02T06:29:43.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-02T06:29:43.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"代码片段","tags":["dotnet","我爱写代码","代码片段"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"clmx5hzh50001owtkfxu5d9jk","category_id":"clmx5hzh80004owtkfytx8auy","_id":"clmx5hzhe000iowtkesxx89f7"},{"post_id":"clmx5hzhd000fowtk30s6g5kb","category_id":"clmx5hzh80004owtkfytx8auy","_id":"clmx5hzhg000oowtk969o3ojz"},{"post_id":"clmx5hzh70003owtk1huf5djk","category_id":"clmx5hzh80004owtkfytx8auy","_id":"clmx5hzhh000sowtk0ak48w7z"},{"post_id":"clmx5hzha0007owtk7rzkhshl","category_id":"clmx5hzhe000howtkcy4b55vi","_id":"clmx5hzhh000uowtk6ypmex9f"},{"post_id":"clmx5hzhb0009owtkhtgpg04r","category_id":"clmx5hzhg000powtk9ndnarel","_id":"clmx5hzhi000zowtk8unv59t5"},{"post_id":"clmx5hzhb000bowtk0mpk7vln","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzhj0016owtk11kyg9aw"},{"post_id":"clmx5hzhj0014owtkhakr7zwl","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhl001dowtka9p6awpg"},{"post_id":"clmx5hzhe000gowtkgolvdgzq","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhm001iowtk6m5pbqkp"},{"post_id":"clmx5hzhe000lowtk6k4saomm","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhm001lowtka06jg2n2"},{"post_id":"clmx5hzhf000nowtk9crkdkde","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhn001rowtkdrpidye3"},{"post_id":"clmx5hzhm001jowtk3k5ugjkx","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzho001uowtk1g5s5hv3"},{"post_id":"clmx5hzhg000rowtk9lrmbxkf","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhp001yowtk72ht1b0e"},{"post_id":"clmx5hzhh000towtkb0etgixs","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhq0024owtk4n575e89"},{"post_id":"clmx5hzhq0020owtk01fadkqt","category_id":"clmx5hzh80004owtkfytx8auy","_id":"clmx5hzhr002aowtk6dou7uva"},{"post_id":"clmx5hzhi000xowtk2t5j58i8","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhs002eowtke70san9j"},{"post_id":"clmx5hzhr0026owtkejup87gu","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzht002iowtkc3m48z2n"},{"post_id":"clmx5hzhi000yowtk4ml000qc","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzht002mowtkb55g86et"},{"post_id":"clmx5hzhr0029owtk64ps2qpp","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhu002qowtk1a8381s3"},{"post_id":"clmx5hzhj0012owtk5r355wqt","category_id":"clmx5hzhj0011owtkbelj6hi1","_id":"clmx5hzhu002uowtkfd200j5j"},{"post_id":"clmx5hzhk0018owtk5ox39c9f","category_id":"clmx5hzht002jowtka3kx05xs","_id":"clmx5hzhv002yowtk54u6203q"},{"post_id":"clmx5hzht002powtkbww2cbdp","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzhv0031owtkfcl64ltb"},{"post_id":"clmx5hzhu002towtkbgzuheeo","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzhw0034owtkan7e5lx7"},{"post_id":"clmx5hzhk001bowtk5fpzcgbm","category_id":"clmx5hzhu002rowtk7i5naxi2","_id":"clmx5hzhx0037owtkhrl94wqv"},{"post_id":"clmx5hzhu002xowtkfl0881qd","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzhx0039owtk4tu0hlhe"},{"post_id":"clmx5hzhv0030owtkbdj0c6ja","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzhy003dowtkhrbhd5le"},{"post_id":"clmx5hzhl001cowtkfby62pqu","category_id":"clmx5hzhv002zowtk7cwde14r","_id":"clmx5hzhz003fowtkerif47gz"},{"post_id":"clmx5hzhw0032owtk381zc2md","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzhz003jowtk9phz4q5x"},{"post_id":"clmx5hzhw0036owtk7yg3f96a","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzi0003lowtk1gv7fr5s"},{"post_id":"clmx5hzhx0038owtk7ue4c9ns","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzi0003powtkgfh4cv3j"},{"post_id":"clmx5hzhl001howtkfvujax67","category_id":"clmx5hzhw0035owtk02ijal8s","_id":"clmx5hzi0003rowtkejqj7o47"},{"post_id":"clmx5hzhx003bowtkdl975ef3","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzi0003uowtk9rfqeglu"},{"post_id":"clmx5hzhy003eowtkgrjjc0z6","category_id":"clmx5hzhh000wowtkfqr573yc","_id":"clmx5hzi0003xowtkdp7n45xp"},{"post_id":"clmx5hzhn001nowtkdgwa8yh5","category_id":"clmx5hzhv002zowtk7cwde14r","_id":"clmx5hzi1003zowtk8bqa18qi"},{"post_id":"clmx5hzhz003howtk1anph7g9","category_id":"clmx5hzhe000howtkcy4b55vi","_id":"clmx5hzi10043owtkhkefdvrg"},{"post_id":"clmx5hzhn001powtk9l9nbbry","category_id":"clmx5hzhz003iowtkfsgzgmru","_id":"clmx5hzi10045owtk5tuaarwg"},{"post_id":"clmx5hzho001towtkf5w83dhv","category_id":"clmx5hzi0003oowtkeqxsavy9","_id":"clmx5hzi10049owtkh62c7q24"},{"post_id":"clmx5hzho001wowtk7dx6a9k9","category_id":"clmx5hzi0003wowtkbmna60pe","_id":"clmx5hzi1004bowtk5pgzcfhw"},{"post_id":"clmx5hzhq0022owtkhd9g34r7","category_id":"clmx5hzi10042owtka5xjb0t8","_id":"clmx5hzi2004fowtkeeqz80fl"},{"post_id":"clmx5hzhs002dowtk0kdm6q6e","category_id":"clmx5hzi0003wowtkbmna60pe","_id":"clmx5hzi3004jowtk2lxg13tg"},{"post_id":"clmx5hzhs002howtk4dmt7amr","category_id":"clmx5hzi1004eowtk6jzg4ezx","_id":"clmx5hzi3004nowtkfbd7hyhv"},{"post_id":"clmx5hzht002lowtk3q8i19x2","category_id":"clmx5hzi3004kowtkcyae6mfn","_id":"clmx5hzi3004rowtkby1oh7c6"}],"PostTag":[{"post_id":"clmx5hzh50001owtkfxu5d9jk","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzhd000eowtk0k8je1nw"},{"post_id":"clmx5hzhd000fowtk30s6g5kb","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzhe000kowtk3hu28rix"},{"post_id":"clmx5hzh70003owtk1huf5djk","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzhf000mowtkaz0a3n32"},{"post_id":"clmx5hzha0007owtk7rzkhshl","tag_id":"clmx5hzhe000jowtkay9c1p11","_id":"clmx5hzhj0013owtk58rk6eli"},{"post_id":"clmx5hzha0007owtk7rzkhshl","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzhj0015owtkc8cx82od"},{"post_id":"clmx5hzha0007owtk7rzkhshl","tag_id":"clmx5hzhh000vowtk97rxeope","_id":"clmx5hzhk001aowtkcn6h37d5"},{"post_id":"clmx5hzhk001bowtk5fpzcgbm","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzhl001gowtk5plj0zvg"},{"post_id":"clmx5hzhm001jowtk3k5ugjkx","tag_id":"clmx5hzhj0017owtk37nb4a8w","_id":"clmx5hzhn001oowtkaz081d2t"},{"post_id":"clmx5hzhn001powtk9l9nbbry","tag_id":"clmx5hzhi0010owtkgscs45gt","_id":"clmx5hzho001vowtkew162pty"},{"post_id":"clmx5hzhb000bowtk0mpk7vln","tag_id":"clmx5hzhi0010owtkgscs45gt","_id":"clmx5hzhq0021owtkffjzf2m7"},{"post_id":"clmx5hzhb000bowtk0mpk7vln","tag_id":"clmx5hzhj0017owtk37nb4a8w","_id":"clmx5hzhr0025owtk0iq7hqzc"},{"post_id":"clmx5hzhb000bowtk0mpk7vln","tag_id":"clmx5hzhl001fowtk53j0fe2w","_id":"clmx5hzhr0028owtkd26ofkm5"},{"post_id":"clmx5hzhb000bowtk0mpk7vln","tag_id":"clmx5hzhm001mowtk8gku67ex","_id":"clmx5hzhs002cowtkeixnaszk"},{"post_id":"clmx5hzhb000bowtk0mpk7vln","tag_id":"clmx5hzhn001sowtk9vr9gg46","_id":"clmx5hzhs002gowtk35pohhq7"},{"post_id":"clmx5hzhb000bowtk0mpk7vln","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzht002kowtkg3bn06la"},{"post_id":"clmx5hzhq0020owtk01fadkqt","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzht002oowtk0t6w7lwa"},{"post_id":"clmx5hzhe000gowtkgolvdgzq","tag_id":"clmx5hzhq001zowtk0w3a3hub","_id":"clmx5hzhu002sowtkakuq9duj"},{"post_id":"clmx5hzhe000gowtkgolvdgzq","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzhu002vowtkfo256vp4"},{"post_id":"clmx5hzhe000lowtk6k4saomm","tag_id":"clmx5hzhr0027owtk2kz0ggem","_id":"clmx5hzhz003kowtkf0q6et16"},{"post_id":"clmx5hzhe000lowtk6k4saomm","tag_id":"clmx5hzhs002fowtk2ige2hil","_id":"clmx5hzi0003mowtkbuly62b5"},{"post_id":"clmx5hzhe000lowtk6k4saomm","tag_id":"clmx5hzht002nowtkfab13vsc","_id":"clmx5hzi0003qowtk97pl3f2b"},{"post_id":"clmx5hzhe000lowtk6k4saomm","tag_id":"clmx5hzhu002wowtkeahx54g7","_id":"clmx5hzi0003sowtk4uug3xcx"},{"post_id":"clmx5hzhe000lowtk6k4saomm","tag_id":"clmx5hzhw0033owtkawltf4it","_id":"clmx5hzi0003vowtk7pgxbamj"},{"post_id":"clmx5hzhe000lowtk6k4saomm","tag_id":"clmx5hzhx003aowtkbfqqhg28","_id":"clmx5hzi1003yowtk563k97sa"},{"post_id":"clmx5hzhz003howtk1anph7g9","tag_id":"clmx5hzhe000jowtkay9c1p11","_id":"clmx5hzi10041owtkh6w29ryn"},{"post_id":"clmx5hzhz003howtk1anph7g9","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzi10044owtkgv5y60fy"},{"post_id":"clmx5hzhz003howtk1anph7g9","tag_id":"clmx5hzhh000vowtk97rxeope","_id":"clmx5hzi10046owtk7tu20fxa"},{"post_id":"clmx5hzhf000nowtk9crkdkde","tag_id":"clmx5hzhz003gowtk6sc46aee","_id":"clmx5hzi1004aowtke4c068kq"},{"post_id":"clmx5hzhf000nowtk9crkdkde","tag_id":"clmx5hzi0003nowtkgmvf9uei","_id":"clmx5hzi1004cowtkgo3d7nar"},{"post_id":"clmx5hzhg000rowtk9lrmbxkf","tag_id":"clmx5hzi0003towtk17tq1sel","_id":"clmx5hzi2004gowtk70bidwyt"},{"post_id":"clmx5hzhg000rowtk9lrmbxkf","tag_id":"clmx5hzi10040owtk3bmaanzo","_id":"clmx5hzi2004howtkhlrmcznk"},{"post_id":"clmx5hzhh000towtkb0etgixs","tag_id":"clmx5hzi10047owtk0cye2a39","_id":"clmx5hzi3004lowtk9hsn2rth"},{"post_id":"clmx5hzhi000xowtk2t5j58i8","tag_id":"clmx5hzhj0017owtk37nb4a8w","_id":"clmx5hzi3004oowtkg6iu0lfa"},{"post_id":"clmx5hzhi000xowtk2t5j58i8","tag_id":"clmx5hzi3004iowtk2im23hde","_id":"clmx5hzi3004powtkhwkq85gh"},{"post_id":"clmx5hzhi000yowtk4ml000qc","tag_id":"clmx5hzhj0017owtk37nb4a8w","_id":"clmx5hzi3004towtkevvodq4k"},{"post_id":"clmx5hzhi000yowtk4ml000qc","tag_id":"clmx5hzi3004qowtk26hxh7fx","_id":"clmx5hzi3004uowtk87mj7fv7"},{"post_id":"clmx5hzhj0012owtk5r355wqt","tag_id":"clmx5hzi3004sowtk8vb2ff49","_id":"clmx5hzi4004wowtkfk7bfakt"},{"post_id":"clmx5hzhj0014owtkhakr7zwl","tag_id":"clmx5hzi3004vowtkebezb5fy","_id":"clmx5hzi40051owtkcto4304b"},{"post_id":"clmx5hzhj0014owtkhakr7zwl","tag_id":"clmx5hzi4004xowtke2k3gye9","_id":"clmx5hzi40052owtkakr2bbmd"},{"post_id":"clmx5hzhj0014owtkhakr7zwl","tag_id":"clmx5hzi4004yowtk08s05j3l","_id":"clmx5hzi40054owtk34p23tyr"},{"post_id":"clmx5hzhj0014owtkhakr7zwl","tag_id":"clmx5hzi4004zowtk785367u7","_id":"clmx5hzi40055owtk5maecilr"},{"post_id":"clmx5hzhj0014owtkhakr7zwl","tag_id":"clmx5hzhi0010owtkgscs45gt","_id":"clmx5hzi40057owtk4etr8ccx"},{"post_id":"clmx5hzhl001cowtkfby62pqu","tag_id":"clmx5hzhj0017owtk37nb4a8w","_id":"clmx5hzi4005aowtk8wajcm5p"},{"post_id":"clmx5hzhl001cowtkfby62pqu","tag_id":"clmx5hzi40050owtkgzl3ams0","_id":"clmx5hzi4005bowtk238rbmrq"},{"post_id":"clmx5hzhl001cowtkfby62pqu","tag_id":"clmx5hzi40053owtka080hczu","_id":"clmx5hzi5005dowtk4zpd29kd"},{"post_id":"clmx5hzhl001cowtkfby62pqu","tag_id":"clmx5hzi40056owtkg5vz8vjy","_id":"clmx5hzi5005eowtk080r031q"},{"post_id":"clmx5hzhl001cowtkfby62pqu","tag_id":"clmx5hzi40058owtk4pc73nm4","_id":"clmx5hzi5005gowtkhv6i5l9d"},{"post_id":"clmx5hzhl001cowtkfby62pqu","tag_id":"clmx5hzhi0010owtkgscs45gt","_id":"clmx5hzi5005howtkh6o22l4t"},{"post_id":"clmx5hzhl001howtkfvujax67","tag_id":"clmx5hzi40059owtkbgf6cwo1","_id":"clmx5hzi5005jowtk57e1hc3l"},{"post_id":"clmx5hzhl001howtkfvujax67","tag_id":"clmx5hzi4005cowtk7mzhbbwh","_id":"clmx5hzi5005kowtkg130bkfs"},{"post_id":"clmx5hzhl001howtkfvujax67","tag_id":"clmx5hzi5005fowtk1zbfhwhv","_id":"clmx5hzi5005mowtk2k1b3noj"},{"post_id":"clmx5hzhn001nowtkdgwa8yh5","tag_id":"clmx5hzi5005iowtkaqbm8hov","_id":"clmx5hzi6005sowtk57ow9fyg"},{"post_id":"clmx5hzhn001nowtkdgwa8yh5","tag_id":"clmx5hzi5005lowtkgomxfn5r","_id":"clmx5hzi6005towtk79jh1dfp"},{"post_id":"clmx5hzhn001nowtkdgwa8yh5","tag_id":"clmx5hzi5005nowtk49it863q","_id":"clmx5hzi6005vowtkgd7ccfpc"},{"post_id":"clmx5hzhn001nowtkdgwa8yh5","tag_id":"clmx5hzi5005oowtkgw9g5rjp","_id":"clmx5hzi6005wowtkaarv3f6u"},{"post_id":"clmx5hzhn001nowtkdgwa8yh5","tag_id":"clmx5hzi5005powtkdoou44i8","_id":"clmx5hzi6005yowtke13i8lza"},{"post_id":"clmx5hzhn001nowtkdgwa8yh5","tag_id":"clmx5hzi5005qowtka20pbwwv","_id":"clmx5hzi6005zowtkdf3qf0gm"},{"post_id":"clmx5hzho001towtkf5w83dhv","tag_id":"clmx5hzi5005rowtk6b4r6m3s","_id":"clmx5hzi60061owtk7h6o29td"},{"post_id":"clmx5hzho001wowtk7dx6a9k9","tag_id":"clmx5hzhx003aowtkbfqqhg28","_id":"clmx5hzi60062owtkeejjejh0"},{"post_id":"clmx5hzhq0022owtkhd9g34r7","tag_id":"clmx5hzi6005xowtkforidr0q","_id":"clmx5hzi70066owtk8p2rdg4t"},{"post_id":"clmx5hzhq0022owtkhd9g34r7","tag_id":"clmx5hzi60060owtk3iaj3es4","_id":"clmx5hzi70067owtk1zpyfqq4"},{"post_id":"clmx5hzhq0022owtkhd9g34r7","tag_id":"clmx5hzi60063owtk8mcc08l2","_id":"clmx5hzi70069owtkeumsbydt"},{"post_id":"clmx5hzhq0022owtkhd9g34r7","tag_id":"clmx5hzi60064owtkea7q3onv","_id":"clmx5hzi7006aowtk06o47w3o"},{"post_id":"clmx5hzhq0022owtkhd9g34r7","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzi7006cowtk33yg026w"},{"post_id":"clmx5hzhr0026owtkejup87gu","tag_id":"clmx5hzi60065owtkb5e9fpvv","_id":"clmx5hzi7006dowtk90nk24fw"},{"post_id":"clmx5hzhr0026owtkejup87gu","tag_id":"clmx5hzi70068owtkhgozb6gj","_id":"clmx5hzi8006fowtk280e2tw6"},{"post_id":"clmx5hzhr0026owtkejup87gu","tag_id":"clmx5hzhi0010owtkgscs45gt","_id":"clmx5hzi8006gowtk6m35byqy"},{"post_id":"clmx5hzhr0029owtk64ps2qpp","tag_id":"clmx5hzi7006bowtk1kuxbdum","_id":"clmx5hzi8006kowtkc0x66140"},{"post_id":"clmx5hzhr0029owtk64ps2qpp","tag_id":"clmx5hzi7006eowtk4ufh5atr","_id":"clmx5hzi8006lowtk5ic1gml3"},{"post_id":"clmx5hzhr0029owtk64ps2qpp","tag_id":"clmx5hzi8006howtk01z3f9jp","_id":"clmx5hzi8006nowtke7fd2cgn"},{"post_id":"clmx5hzhr0029owtk64ps2qpp","tag_id":"clmx5hzi60063owtk8mcc08l2","_id":"clmx5hzi8006oowtk2hhm8929"},{"post_id":"clmx5hzhs002dowtk0kdm6q6e","tag_id":"clmx5hzi8006jowtkceke1k18","_id":"clmx5hzi8006qowtk02ghe0vk"},{"post_id":"clmx5hzhs002howtk4dmt7amr","tag_id":"clmx5hzi8006mowtk90nxf9m7","_id":"clmx5hzi8006rowtka0r0a35k"},{"post_id":"clmx5hzht002lowtk3q8i19x2","tag_id":"clmx5hzi8006powtk0qh0emya","_id":"clmx5hzi8006towtk32rb8bs3"},{"post_id":"clmx5hzht002powtkbww2cbdp","tag_id":"clmx5hzhj0017owtk37nb4a8w","_id":"clmx5hzi9006yowtk0izydcwv"},{"post_id":"clmx5hzht002powtkbww2cbdp","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzi9006zowtk61vnekdu"},{"post_id":"clmx5hzht002powtkbww2cbdp","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzia0071owtk30tl69f1"},{"post_id":"clmx5hzht002powtkbww2cbdp","tag_id":"clmx5hzi8006uowtk0ki4e1vo","_id":"clmx5hzia0072owtk1cv4bgml"},{"post_id":"clmx5hzht002powtkbww2cbdp","tag_id":"clmx5hzi9006vowtkc3qu2sbr","_id":"clmx5hzia0074owtkbn4x3coz"},{"post_id":"clmx5hzht002powtkbww2cbdp","tag_id":"clmx5hzi9006wowtkhcyx8fc5","_id":"clmx5hzia0075owtk4xro9hoz"},{"post_id":"clmx5hzht002powtkbww2cbdp","tag_id":"clmx5hzhi0010owtkgscs45gt","_id":"clmx5hzia0077owtk9g6t07do"},{"post_id":"clmx5hzhu002towtkbgzuheeo","tag_id":"clmx5hzi9006xowtk0iw7aspp","_id":"clmx5hzia0079owtk9mxlem2g"},{"post_id":"clmx5hzhu002towtkbgzuheeo","tag_id":"clmx5hzi90070owtkcfjs5x8v","_id":"clmx5hzia007aowtk26eo3cyj"},{"post_id":"clmx5hzhu002towtkbgzuheeo","tag_id":"clmx5hzia0073owtk3bqg6hu5","_id":"clmx5hzia007cowtk4gfk7tke"},{"post_id":"clmx5hzhu002towtkbgzuheeo","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzib007dowtk85q28usb"},{"post_id":"clmx5hzhu002towtkbgzuheeo","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzib007fowtk1tjdffw9"},{"post_id":"clmx5hzhu002xowtkfl0881qd","tag_id":"clmx5hzi9006xowtk0iw7aspp","_id":"clmx5hzib007jowtkh7ym75yu"},{"post_id":"clmx5hzhu002xowtkfl0881qd","tag_id":"clmx5hzi90070owtkcfjs5x8v","_id":"clmx5hzib007kowtkbw5zfnkd"},{"post_id":"clmx5hzhu002xowtkfl0881qd","tag_id":"clmx5hzia0073owtk3bqg6hu5","_id":"clmx5hzic007mowtke7gg7exr"},{"post_id":"clmx5hzhu002xowtkfl0881qd","tag_id":"clmx5hzib007gowtk7lxnfgqo","_id":"clmx5hzic007nowtk27k0042s"},{"post_id":"clmx5hzhu002xowtkfl0881qd","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzic007powtk54hmfz9e"},{"post_id":"clmx5hzhu002xowtkfl0881qd","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzic007qowtk3zxmfnxg"},{"post_id":"clmx5hzhv0030owtkbdj0c6ja","tag_id":"clmx5hzi9006xowtk0iw7aspp","_id":"clmx5hzid007uowtk74vhfs9k"},{"post_id":"clmx5hzhv0030owtkbdj0c6ja","tag_id":"clmx5hzi90070owtkcfjs5x8v","_id":"clmx5hzid007vowtk8onq8d49"},{"post_id":"clmx5hzhv0030owtkbdj0c6ja","tag_id":"clmx5hzia0073owtk3bqg6hu5","_id":"clmx5hzid007xowtk3mmn7w1o"},{"post_id":"clmx5hzhv0030owtkbdj0c6ja","tag_id":"clmx5hzib007gowtk7lxnfgqo","_id":"clmx5hzid007yowtkdzl96k6h"},{"post_id":"clmx5hzhv0030owtkbdj0c6ja","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzid0080owtk615qbc2s"},{"post_id":"clmx5hzhv0030owtkbdj0c6ja","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzid0081owtkdgbygebv"},{"post_id":"clmx5hzhw0032owtk381zc2md","tag_id":"clmx5hzic007towtkgehhdp6q","_id":"clmx5hzid0083owtkaa8k0klz"},{"post_id":"clmx5hzhw0032owtk381zc2md","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzid0084owtkhekg94b3"},{"post_id":"clmx5hzhw0032owtk381zc2md","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzid0086owtkfevye7qd"},{"post_id":"clmx5hzhw0036owtk7yg3f96a","tag_id":"clmx5hzi9006xowtk0iw7aspp","_id":"clmx5hzie0089owtkctojdr7v"},{"post_id":"clmx5hzhw0036owtk7yg3f96a","tag_id":"clmx5hzi90070owtkcfjs5x8v","_id":"clmx5hzie008aowtk499zgdhh"},{"post_id":"clmx5hzhw0036owtk7yg3f96a","tag_id":"clmx5hzia0073owtk3bqg6hu5","_id":"clmx5hzie008cowtkez4m613r"},{"post_id":"clmx5hzhw0036owtk7yg3f96a","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzie008dowtkbj67ba64"},{"post_id":"clmx5hzhw0036owtk7yg3f96a","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzie008fowtk1cuf49qd"},{"post_id":"clmx5hzhx0038owtk7ue4c9ns","tag_id":"clmx5hzi9006xowtk0iw7aspp","_id":"clmx5hzie008iowtkh98436sz"},{"post_id":"clmx5hzhx0038owtk7ue4c9ns","tag_id":"clmx5hzi90070owtkcfjs5x8v","_id":"clmx5hzie008jowtkevxgbazg"},{"post_id":"clmx5hzhx0038owtk7ue4c9ns","tag_id":"clmx5hzia0073owtk3bqg6hu5","_id":"clmx5hzie008lowtk11y1ggzm"},{"post_id":"clmx5hzhx0038owtk7ue4c9ns","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzie008mowtk4off2hte"},{"post_id":"clmx5hzhx0038owtk7ue4c9ns","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzif008oowtkdcjy1qn9"},{"post_id":"clmx5hzhx003bowtkdl975ef3","tag_id":"clmx5hzi9006xowtk0iw7aspp","_id":"clmx5hzif008rowtkao8p7g5b"},{"post_id":"clmx5hzhx003bowtkdl975ef3","tag_id":"clmx5hzi90070owtkcfjs5x8v","_id":"clmx5hzif008sowtkgtmye2h3"},{"post_id":"clmx5hzhx003bowtkdl975ef3","tag_id":"clmx5hzia0073owtk3bqg6hu5","_id":"clmx5hzif008towtk2itn0qti"},{"post_id":"clmx5hzhx003bowtkdl975ef3","tag_id":"clmx5hzh90005owtk4dis0c92","_id":"clmx5hzif008uowtkfb9d6p7i"},{"post_id":"clmx5hzhx003bowtkdl975ef3","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzif008vowtk0dfxcumz"},{"post_id":"clmx5hzhy003eowtkgrjjc0z6","tag_id":"clmx5hzi8006sowtk8hl652fw","_id":"clmx5hzif008wowtkecux2cdw"}],"Tag":[{"name":"dotnet","_id":"clmx5hzh90005owtk4dis0c92"},{"name":"我爱写代码","_id":"clmx5hzhe000jowtkay9c1p11"},{"name":"代码片段","_id":"clmx5hzhh000vowtk97rxeope"},{"name":"deploy","_id":"clmx5hzhi0010owtkgscs45gt"},{"name":"docker","_id":"clmx5hzhj0017owtk37nb4a8w"},{"name":"批量上传nupkg","_id":"clmx5hzhl001fowtk53j0fe2w"},{"name":"bat","_id":"clmx5hzhm001mowtk8gku67ex"},{"name":"NuGet私有化","_id":"clmx5hzhn001sowtk9vr9gg46"},{"name":"docker-compose","_id":"clmx5hzhq001zowtk0w3a3hub"},{"name":"docker-machine","_id":"clmx5hzhr0027owtk2kz0ggem"},{"name":"电脑开启虚拟换CPU","_id":"clmx5hzhs002fowtk2ige2hil"},{"name":"VT-x","_id":"clmx5hzht002nowtkfab13vsc"},{"name":"VT-d","_id":"clmx5hzhu002wowtkeahx54g7"},{"name":"vm","_id":"clmx5hzhw0033owtkawltf4it"},{"name":"虚拟机","_id":"clmx5hzhx003aowtkbfqqhg28"},{"name":"momeory","_id":"clmx5hzhz003gowtk6sc46aee"},{"name":"容器内存控制","_id":"clmx5hzi0003nowtkgmvf9uei"},{"name":"docker-pack","_id":"clmx5hzi0003towtk17tq1sel"},{"name":"镜像制作","_id":"clmx5hzi10040owtk3bmaanzo"},{"name":"docker-swarm","_id":"clmx5hzi10047owtk0cye2a39"},{"name":"remote api","_id":"clmx5hzi3004iowtk2im23hde"},{"name":"病毒","_id":"clmx5hzi3004qowtk26hxh7fx"},{"name":"cmd","_id":"clmx5hzi3004sowtk8vb2ff49"},{"name":"elk","_id":"clmx5hzi3004vowtkebezb5fy"},{"name":"elasticsearch","_id":"clmx5hzi4004xowtke2k3gye9"},{"name":"elastic","_id":"clmx5hzi4004yowtk08s05j3l"},{"name":"Kibana","_id":"clmx5hzi4004zowtk785367u7"},{"name":"jenkins","_id":"clmx5hzi40050owtkgzl3ams0"},{"name":"shell","_id":"clmx5hzi40053owtka080hczu"},{"name":"脚本","_id":"clmx5hzi40056owtkg5vz8vjy"},{"name":"sh","_id":"clmx5hzi40058owtk4pc73nm4"},{"name":"SpringBoot","_id":"clmx5hzi40059owtkbgf6cwo1"},{"name":"Maven","_id":"clmx5hzi4005cowtk7mzhbbwh"},{"name":"swagger","_id":"clmx5hzi5005fowtk1zbfhwhv"},{"name":"CI/CD","_id":"clmx5hzi5005iowtkaqbm8hov"},{"name":"docker构建jenkins","_id":"clmx5hzi5005lowtkgomxfn5r"},{"name":"jenkis部署.netcore","_id":"clmx5hzi5005nowtk49it863q"},{"name":"jenkis部署uniapp","_id":"clmx5hzi5005oowtkgw9g5rjp"},{"name":"uniapp自动推送微信","_id":"clmx5hzi5005powtkdoou44i8"},{"name":"jenkis","_id":"clmx5hzi5005qowtka20pbwwv"},{"name":"虚拟机网络","_id":"clmx5hzi5005rowtk6b4r6m3s"},{"name":"consul","_id":"clmx5hzi6005xowtkforidr0q"},{"name":"ocelot","_id":"clmx5hzi60060owtk3iaj3es4"},{"name":"nginx","_id":"clmx5hzi60063owtk8mcc08l2"},{"name":"微服务","_id":"clmx5hzi60064owtkea7q3onv"},{"name":"mysql","_id":"clmx5hzi60065owtkb5e9fpvv"},{"name":"数据库","_id":"clmx5hzi70068owtkhgozb6gj"},{"name":"nginx代理","_id":"clmx5hzi7006bowtk1kuxbdum"},{"name":"nginx负载均衡","_id":"clmx5hzi7006eowtk4ufh5atr"},{"name":"nginx配置ssl","_id":"clmx5hzi8006howtk01z3f9jp"},{"name":"ssh","_id":"clmx5hzi8006jowtkceke1k18"},{"name":"textbox","_id":"clmx5hzi8006mowtk90nxf9m7"},{"name":"windows部署kafka","_id":"clmx5hzi8006powtk0qh0emya"},{"name":"wtm","_id":"clmx5hzi8006sowtk8hl652fw"},{"name":"linux验证码","_id":"clmx5hzi8006uowtk0ki4e1vo"},{"name":"gdip","_id":"clmx5hzi9006vowtkc3qu2sbr"},{"name":"System.Drawing 兼容问题","_id":"clmx5hzi9006wowtkhcyx8fc5"},{"name":"efcore","_id":"clmx5hzi9006xowtk0iw7aspp"},{"name":"saas","_id":"clmx5hzi90070owtkcfjs5x8v"},{"name":"多租户","_id":"clmx5hzia0073owtk3bqg6hu5"},{"name":"EF数据过滤","_id":"clmx5hzib007gowtk7lxnfgqo"},{"name":"日志","_id":"clmx5hzic007towtkgehhdp6q"}]}}